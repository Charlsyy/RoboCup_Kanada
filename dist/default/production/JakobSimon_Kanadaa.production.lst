

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 17 13:13:00 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1519
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    13                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    41                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	intentry,global,class=CODE,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	dabs	1,0x7E,2
    57  0000                     
    58                           ; Version 1.45
    59                           ; Generated 16/11/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC16F1519 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     	;# 
    93  0001                     	;# 
    94  0002                     	;# 
    95  0003                     	;# 
    96  0004                     	;# 
    97  0005                     	;# 
    98  0006                     	;# 
    99  0007                     	;# 
   100  0008                     	;# 
   101  0009                     	;# 
   102  000A                     	;# 
   103  000B                     	;# 
   104  000C                     	;# 
   105  000D                     	;# 
   106  000E                     	;# 
   107  000F                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  008F                     	;# 
   124  0090                     	;# 
   125  0091                     	;# 
   126  0092                     	;# 
   127  0095                     	;# 
   128  0096                     	;# 
   129  0097                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009B                     	;# 
   134  009C                     	;# 
   135  009D                     	;# 
   136  009E                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0110                     	;# 
   142  0116                     	;# 
   143  0117                     	;# 
   144  011D                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  018E                     	;# 
   148  018F                     	;# 
   149  0190                     	;# 
   150  0191                     	;# 
   151  0191                     	;# 
   152  0192                     	;# 
   153  0193                     	;# 
   154  0193                     	;# 
   155  0194                     	;# 
   156  0195                     	;# 
   157  0196                     	;# 
   158  0197                     	;# 
   159  0199                     	;# 
   160  019A                     	;# 
   161  019B                     	;# 
   162  019B                     	;# 
   163  019B                     	;# 
   164  019B                     	;# 
   165  019C                     	;# 
   166  019C                     	;# 
   167  019D                     	;# 
   168  019E                     	;# 
   169  019F                     	;# 
   170  020D                     	;# 
   171  0210                     	;# 
   172  0211                     	;# 
   173  0211                     	;# 
   174  0212                     	;# 
   175  0212                     	;# 
   176  0213                     	;# 
   177  0213                     	;# 
   178  0214                     	;# 
   179  0214                     	;# 
   180  0215                     	;# 
   181  0215                     	;# 
   182  0215                     	;# 
   183  0216                     	;# 
   184  0216                     	;# 
   185  0217                     	;# 
   186  0217                     	;# 
   187  0291                     	;# 
   188  0291                     	;# 
   189  0292                     	;# 
   190  0293                     	;# 
   191  0298                     	;# 
   192  0298                     	;# 
   193  0299                     	;# 
   194  029A                     	;# 
   195  0394                     	;# 
   196  0395                     	;# 
   197  0396                     	;# 
   198  0FE4                     	;# 
   199  0FE5                     	;# 
   200  0FE6                     	;# 
   201  0FE7                     	;# 
   202  0FE8                     	;# 
   203  0FE9                     	;# 
   204  0FEA                     	;# 
   205  0FEB                     	;# 
   206  0FED                     	;# 
   207  0FEE                     	;# 
   208  0FEF                     	;# 
   209                           
   210                           	psect	idataCOMMON
   211  07FF                     __pidataCOMMON:	
   212                           
   213                           ;initializer for _wand
   214  07FF  3426               	retlw	38
   215                           
   216                           	psect	idataBANK0
   217  07F1                     __pidataBANK0:	
   218                           
   219                           ;initializer for _schwarz
   220  07F1  34EB               	retlw	235
   221                           
   222                           ;initializer for _Waerme_rechts
   223  07F2  343A               	retlw	58
   224                           
   225                           ;initializer for _Waerme_links
   226  07F3  343A               	retlw	58
   227                           
   228                           ;initializer for _zunah
   229  07F4  344B               	retlw	75
   230                           
   231                           ;initializer for _zuweit
   232  07F5  3455               	retlw	85
   233                           
   234                           ;initializer for _Schwellwert_Omni
   235  07F6  343D               	retlw	61
   236                           
   237                           ;initializer for _Schwellwert_Ausrichten
   238  07F7  3424               	retlw	36
   239                           
   240                           ;initializer for _Ausrichten_Stopp
   241  07F8  340F               	retlw	15
   242                           
   243                           ;initializer for _Ausrichten_Fahren
   244  07F9  3405               	retlw	5
   245                           
   246                           ;initializer for _grad_90links_2
   247  07FA  340C               	retlw	12
   248                           
   249                           ;initializer for _grad_90links_1
   250  07FB  3441               	retlw	65
   251                           
   252                           ;initializer for _grad_90_2
   253  07FC  340C               	retlw	12
   254                           
   255                           ;initializer for _grad_90_1
   256  07FD  3445               	retlw	69
   257                           
   258                           ;initializer for _Register_R_MLX
   259  07FE  3407               	retlw	7
   260                           
   261                           	psect	idataBANK1
   262  115D                     __pidataBANK1:	
   263                           
   264                           ;initializer for _Zeit_power_Ausrichten
   265  115D  3464               	retlw	100
   266  115E  3400               	retlw	0
   267                           
   268                           ;initializer for _H
   269  115F  3448               	retlw	72
   270                           
   271                           ;initializer for _VAR_omni
   272  1160  343C               	retlw	60
   273                           
   274                           ;initializer for _cm_30
   275  1161  3486               	retlw	134
   276                           
   277                           	psect	idataBANK2
   278  116E                     __pidataBANK2:	
   279                           
   280                           ;initializer for _Channel
   281  116E  3400               	retlw	0
   282  116F  3401               	retlw	1
   283  1170  3402               	retlw	2
   284  1171  3403               	retlw	3
   285  1172  3404               	retlw	4
   286  1173  3405               	retlw	5
   287  1174  3406               	retlw	6
   288  1175  3407               	retlw	7
   289  1176  3411               	retlw	17
   290  1177  3412               	retlw	18
   291  1178  3413               	retlw	19
   292                           
   293                           	psect	stringtext1
   294  1800                     __pstringtext1:	
   295  1800                     _PIC_Letter_1:	
   296  1800  3415               	retlw	21
   297  1801                     __end_of_PIC_Letter_1:	
   298                           
   299                           	psect	stringtext2
   300  1801                     __pstringtext2:	
   301  1801                     _PIC_Slave:	
   302  1801  3414               	retlw	20
   303  1802                     __end_of_PIC_Slave:	
   304                           
   305                           	psect	stringtext3
   306  1802                     __pstringtext3:	
   307  1802                     _MLX_Slave:	
   308  1802  345A               	retlw	90
   309  1803                     __end_of_MLX_Slave:	
   310  0016                     _TMR1	set	22
   311  001C                     _T2CON	set	28
   312  001B                     _PR2	set	27
   313  0015                     _TMR0	set	21
   314  0018                     _T1CON	set	24
   315  0019                     _T1GCON	set	25
   316  0012                     _PIR2	set	18
   317  0011                     _PIR1	set	17
   318  000B                     _INTCON	set	11
   319  0010                     _PORTE	set	16
   320  000F                     _PORTD	set	15
   321  000E                     _PORTC	set	14
   322  000D                     _PORTB	set	13
   323  000C                     _PORTA	set	12
   324  0058                     _IOCIF	set	88
   325  0088                     _TMR1IF	set	136
   326  005A                     _TMR0IF	set	90
   327  007C                     _RD4	set	124
   328  005F                     _GIE	set	95
   329  005C                     _INTE	set	92
   330  005D                     _TMR0IE	set	93
   331  005B                     _IOCIE	set	91
   332  0069                     _RB1	set	105
   333  0093                     _BCLIF	set	147
   334  008B                     _SSPIF	set	139
   335  009C                     _ADRESH	set	156
   336  0092                     _PIE2	set	146
   337  0091                     _PIE1	set	145
   338  0095                     _OPTION_REG	set	149
   339  009E                     _ADCON1	set	158
   340  009D                     _ADCON0	set	157
   341  0090                     _TRISE	set	144
   342  008F                     _TRISD	set	143
   343  008E                     _TRISC	set	142
   344  008D                     _TRISB	set	141
   345  008C                     _TRISA	set	140
   346  04E9                     _GO_nDONE	set	1257
   347  048E                     _ADIE	set	1166
   348  048B                     _SSPIE	set	1163
   349  0488                     _TMR1IE	set	1160
   350  0110                     _LATE	set	272
   351  010F                     _LATD	set	271
   352  010E                     _LATC	set	270
   353  010D                     _LATB	set	269
   354  010C                     _LATA	set	268
   355  087D                     _LATD5	set	2173
   356  0864                     _LATA4	set	2148
   357  0190                     _ANSELE	set	400
   358  018F                     _ANSELD	set	399
   359  018E                     _ANSELC	set	398
   360  018D                     _ANSELB	set	397
   361  018C                     _ANSELA	set	396
   362  0211                     _SSPBUF	set	529
   363  0215                     _SSPCON1	set	533
   364  0212                     _SSPADD	set	530
   365  0214                     _SSPSTAT	set	532
   366  020D                     _WPUB	set	525
   367  10B5                     _ACKDT	set	4277
   368  10B2                     _PEN	set	4274
   369  10B4                     _ACKEN	set	4276
   370  10B3                     _RCEN	set	4275
   371  10B1                     _RSEN	set	4273
   372  10B0                     _SEN	set	4272
   373  029A                     _CCP2CON	set	666
   374  0298                     _CCPR2L	set	664
   375  0293                     _CCP1CON	set	659
   376  0291                     _CCPR1L	set	657
   377  0396                     _IOCBF	set	918
   378  0395                     _IOCBN	set	917
   379  0394                     _IOCBP	set	916
   380  1CB0                     _IOCBF0	set	7344
   381                           
   382                           ; #config settings
   383  0000                     
   384                           	psect	cinit
   385  01A1                     start_initialization:	
   386  01A1                     __initialization:	
   387                           
   388                           ; Initialize objects allocated to COMMON
   389  01A1  3187  27FF  3181   	fcall	__pidataCOMMON	;fetch initializer
   390  01A4  00F9               	movwf	__pdataCOMMON& (0+127)
   391                           
   392                           ; Initialize objects allocated to BANK0
   393  01A5  30F1               	movlw	low __pidataBANK0
   394  01A6  0084               	movwf	4
   395  01A7  3087               	movlw	(high __pidataBANK0)| (0+128)
   396  01A8  0085               	movwf	5
   397  01A9  3062               	movlw	low __pdataBANK0
   398  01AA  0086               	movwf	6
   399  01AB  3000               	movlw	high __pdataBANK0
   400  01AC  0087               	movwf	7
   401  01AD  300E               	movlw	14
   402  01AE  3191  2168  3181   	fcall	init_ram
   403                           
   404                           ; Initialize objects allocated to BANK1
   405  01B1  305D               	movlw	low __pidataBANK1
   406  01B2  0084               	movwf	4
   407  01B3  3091               	movlw	(high __pidataBANK1)| (0+128)
   408  01B4  0085               	movwf	5
   409  01B5  30E7               	movlw	low __pdataBANK1
   410  01B6  0086               	movwf	6
   411  01B7  3000               	movlw	high __pdataBANK1
   412  01B8  0087               	movwf	7
   413  01B9  3005               	movlw	5
   414  01BA  3191  2168  3181   	fcall	init_ram
   415                           
   416                           ; Initialize objects allocated to BANK2
   417  01BD  306E               	movlw	low __pidataBANK2
   418  01BE  0084               	movwf	4
   419  01BF  3091               	movlw	(high __pidataBANK2)| (0+128)
   420  01C0  0085               	movwf	5
   421  01C1  3034               	movlw	low __pdataBANK2
   422  01C2  0086               	movwf	6
   423  01C3  3001               	movlw	high __pdataBANK2
   424  01C4  0087               	movwf	7
   425  01C5  300B               	movlw	11
   426  01C6  3191  2168  3181   	fcall	init_ram
   427                           
   428                           ; Clear objects allocated to BITCOMMON
   429  01C9  01F0               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   430  01CA  01F1               	clrf	((__pbitbssCOMMON/(0+8)+1))& (0+127)
   431  01CB  01F2               	clrf	((__pbitbssCOMMON/(0+8)+2))& (0+127)
   432                           
   433                           ; Clear objects allocated to BANK0
   434  01CC  3054               	movlw	low __pbssBANK0
   435  01CD  0084               	movwf	4
   436  01CE  3000               	movlw	high __pbssBANK0
   437  01CF  0085               	movwf	5
   438  01D0  300E               	movlw	14
   439  01D1  3191  2162  3181   	fcall	clear_ram0
   440                           
   441                           ; Clear objects allocated to BANK1
   442  01D4  30A0               	movlw	low __pbssBANK1
   443  01D5  0084               	movwf	4
   444  01D6  3000               	movlw	high __pbssBANK1
   445  01D7  0085               	movwf	5
   446  01D8  3041               	movlw	65
   447  01D9  3191  2162  3181   	fcall	clear_ram0
   448                           
   449                           ; Clear objects allocated to BANK2
   450  01DC  3020               	movlw	low __pbssBANK2
   451  01DD  0084               	movwf	4
   452  01DE  3001               	movlw	high __pbssBANK2
   453  01DF  0085               	movwf	5
   454  01E0  3014               	movlw	20
   455  01E1  3191  2162         	fcall	clear_ram0
   456  01E3                     end_of_initialization:	
   457                           ;End of C runtime variable initialization code
   458                           
   459  01E3                     __end_of__initialization:	
   460  01E3  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   461  01E4  0020               	movlb	0
   462  01E5  3186  2EA9         	ljmp	_main	;jump to C main() function
   463                           
   464                           	psect	bitbssCOMMON
   465  0380                     __pbitbssCOMMON:	
   466  0380                     _Flag_Strecke_messen:	
   467  0380                     	ds	1
   468  0381                     _Flag_Strecke_erreicht:	
   469  0381                     	ds	1
   470  0382                     _nicht_rechts:	
   471  0382                     	ds	1
   472  0383                     _Flag_T_rechts:	
   473  0383                     	ds	1
   474  0384                     _Flag_T_links:	
   475  0384                     	ds	1
   476  0385                     _Flag_Hindernis:	
   477  0385                     	ds	1
   478  0386                     _VAR_opfer_aus:	
   479  0386                     	ds	1
   480  0387                     _VAR_schwarz_rechts:	
   481  0387                     	ds	1
   482  0388                     _VAR_schwarz:	
   483  0388                     	ds	1
   484  0389                     _VAR_von_sensor_VR_bis_mitte:	
   485  0389                     	ds	1
   486  038A                     _VAR_von_mitte_bis_wieder_wand:	
   487  038A                     	ds	1
   488  038B                     _Flag_Zeit1000ms:	
   489  038B                     	ds	1
   490  038C                     _Flag_LED:	
   491  038C                     	ds	1
   492  038D                     _Flag_kalibrieren:	
   493  038D                     	ds	1
   494  038E                     _I2C_Read:	
   495  038E                     	ds	1
   496  038F                     _I2C_Write:	
   497  038F                     	ds	1
   498  0390                     _MLX_Slave_toggel:	
   499  0390                     	ds	1
   500                           
   501                           	psect	dataCOMMON
   502  0079                     __pdataCOMMON:	
   503  0079                     _wand:	
   504  0079                     	ds	1
   505                           
   506                           	psect	bssBANK0
   507  0054                     __pbssBANK0:	
   508  0054                     _VAR_aus_zeit:	
   509  0054                     	ds	2
   510  0056                     _Encoder:	
   511  0056                     	ds	1
   512  0057                     _n:	
   513  0057                     	ds	1
   514  0058                     _m:	
   515  0058                     	ds	1
   516  0059                     _Count:	
   517  0059                     	ds	1
   518  005A                     _I2C_Count:	
   519  005A                     	ds	1
   520  005B                     _I2C_Index_w:	
   521  005B                     	ds	1
   522  005C                     _Channel_Index:	
   523  005C                     	ds	1
   524  005D                     _Temperatur_HI_links:	
   525  005D                     	ds	1
   526  005E                     _Temperatur_HI_rechts:	
   527  005E                     	ds	1
   528  005F                     _Temperatur_LO_links:	
   529  005F                     	ds	1
   530  0060                     _Temperatur_LO_rechts:	
   531  0060                     	ds	1
   532  0061                     _I2C_Add:	
   533  0061                     	ds	1
   534                           
   535                           	psect	dataBANK0
   536  0062                     __pdataBANK0:	
   537  0062                     _schwarz:	
   538  0062                     	ds	1
   539  0063                     _Waerme_rechts:	
   540  0063                     	ds	1
   541  0064                     _Waerme_links:	
   542  0064                     	ds	1
   543  0065                     _zunah:	
   544  0065                     	ds	1
   545  0066                     _zuweit:	
   546  0066                     	ds	1
   547  0067                     _Schwellwert_Omni:	
   548  0067                     	ds	1
   549  0068                     _Schwellwert_Ausrichten:	
   550  0068                     	ds	1
   551  0069                     _Ausrichten_Stopp:	
   552  0069                     	ds	1
   553  006A                     _Ausrichten_Fahren:	
   554  006A                     	ds	1
   555  006B                     _grad_90links_2:	
   556  006B                     	ds	1
   557  006C                     _grad_90links_1:	
   558  006C                     	ds	1
   559  006D                     _grad_90_2:	
   560  006D                     	ds	1
   561  006E                     _grad_90_1:	
   562  006E                     	ds	1
   563  006F                     _Register_R_MLX:	
   564  006F                     	ds	1
   565                           
   566                           	psect	bssBANK1
   567  00A0                     __pbssBANK1:	
   568  00A0                     _A_D_Wert:	
   569  00A0                     	ds	28
   570  00BC                     _Datum_R:	
   571  00BC                     	ds	3
   572  00BF                     _Strecke:	
   573  00BF                     	ds	2
   574  00C1                     _Register_R:	
   575  00C1                     	ds	2
   576  00C3                     _zeit:	
   577  00C3                     	ds	2
   578  00C5                     _VAR_links_zeit:	
   579  00C5                     	ds	2
   580  00C7                     _VAR_rechts_zeit:	
   581  00C7                     	ds	2
   582  00C9                     _VAR_zeit_opfer:	
   583  00C9                     	ds	2
   584  00CB                     _VAR_bis_mitte_zeit:	
   585  00CB                     	ds	2
   586  00CD                     _Tick:	
   587  00CD                     	ds	2
   588  00CF                     _z:	
   589  00CF                     	ds	1
   590  00D0                     _encodersave:	
   591  00D0                     	ds	1
   592  00D1                     _VAR_cm_f:	
   593  00D1                     	ds	1
   594  00D2                     _VAR_schwarz_ausrichten_merken:	
   595  00D2                     	ds	1
   596  00D3                     _VAR_links_ist_nichts:	
   597  00D3                     	ds	1
   598  00D4                     _VAR_im_Kreis_faren:	
   599  00D4                     	ds	1
   600  00D5                     _Var_lang_Ausrichten:	
   601  00D5                     	ds	1
   602  00D6                     _VAR_bis_wand_zeit:	
   603  00D6                     	ds	1
   604  00D7                     _VAR_Schwarz_ausrichten:	
   605  00D7                     	ds	1
   606  00D8                     _VAR_ausrichten_durchgaenge:	
   607  00D8                     	ds	1
   608  00D9                     _Abstand_US:	
   609  00D9                     	ds	1
   610  00DA                     _Zeit_US:	
   611  00DA                     	ds	1
   612  00DB                     _n_US:	
   613  00DB                     	ds	1
   614  00DC                     _Register_S:	
   615  00DC                     	ds	1
   616  00DD                     _Datum2_an_Letter:	
   617  00DD                     	ds	1
   618  00DE                     _Datum1_an_Letter:	
   619  00DE                     	ds	1
   620  00DF                     _I2C_Index_R:	
   621  00DF                     	ds	1
   622  00E0                     _junk:	
   623  00E0                     	ds	1
   624                           
   625                           	psect	dataBANK1
   626  00E7                     __pdataBANK1:	
   627  00E7                     _Zeit_power_Ausrichten:	
   628  00E7                     	ds	2
   629  00E9                     _H:	
   630  00E9                     	ds	1
   631  00EA                     _VAR_omni:	
   632  00EA                     	ds	1
   633  00EB                     _cm_30:	
   634  00EB                     	ds	1
   635                           
   636                           	psect	bssBANK2
   637  0120                     __pbssBANK2:	
   638  0120                     _Datum_S:	
   639  0120                     	ds	20
   640                           
   641                           	psect	dataBANK2
   642  0134                     __pdataBANK2:	
   643  0134                     _Channel:	
   644  0134                     	ds	11
   645                           
   646                           	psect	inittext
   647  1168                     init_ram:	
   648  1168  00FE               	movwf	126
   649  1169                     initloop:	
   650  1169  0012               	moviw fsr0++
   651  116A  001E               	movwi fsr1++
   652  116B  0BFE               	decfsz	126,f
   653  116C  2969               	goto	initloop
   654  116D  3400               	retlw	0
   655                           
   656                           	psect	clrtext
   657  1162                     clear_ram0:	
   658                           ;	Called with FSR0 containing the base address, and
   659                           ;	WREG with the size to clear
   660                           
   661  1162  0064               	clrwdt	;clear the watchdog before getting into this loop
   662  1163                     clrloop0:	
   663  1163  0180               	clrf	0	;clear RAM location pointed to by FSR
   664  1164  3101               	addfsr 0,1
   665  1165  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   666  1166  2963               	goto	clrloop0	;have we reached the end yet?
   667  1167  3400               	retlw	0	;all done for this memory range, return
   668                           
   669                           	psect	cstackBANK1
   670  00E1                     __pcstackBANK1:	
   671  00E1                     ??_schwarzeplatte:	
   672                           
   673                           ; 1 bytes @ 0x0
   674  00E1                     	ds	2
   675  00E3                     ??_von_mitte_bis_wieder_wand:	
   676                           
   677                           ; 1 bytes @ 0x2
   678  00E3                     	ds	2
   679  00E5                     ??_main:	
   680                           
   681                           ; 1 bytes @ 0x4
   682  00E5                     	ds	2
   683                           
   684                           	psect	cstackCOMMON
   685  0073                     __pcstackCOMMON:	
   686  0073                     ?_Werte_auf_LCD_anzeigen:	
   687  0073                     ?_kit_abwerfen:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0073                     ?_schwarzeplatte:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0073                     ?_anderwandlang:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0073                     ?_opfer:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0073                     ?_hindernis:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0073                     ?_von_sensor_VR_bis_mitte:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0073                     ?_ausrichten:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0073                     ?_rechts90grad:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0073                     ?_im_Kreis_faren:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0073                     ?_von_mitte_bis_wieder_wand:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0073                     ?_links90grad:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0073                     ?_links_ausrichten:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0073                     ?_rechts_ausrichten:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0073                     ?_vorne_ausrichten:	
   727                           ; 1 bytes @ 0x0
   728                           
   729  0073                     ?_hinten_ausrichten:	
   730                           ; 1 bytes @ 0x0
   731                           
   732  0073                     ?_init:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0073                     ?_warten_auf_SSP_flag:	
   736                           ; 1 bytes @ 0x0
   737                           
   738  0073                     ??_warten_auf_SSP_flag:	
   739                           ; 1 bytes @ 0x0
   740                           
   741  0073                     ?_MLX_read:	
   742                           ; 1 bytes @ 0x0
   743                           
   744  0073                     ??_MLX_read:	
   745                           ; 1 bytes @ 0x0
   746                           
   747  0073                     ?_main:	
   748                           ; 1 bytes @ 0x0
   749                           
   750  0073                     ?_von_mitte_bis_wieder_wand_in_schwarzeplatte:	
   751                           ; 1 bytes @ 0x0
   752                           
   753  0073                     ?_omnifakelinks:	
   754                           ; 1 bytes @ 0x0
   755                           
   756  0073                     ?_omnifakerechts:	
   757                           ; 1 bytes @ 0x0
   758                           
   759  0073                     ?_Power_Ausrichten:	
   760                           ; 1 bytes @ 0x0
   761                           
   762  0073                     ?_Interrupt:	
   763                           ; 1 bytes @ 0x0
   764                           
   765                           
   766                           ; 1 bytes @ 0x0
   767  0073                     	ds	2
   768  0075                     ??_Interrupt:	
   769                           
   770                           ; 1 bytes @ 0x2
   771  0075                     	ds	2
   772  0077                     ??_Werte_auf_LCD_anzeigen:	
   773  0077                     ??_kit_abwerfen:	
   774                           ; 1 bytes @ 0x4
   775                           
   776  0077                     ??_hindernis:	
   777                           ; 1 bytes @ 0x4
   778                           
   779  0077                     ?_Strecke_fahren:	
   780                           ; 1 bytes @ 0x4
   781                           
   782  0077                     ??_init:	
   783                           ; 1 bytes @ 0x4
   784                           
   785  0077                     ??_Power_Ausrichten:	
   786                           ; 1 bytes @ 0x4
   787                           
   788  0077                     ??___awdiv:	
   789                           ; 1 bytes @ 0x4
   790                           
   791  0077                     Strecke_fahren@Direction:	
   792                           ; 1 bytes @ 0x4
   793                           
   794  0077                     ___lbtoft@c:	
   795                           ; 1 bytes @ 0x4
   796                           
   797                           
   798                           ; 1 bytes @ 0x4
   799  0077                     	ds	1
   800  0078                     Werte_auf_LCD_anzeigen@i:	
   801  0078                     Strecke_fahren@Length:	
   802                           ; 1 bytes @ 0x5
   803                           
   804                           
   805                           ; 1 bytes @ 0x5
   806  0078                     	ds	1
   807                           
   808                           	psect	cstackBANK0
   809  0020                     __pcstackBANK0:	
   810  0020                     ??_Strecke_fahren:	
   811  0020                     ?___awdiv:	
   812                           ; 1 bytes @ 0x0
   813                           
   814  0020                     ?___ftpack:	
   815                           ; 2 bytes @ 0x0
   816                           
   817  0020                     kit_abwerfen@i:	
   818                           ; 3 bytes @ 0x0
   819                           
   820  0020                     ___awdiv@divisor:	
   821                           ; 1 bytes @ 0x0
   822                           
   823  0020                     ___ftpack@arg:	
   824                           ; 2 bytes @ 0x0
   825                           
   826                           
   827                           ; 3 bytes @ 0x0
   828  0020                     	ds	1
   829  0021                     kit_abwerfen@i_278:	
   830                           
   831                           ; 1 bytes @ 0x1
   832  0021                     	ds	1
   833  0022                     ??_rechts90grad:	
   834  0022                     ??_links90grad:	
   835                           ; 1 bytes @ 0x2
   836                           
   837  0022                     kit_abwerfen@i_279:	
   838                           ; 1 bytes @ 0x2
   839                           
   840  0022                     ___awdiv@dividend:	
   841                           ; 1 bytes @ 0x2
   842                           
   843                           
   844                           ; 2 bytes @ 0x2
   845  0022                     	ds	1
   846  0023                     ??_opfer:	
   847  0023                     ??_im_Kreis_faren:	
   848                           ; 1 bytes @ 0x3
   849                           
   850  0023                     ___ftpack@exp:	
   851                           ; 1 bytes @ 0x3
   852                           
   853                           
   854                           ; 1 bytes @ 0x3
   855  0023                     	ds	1
   856  0024                     ___awdiv@counter:	
   857  0024                     ___ftpack@sign:	
   858                           ; 1 bytes @ 0x4
   859                           
   860                           
   861                           ; 1 bytes @ 0x4
   862  0024                     	ds	1
   863  0025                     ??_anderwandlang:	
   864  0025                     ??___ftpack:	
   865                           ; 1 bytes @ 0x5
   866                           
   867  0025                     ??_von_mitte_bis_wieder_wand_in_schwarzeplatte:	
   868                           ; 1 bytes @ 0x5
   869                           
   870  0025                     ___awdiv@sign:	
   871                           ; 1 bytes @ 0x5
   872                           
   873                           
   874                           ; 1 bytes @ 0x5
   875  0025                     	ds	1
   876  0026                     ___awdiv@quotient:	
   877                           
   878                           ; 2 bytes @ 0x6
   879  0026                     	ds	2
   880  0028                     ??_omnifakelinks:	
   881  0028                     ??_omnifakerechts:	
   882                           ; 1 bytes @ 0x8
   883                           
   884  0028                     ?___lbtoft:	
   885                           ; 1 bytes @ 0x8
   886                           
   887                           
   888                           ; 3 bytes @ 0x8
   889  0028                     	ds	3
   890  002B                     ??___lbtoft:	
   891                           
   892                           ; 1 bytes @ 0xB
   893  002B                     	ds	4
   894  002F                     ?___ftmul:	
   895  002F                     ___ftmul@f1:	
   896                           ; 3 bytes @ 0xF
   897                           
   898                           
   899                           ; 3 bytes @ 0xF
   900  002F                     	ds	3
   901  0032                     ___ftmul@f2:	
   902                           
   903                           ; 3 bytes @ 0x12
   904  0032                     	ds	3
   905  0035                     ??___ftmul:	
   906                           
   907                           ; 1 bytes @ 0x15
   908  0035                     	ds	4
   909  0039                     ___ftmul@exp:	
   910                           
   911                           ; 1 bytes @ 0x19
   912  0039                     	ds	1
   913  003A                     ___ftmul@f3_as_product:	
   914                           
   915                           ; 3 bytes @ 0x1A
   916  003A                     	ds	3
   917  003D                     ___ftmul@cntr:	
   918                           
   919                           ; 1 bytes @ 0x1D
   920  003D                     	ds	1
   921  003E                     ___ftmul@sign:	
   922                           
   923                           ; 1 bytes @ 0x1E
   924  003E                     	ds	1
   925  003F                     ?___fttol:	
   926  003F                     ___fttol@f1:	
   927                           ; 4 bytes @ 0x1F
   928                           
   929                           
   930                           ; 3 bytes @ 0x1F
   931  003F                     	ds	4
   932  0043                     ??___fttol:	
   933                           
   934                           ; 1 bytes @ 0x23
   935  0043                     	ds	4
   936  0047                     ___fttol@sign1:	
   937                           
   938                           ; 1 bytes @ 0x27
   939  0047                     	ds	1
   940  0048                     ___fttol@lval:	
   941                           
   942                           ; 4 bytes @ 0x28
   943  0048                     	ds	4
   944  004C                     ___fttol@exp1:	
   945                           
   946                           ; 1 bytes @ 0x2C
   947  004C                     	ds	1
   948  004D                     ??_links_ausrichten:	
   949  004D                     ??_rechts_ausrichten:	
   950                           ; 1 bytes @ 0x2D
   951                           
   952  004D                     ??_vorne_ausrichten:	
   953                           ; 1 bytes @ 0x2D
   954                           
   955  004D                     ??_hinten_ausrichten:	
   956                           ; 1 bytes @ 0x2D
   957                           
   958                           
   959                           ; 1 bytes @ 0x2D
   960  004D                     	ds	4
   961  0051                     ??_ausrichten:	
   962                           
   963                           ; 1 bytes @ 0x31
   964  0051                     	ds	2
   965  0053                     ??_von_sensor_VR_bis_mitte:	
   966                           
   967                           ; 1 bytes @ 0x33
   968  0053                     	ds	1
   969                           
   970                           	psect	maintext
   971  06A9                     __pmaintext:	
   972 ;;
   973 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   974 ;;
   975 ;; *************** function _main *****************
   976 ;; Defined at:
   977 ;;		line 207 in file "PGM_5.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;		None
   980 ;; Auto vars:     Size  Location     Type
   981 ;;		None
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   986 ;; Tracked objects:
   987 ;;		On entry : B1F/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   993 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
   994 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
   995 ;;Total ram usage:        2 bytes
   996 ;; Hardware stack levels required when called:   10
   997 ;; This function calls:
   998 ;;		_Strecke_fahren
   999 ;;		_Werte_auf_LCD_anzeigen
  1000 ;;		_anderwandlang
  1001 ;;		_ausrichten
  1002 ;;		_hindernis
  1003 ;;		_im_Kreis_faren
  1004 ;;		_init
  1005 ;;		_kit_abwerfen
  1006 ;;		_links90grad
  1007 ;;		_opfer
  1008 ;;		_rechts90grad
  1009 ;;		_schwarzeplatte
  1010 ;;		_von_mitte_bis_wieder_wand
  1011 ;;		_von_sensor_VR_bis_mitte
  1012 ;; This function is called by:
  1013 ;;		Startup code after reset
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           
  1018                           ;psect for function _main
  1019  06A9                     _main:	
  1020                           
  1021                           ;PGM_5.c: 208: init();
  1022                           
  1023                           ;incstack = 0
  1024                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1025  06A9  3193  231D  3186   	fcall	_init
  1026                           
  1027                           ;PGM_5.c: 212: RB1=0;
  1028  06AC  0020               	movlb	0	; select bank0
  1029  06AD  108D               	bcf	13,1	;volatile
  1030                           
  1031                           ;PGM_5.c: 213: LATD = (LATD & 0b11110000);
  1032  06AE  0022               	movlb	2	; select bank2
  1033  06AF  080F               	movf	15,w	;volatile
  1034  06B0  39F0               	andlw	240
  1035  06B1  008F               	movwf	15	;volatile
  1036                           
  1037                           ;PGM_5.c: 214: CCPR1L = 255;
  1038  06B2  30FF               	movlw	255
  1039  06B3  0025               	movlb	5	; select bank5
  1040  06B4  0091               	movwf	17	;volatile
  1041                           
  1042                           ;PGM_5.c: 215: CCPR2L = 155;
  1043  06B5  309B               	movlw	155
  1044  06B6  0098               	movwf	24	;volatile
  1045                           
  1046                           ;PGM_5.c: 223: TMR1IE = 0;
  1047  06B7  0021               	movlb	1	; select bank1
  1048  06B8  1011               	bcf	17,0	;volatile
  1049                           
  1050                           ;PGM_5.c: 224: IOCIE = 1;
  1051  06B9  158B               	bsf	11,3	;volatile
  1052                           
  1053                           ;PGM_5.c: 225: TMR0IE = 1;
  1054  06BA  168B               	bsf	11,5	;volatile
  1055                           
  1056                           ;PGM_5.c: 226: SSPIE = 1;
  1057  06BB  1591               	bsf	17,3	;volatile
  1058                           
  1059                           ;PGM_5.c: 227: INTE = 0;
  1060  06BC  120B               	bcf	11,4	;volatile
  1061                           
  1062                           ;PGM_5.c: 228: ADIE = 0;
  1063  06BD  1311               	bcf	17,6	;volatile
  1064                           
  1065                           ;PGM_5.c: 230: I2C_Write = 0;
  1066  06BE  13F1               	bcf	_I2C_Write/(0+8),_I2C_Write& (0+7)
  1067                           
  1068                           ;PGM_5.c: 231: I2C_Read = 0;
  1069  06BF  1371               	bcf	_I2C_Read/(0+8),_I2C_Read& (0+7)
  1070                           
  1071                           ;PGM_5.c: 232: Flag_LED = 0;
  1072  06C0  1271               	bcf	_Flag_LED/(0+8),_Flag_LED& (0+7)
  1073                           
  1074                           ;PGM_5.c: 234: Register_R[0] = 0x07;
  1075  06C1  3007               	movlw	7
  1076  06C2  00E5               	movwf	??_main^(0+128)
  1077  06C3  0865               	movf	??_main^(0+128),w
  1078  06C4  00C1               	movwf	_Register_R^(0+128)
  1079                           
  1080                           ;PGM_5.c: 235: Register_R[1] = 127;
  1081  06C5  307F               	movlw	127
  1082  06C6  00E5               	movwf	??_main^(0+128)
  1083  06C7  0865               	movf	??_main^(0+128),w
  1084  06C8  00C2               	movwf	(_Register_R^(0+128)+1)
  1085                           
  1086                           ;PGM_5.c: 237: _delay((unsigned long)((600)*(20000000/4000.0)));
  1087  06C9  3010               	movlw	16
  1088  06CA  0021               	movlb	1	; select bank1
  1089  06CB  00E6               	movwf	(??_main^(0+128)+1)
  1090  06CC  3039               	movlw	57
  1091  06CD  00E5               	movwf	??_main^(0+128)
  1092  06CE  300D               	movlw	13
  1093  06CF                     u6697:	
  1094  06CF  0B89               	decfsz	9,f
  1095  06D0  2ECF               	goto	u6697
  1096  06D1  0BE5               	decfsz	??_main^(0+128),f
  1097  06D2  2ECF               	goto	u6697
  1098  06D3  0BE6               	decfsz	(??_main^(0+128)+1),f
  1099  06D4  2ECF               	goto	u6697
  1100  06D5  3200               	nop2
  1101                           
  1102                           ;PGM_5.c: 238: GIE = 1;
  1103  06D6  178B               	bsf	11,7	;volatile
  1104                           
  1105                           ;PGM_5.c: 239: _delay((unsigned long)((400)*(20000000/4000.0)));
  1106  06D7  300B               	movlw	11
  1107  06D8  0021               	movlb	1	; select bank1
  1108  06D9  00E6               	movwf	(??_main^(0+128)+1)
  1109  06DA  3026               	movlw	38
  1110  06DB  00E5               	movwf	??_main^(0+128)
  1111  06DC  305D               	movlw	93
  1112  06DD                     u6707:	
  1113  06DD  0B89               	decfsz	9,f
  1114  06DE  2EDD               	goto	u6707
  1115  06DF  0BE5               	decfsz	??_main^(0+128),f
  1116  06E0  2EDD               	goto	u6707
  1117  06E1  0BE6               	decfsz	(??_main^(0+128)+1),f
  1118  06E2  2EDD               	goto	u6707
  1119  06E3  3200               	nop2
  1120                           
  1121                           ;PGM_5.c: 241: LATA4 = 1;
  1122  06E4  0022               	movlb	2	; select bank2
  1123  06E5  160C               	bsf	12,4	;volatile
  1124                           
  1125                           ;PGM_5.c: 243: if(RD4){
  1126  06E6  0020               	movlb	0	; select bank0
  1127  06E7  1E0F               	btfss	15,4	;volatile
  1128  06E8  2F65               	goto	l381
  1129                           
  1130                           ;PGM_5.c: 244: _delay((unsigned long)((2500)*(20000000/4000.0)));
  1131  06E9  3040               	movlw	64
  1132  06EA  0021               	movlb	1	; select bank1
  1133  06EB  00E6               	movwf	(??_main^(0+128)+1)
  1134  06EC  306A               	movlw	106
  1135  06ED  00E5               	movwf	??_main^(0+128)
  1136  06EE  3097               	movlw	151
  1137  06EF                     u6717:	
  1138  06EF  0B89               	decfsz	9,f
  1139  06F0  2EEF               	goto	u6717
  1140  06F1  0BE5               	decfsz	??_main^(0+128),f
  1141  06F2  2EEF               	goto	u6717
  1142  06F3  0BE6               	decfsz	(??_main^(0+128)+1),f
  1143  06F4  2EEF               	goto	u6717
  1144  06F5  3200               	nop2
  1145  06F6                     l5612:	
  1146                           ;PGM_5.c: 245: while(!RD4){
  1147                           
  1148  06F6  0020               	movlb	0	; select bank0
  1149  06F7  1A0F               	btfsc	15,4	;volatile
  1150  06F8  2F65               	goto	l381
  1151                           
  1152                           ;PGM_5.c: 246: Werte_auf_LCD_anzeigen();
  1153  06F9  3188  2004  3186   	fcall	_Werte_auf_LCD_anzeigen
  1154                           
  1155                           ;PGM_5.c: 247: kit_abwerfen();
  1156  06FC  3194  24AF  3186   	fcall	_kit_abwerfen
  1157                           
  1158                           ;PGM_5.c: 248: _delay((unsigned long)((1000)*(20000000/4000.0)));
  1159  06FF  301A               	movlw	26
  1160  0700  0021               	movlb	1	; select bank1
  1161  0701  00E6               	movwf	(??_main^(0+128)+1)
  1162  0702  305E               	movlw	94
  1163  0703  00E5               	movwf	??_main^(0+128)
  1164  0704  306E               	movlw	110
  1165  0705                     u6727:	
  1166  0705  0B89               	decfsz	9,f
  1167  0706  2F05               	goto	u6727
  1168  0707  0BE5               	decfsz	??_main^(0+128),f
  1169  0708  2F05               	goto	u6727
  1170  0709  0BE6               	decfsz	(??_main^(0+128)+1),f
  1171  070A  2F05               	goto	u6727
  1172  070B  0000               	nop
  1173  070C  2EF6               	goto	l5612
  1174  070D                     l5624:	
  1175                           
  1176                           ;PGM_5.c: 273: Strecke_fahren(3,LATD = (LATD & 0b11110000)|0b00001010);
  1177  070D  0022               	movlb	2	; select bank2
  1178  070E  080F               	movf	15,w	;volatile
  1179  070F  39F0               	andlw	240
  1180  0710  380A               	iorlw	10
  1181  0711  008F               	movwf	15	;volatile
  1182  0712  0021               	movlb	1	; select bank1
  1183  0713  00E5               	movwf	??_main^(0+128)
  1184  0714  0865               	movf	??_main^(0+128),w
  1185  0715  00F7               	movwf	Strecke_fahren@Direction
  1186  0716  3003               	movlw	3
  1187  0717  3191  2179  3186   	fcall	_Strecke_fahren
  1188  071A                     l383:	
  1189                           ;PGM_5.c: 274: while (!Flag_Strecke_erreicht){
  1190                           
  1191  071A  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  1192  071B  2F1A               	goto	l383
  1193                           
  1194                           ;PGM_5.c: 275: }
  1195                           ;PGM_5.c: 276: LATD = (LATD & 0b11110000);
  1196  071C  0022               	movlb	2	; select bank2
  1197  071D  080F               	movf	15,w	;volatile
  1198  071E  39F0               	andlw	240
  1199  071F  008F               	movwf	15	;volatile
  1200                           
  1201                           ;PGM_5.c: 277: _delay((unsigned long)((50)*(20000000/4000.0)));
  1202  0720  3002               	movlw	2
  1203  0721  0021               	movlb	1	; select bank1
  1204  0722  00E6               	movwf	(??_main^(0+128)+1)
  1205  0723  3045               	movlw	69
  1206  0724  00E5               	movwf	??_main^(0+128)
  1207  0725  30A9               	movlw	169
  1208  0726                     u6737:	
  1209  0726  0B89               	decfsz	9,f
  1210  0727  2F26               	goto	u6737
  1211  0728  0BE5               	decfsz	??_main^(0+128),f
  1212  0729  2F26               	goto	u6737
  1213  072A  0BE6               	decfsz	(??_main^(0+128)+1),f
  1214  072B  2F26               	goto	u6737
  1215  072C  3200               	nop2
  1216                           
  1217                           ;PGM_5.c: 278: if (A_D_Wert [2] < wand ) {
  1218  072D  0879               	movf	_wand,w
  1219  072E  0021               	movlb	1	; select bank1
  1220  072F  0222               	subwf	(_A_D_Wert^(0+128)+2),w
  1221  0730  1803               	skipnc
  1222  0731  2F65               	goto	l381
  1223                           
  1224                           ;PGM_5.c: 279: VAR_im_Kreis_faren ++ ;
  1225  0732  3001               	movlw	1
  1226  0733  00E5               	movwf	??_main^(0+128)
  1227  0734  0865               	movf	??_main^(0+128),w
  1228  0735  07D4               	addwf	_VAR_im_Kreis_faren^(0+128),f
  1229                           
  1230                           ;PGM_5.c: 280: von_sensor_VR_bis_mitte();
  1231  0736  3187  27D0  3186   	fcall	_von_sensor_VR_bis_mitte
  1232                           
  1233                           ;PGM_5.c: 281: LATD = (LATD & 0b11110000);
  1234  0739  0022               	movlb	2	; select bank2
  1235  073A  080F               	movf	15,w	;volatile
  1236  073B  39F0               	andlw	240
  1237  073C  008F               	movwf	15	;volatile
  1238                           
  1239                           ;PGM_5.c: 282: ausrichten();
  1240  073D  3192  2220  3186   	fcall	_ausrichten
  1241                           
  1242                           ;PGM_5.c: 283: if (nicht_rechts == 0){
  1243  0740  1970               	btfsc	_nicht_rechts/(0+8),_nicht_rechts& (0+7)
  1244  0741  2F64               	goto	l5654
  1245                           
  1246                           ;PGM_5.c: 284: rechts90grad();
  1247  0742  3191  21E3  3186   	fcall	_rechts90grad
  1248  0745                     l388:	
  1249                           ;PGM_5.c: 285: while (!Flag_Strecke_erreicht){
  1250                           
  1251  0745  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  1252  0746  2F45               	goto	l388
  1253                           
  1254                           ;PGM_5.c: 287: }
  1255                           ;PGM_5.c: 288: LATD = (LATD & 0b11110000);
  1256  0747  0022               	movlb	2	; select bank2
  1257  0748  080F               	movf	15,w	;volatile
  1258  0749  39F0               	andlw	240
  1259  074A  008F               	movwf	15	;volatile
  1260                           
  1261                           ;PGM_5.c: 289: if ((A_D_Wert [0] < wand)&&(A_D_Wert [3] < wand)){
  1262  074B  0879               	movf	_wand,w
  1263  074C  0021               	movlb	1	; select bank1
  1264  074D  0220               	subwf	_A_D_Wert^(0+128),w
  1265  074E  1803               	skipnc
  1266  074F  2F5E               	goto	l5652
  1267  0750  0879               	movf	_wand,w
  1268  0751  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  1269  0752  1803               	skipnc
  1270  0753  2F5E               	goto	l5652
  1271                           
  1272                           ;PGM_5.c: 290: ausrichten();
  1273  0754  3192  2220  3186   	fcall	_ausrichten
  1274                           
  1275                           ;PGM_5.c: 291: im_Kreis_faren();
  1276  0757  3192  22BE  3186   	fcall	_im_Kreis_faren
  1277                           
  1278                           ;PGM_5.c: 292: von_mitte_bis_wieder_wand();
  1279  075A  3193  23E1  3186   	fcall	_von_mitte_bis_wieder_wand
  1280                           
  1281                           ;PGM_5.c: 293: }
  1282  075D  2F64               	goto	l5654
  1283  075E                     l5652:	
  1284                           
  1285                           ;PGM_5.c: 294: else{
  1286                           ;PGM_5.c: 295: links90grad();
  1287  075E  3191  21A6  3186   	fcall	_links90grad
  1288                           
  1289                           ;PGM_5.c: 296: ausrichten();
  1290  0761  3192  2220  3186   	fcall	_ausrichten
  1291  0764                     l5654:	
  1292                           
  1293                           ;PGM_5.c: 297: }
  1294                           ;PGM_5.c: 298: }
  1295                           ;PGM_5.c: 299: nicht_rechts = 0 ;
  1296  0764  1170               	bcf	_nicht_rechts/(0+8),_nicht_rechts& (0+7)
  1297  0765                     l381:	
  1298                           ;PGM_5.c: 249: }
  1299                           ;PGM_5.c: 250: }
  1300                           ;PGM_5.c: 264: while (1) {
  1301                           
  1302                           ;PGM_5.c: 300: }
  1303                           ;PGM_5.c: 301: }
  1304                           
  1305                           
  1306                           ;PGM_5.c: 265: Flag_LED = 0;
  1307  0765  1271               	bcf	_Flag_LED/(0+8),_Flag_LED& (0+7)
  1308                           
  1309                           ;PGM_5.c: 266: schwarzeplatte();
  1310  0766  3185  2555  3186   	fcall	_schwarzeplatte
  1311                           
  1312                           ;PGM_5.c: 267: anderwandlang() ;
  1313  0769  3188  2049  3186   	fcall	_anderwandlang
  1314                           
  1315                           ;PGM_5.c: 268: Werte_auf_LCD_anzeigen();
  1316  076C  3188  2004  3186   	fcall	_Werte_auf_LCD_anzeigen
  1317                           
  1318                           ;PGM_5.c: 269: opfer();
  1319  076F  3195  2599  3186   	fcall	_opfer
  1320                           
  1321                           ;PGM_5.c: 270: hindernis();
  1322  0772  3196  26A7  3186   	fcall	_hindernis
  1323                           
  1324                           ;PGM_5.c: 272: if (A_D_Wert [2] < wand ) {
  1325  0775  0879               	movf	_wand,w
  1326  0776  0021               	movlb	1	; select bank1
  1327  0777  0222               	subwf	(_A_D_Wert^(0+128)+2),w
  1328  0778  1C03               	btfss	3,0
  1329  0779  2F0D               	goto	l5624
  1330                           
  1331                           ;PGM_5.c: 302: else{
  1332                           ;PGM_5.c: 303: if((A_D_Wert [0] > wand)&&(A_D_Wert [3] > wand)){
  1333  077A  0021               	movlb	1	; select bank1
  1334  077B  0820               	movf	_A_D_Wert^(0+128),w
  1335  077C  0279               	subwf	_wand,w
  1336  077D  1803               	skipnc
  1337  077E  2F65               	goto	l381
  1338  077F  0823               	movf	(_A_D_Wert^(0+128)+3),w
  1339  0780  0279               	subwf	_wand,w
  1340  0781  1803               	skipnc
  1341  0782  2F65               	goto	l381
  1342                           
  1343                           ;PGM_5.c: 304: LATD = (LATD & 0b11110000);
  1344  0783  0022               	movlb	2	; select bank2
  1345  0784  080F               	movf	15,w	;volatile
  1346  0785  39F0               	andlw	240
  1347  0786  008F               	movwf	15	;volatile
  1348                           
  1349                           ;PGM_5.c: 305: _delay((unsigned long)((50)*(20000000/4000.0)));
  1350  0787  3002               	movlw	2
  1351  0788  0021               	movlb	1	; select bank1
  1352  0789  00E6               	movwf	(??_main^(0+128)+1)
  1353  078A  3045               	movlw	69
  1354  078B  00E5               	movwf	??_main^(0+128)
  1355  078C  30A9               	movlw	169
  1356  078D                     u6747:	
  1357  078D  0B89               	decfsz	9,f
  1358  078E  2F8D               	goto	u6747
  1359  078F  0BE5               	decfsz	??_main^(0+128),f
  1360  0790  2F8D               	goto	u6747
  1361  0791  0BE6               	decfsz	(??_main^(0+128)+1),f
  1362  0792  2F8D               	goto	u6747
  1363  0793  3200               	nop2
  1364                           
  1365                           ;PGM_5.c: 306: if((A_D_Wert [0] > wand)&&(A_D_Wert [3] > wand)){
  1366  0794  0021               	movlb	1	; select bank1
  1367  0795  0820               	movf	_A_D_Wert^(0+128),w
  1368  0796  0279               	subwf	_wand,w
  1369  0797  1803               	skipnc
  1370  0798  2F65               	goto	l381
  1371  0799  0823               	movf	(_A_D_Wert^(0+128)+3),w
  1372  079A  0279               	subwf	_wand,w
  1373  079B  1803               	skipnc
  1374  079C  2F65               	goto	l381
  1375                           
  1376                           ;PGM_5.c: 307: if (A_D_Wert [1] > wand){
  1377  079D  0821               	movf	(_A_D_Wert^(0+128)+1),w
  1378  079E  0279               	subwf	_wand,w
  1379  079F  1803               	skipnc
  1380  07A0  2FBE               	goto	l5684
  1381                           
  1382                           ;PGM_5.c: 308: ausrichten();
  1383  07A1  3192  2220  3186   	fcall	_ausrichten
  1384                           
  1385                           ;PGM_5.c: 309: LATD = (LATD & 0b11110000);
  1386  07A4  0022               	movlb	2	; select bank2
  1387  07A5  080F               	movf	15,w	;volatile
  1388  07A6  39F0               	andlw	240
  1389  07A7  008F               	movwf	15	;volatile
  1390                           
  1391                           ;PGM_5.c: 310: links90grad();
  1392  07A8  3191  21A6  3186   	fcall	_links90grad
  1393  07AB                     l397:	
  1394                           ;PGM_5.c: 311: while (!Flag_Strecke_erreicht);
  1395                           
  1396  07AB  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  1397  07AC  2FAB               	goto	l397
  1398                           
  1399                           ;PGM_5.c: 312: LATD = (LATD & 0b11110000);
  1400  07AD  0022               	movlb	2	; select bank2
  1401  07AE  080F               	movf	15,w	;volatile
  1402  07AF  39F0               	andlw	240
  1403  07B0  008F               	movwf	15	;volatile
  1404                           
  1405                           ;PGM_5.c: 313: links90grad();
  1406  07B1  3191  21A6  3186   	fcall	_links90grad
  1407  07B4                     l400:	
  1408                           ;PGM_5.c: 314: while (!Flag_Strecke_erreicht);
  1409                           
  1410  07B4  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  1411  07B5  2FB4               	goto	l400
  1412                           
  1413                           ;PGM_5.c: 315: LATD = (LATD & 0b11110000);
  1414  07B6  0022               	movlb	2	; select bank2
  1415  07B7  080F               	movf	15,w	;volatile
  1416  07B8  39F0               	andlw	240
  1417  07B9  008F               	movwf	15	;volatile
  1418                           
  1419                           ;PGM_5.c: 316: ausrichten();
  1420  07BA  3192  2220  3186   	fcall	_ausrichten
  1421                           
  1422                           ;PGM_5.c: 317: }
  1423  07BD  2F65               	goto	l381
  1424  07BE                     l5684:	
  1425                           
  1426                           ;PGM_5.c: 318: else{
  1427                           ;PGM_5.c: 319: VAR_im_Kreis_faren = 0 ;
  1428  07BE  0021               	movlb	1	; select bank1
  1429  07BF  01D4               	clrf	_VAR_im_Kreis_faren^(0+128)
  1430                           
  1431                           ;PGM_5.c: 320: ausrichten();
  1432  07C0  3192  2220  3186   	fcall	_ausrichten
  1433                           
  1434                           ;PGM_5.c: 321: links90grad();
  1435  07C3  3191  21A6  3186   	fcall	_links90grad
  1436  07C6                     l404:	
  1437                           ;PGM_5.c: 322: while (!Flag_Strecke_erreicht){
  1438                           
  1439  07C6  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  1440  07C7  2FC6               	goto	l404
  1441                           
  1442                           ;PGM_5.c: 324: }
  1443                           ;PGM_5.c: 325: LATD = (LATD & 0b11110000);
  1444  07C8  0022               	movlb	2	; select bank2
  1445  07C9  080F               	movf	15,w	;volatile
  1446  07CA  39F0               	andlw	240
  1447  07CB  008F               	movwf	15	;volatile
  1448                           
  1449                           ;PGM_5.c: 326: ausrichten();
  1450  07CC  3192  2220  3186   	fcall	_ausrichten
  1451  07CF  2F65               	goto	l381
  1452  07D0                     __end_of_main:	
  1453                           
  1454                           	psect	text1
  1455  07D0                     __ptext1:	
  1456 ;; *************** function _von_sensor_VR_bis_mitte *****************
  1457 ;; Defined at:
  1458 ;;		line 339 in file "PGM_5.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;		None
  1461 ;; Auto vars:     Size  Location     Type
  1462 ;;		None
  1463 ;; Return value:  Size  Location     Type
  1464 ;;                  1    wreg      void 
  1465 ;; Registers used:
  1466 ;;		wreg, status,2, status,0, pclath, cstack
  1467 ;; Tracked objects:
  1468 ;;		On entry : 0/0
  1469 ;;		On exit  : 0/0
  1470 ;;		Unchanged: 0/0
  1471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1475 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1476 ;;Total ram usage:        1 bytes
  1477 ;; Hardware stack levels used:    1
  1478 ;; Hardware stack levels required when called:    9
  1479 ;; This function calls:
  1480 ;;		_Strecke_fahren
  1481 ;;		_hindernis
  1482 ;;		_opfer
  1483 ;;		_schwarzeplatte
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           
  1490                           ;psect for function _von_sensor_VR_bis_mitte
  1491  07D0                     _von_sensor_VR_bis_mitte:	
  1492                           
  1493                           ;PGM_5.c: 340: LATD = (LATD & 0b11110000);
  1494                           
  1495                           ;incstack = 0
  1496                           ; Regs used in _von_sensor_VR_bis_mitte: [wreg+status,2+status,0+pclath+cstack]
  1497  07D0  0022               	movlb	2	; select bank2
  1498  07D1  080F               	movf	15,w	;volatile
  1499  07D2  39F0               	andlw	240
  1500  07D3  008F               	movwf	15	;volatile
  1501                           
  1502                           ;PGM_5.c: 341: Strecke_fahren(77, LATD = (LATD & 0b11110000)|0b00001010);
  1503  07D4  080F               	movf	15,w	;volatile
  1504  07D5  39F0               	andlw	240
  1505  07D6  380A               	iorlw	10
  1506  07D7  008F               	movwf	15	;volatile
  1507  07D8  0020               	movlb	0	; select bank0
  1508  07D9  00D3               	movwf	??_von_sensor_VR_bis_mitte
  1509  07DA  0853               	movf	??_von_sensor_VR_bis_mitte,w
  1510  07DB  00F7               	movwf	Strecke_fahren@Direction
  1511  07DC  304D               	movlw	77
  1512  07DD  3191  2179  3187   	fcall	_Strecke_fahren
  1513  07E0                     l5470:	
  1514                           ;PGM_5.c: 342: while (!Flag_Strecke_erreicht){
  1515                           
  1516  07E0  18F0               	btfsc	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  1517  07E1  2FEC               	goto	l5472
  1518                           
  1519                           ;PGM_5.c: 343: schwarzeplatte();
  1520  07E2  3185  2555  3187   	fcall	_schwarzeplatte
  1521                           
  1522                           ;PGM_5.c: 344: opfer();
  1523  07E5  3195  2599  3187   	fcall	_opfer
  1524                           
  1525                           ;PGM_5.c: 345: hindernis();
  1526  07E8  3196  26A7  3187   	fcall	_hindernis
  1527  07EB  2FE0               	goto	l5470
  1528  07EC                     l5472:	
  1529                           
  1530                           ;PGM_5.c: 346: }
  1531                           ;PGM_5.c: 347: LATD = (LATD & 0b11110000);
  1532  07EC  0022               	movlb	2	; select bank2
  1533  07ED  080F               	movf	15,w	;volatile
  1534  07EE  39F0               	andlw	240
  1535  07EF  008F               	movwf	15	;volatile
  1536  07F0  0008               	return
  1537  07F1                     __end_of_von_sensor_VR_bis_mitte:	
  1538                           
  1539                           	psect	text2
  1540  13E1                     __ptext2:	
  1541 ;; *************** function _von_mitte_bis_wieder_wand *****************
  1542 ;; Defined at:
  1543 ;;		line 349 in file "PGM_5.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg, status,2, status,0, pclath, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1559 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1560 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1561 ;;Total ram usage:        2 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    9
  1564 ;; This function calls:
  1565 ;;		_hindernis
  1566 ;;		_opfer
  1567 ;;		_schwarzeplatte
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           
  1574                           ;psect for function _von_mitte_bis_wieder_wand
  1575  13E1                     _von_mitte_bis_wieder_wand:	
  1576                           
  1577                           ;PGM_5.c: 350: VAR_von_mitte_bis_wieder_wand = 1;
  1578                           
  1579                           ;incstack = 0
  1580                           ; Regs used in _von_mitte_bis_wieder_wand: [wreg+status,2+status,0+pclath+cstack]
  1581  13E1  1571               	bsf	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  1582                           
  1583                           ;PGM_5.c: 351: Encoder = 0 ;
  1584  13E2  0020               	movlb	0	; select bank0
  1585  13E3  01D6               	clrf	_Encoder
  1586  13E4                     l5558:	
  1587                           ;PGM_5.c: 352: while ( VAR_von_mitte_bis_wieder_wand == 1){
  1588                           
  1589  13E4  1D71               	btfss	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  1590  13E5  2C41               	goto	l5560
  1591                           
  1592                           ;PGM_5.c: 353: LATD = (LATD & 0b11110000)|0b00001010;
  1593  13E6  0022               	movlb	2	; select bank2
  1594  13E7  080F               	movf	15,w	;volatile
  1595  13E8  39F0               	andlw	240
  1596  13E9  380A               	iorlw	10
  1597  13EA  008F               	movwf	15	;volatile
  1598                           
  1599                           ;PGM_5.c: 354: if (A_D_Wert [2] > wand){
  1600  13EB  0021               	movlb	1	; select bank1
  1601  13EC  0822               	movf	(_A_D_Wert^(0+128)+2),w
  1602  13ED  0279               	subwf	_wand,w
  1603  13EE  1803               	skipnc
  1604  13EF  2BFE               	goto	l5530
  1605                           
  1606                           ;PGM_5.c: 355: LATD = (LATD & 0b11110000);
  1607  13F0  0022               	movlb	2	; select bank2
  1608  13F1  080F               	movf	15,w	;volatile
  1609  13F2  39F0               	andlw	240
  1610  13F3  008F               	movwf	15	;volatile
  1611                           
  1612                           ;PGM_5.c: 356: if (A_D_Wert [2] > wand){
  1613  13F4  0021               	movlb	1	; select bank1
  1614  13F5  0822               	movf	(_A_D_Wert^(0+128)+2),w
  1615  13F6  0279               	subwf	_wand,w
  1616  13F7  1803               	skipnc
  1617  13F8  2BFE               	goto	l5530
  1618                           
  1619                           ;PGM_5.c: 357: VAR_von_mitte_bis_wieder_wand = 0 ;
  1620  13F9  1171               	bcf	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  1621                           
  1622                           ;PGM_5.c: 358: LATD = (LATD & 0b11110000) ;
  1623  13FA  0022               	movlb	2	; select bank2
  1624  13FB  080F               	movf	15,w	;volatile
  1625  13FC  39F0               	andlw	240
  1626  13FD  008F               	movwf	15	;volatile
  1627  13FE                     l5530:	
  1628                           
  1629                           ;PGM_5.c: 359: }
  1630                           ;PGM_5.c: 360: }
  1631                           ;PGM_5.c: 361: if (A_D_Wert [3] > 80){
  1632  13FE  3051               	movlw	81
  1633  13FF  0021               	movlb	1	; select bank1
  1634  1400  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  1635  1401  1C03               	skipc
  1636  1402  2C2B               	goto	l5544
  1637                           
  1638                           ;PGM_5.c: 362: LATD = (LATD & 0b11110000);
  1639  1403  0022               	movlb	2	; select bank2
  1640  1404  080F               	movf	15,w	;volatile
  1641  1405  39F0               	andlw	240
  1642  1406  008F               	movwf	15	;volatile
  1643                           
  1644                           ;PGM_5.c: 363: _delay((unsigned long)((50)*(20000000/4000.0)));
  1645  1407  3002               	movlw	2
  1646  1408  0021               	movlb	1	; select bank1
  1647  1409  00E4               	movwf	(??_von_mitte_bis_wieder_wand^(0+128)+1)
  1648  140A  3045               	movlw	69
  1649  140B  00E3               	movwf	??_von_mitte_bis_wieder_wand^(0+128)
  1650  140C  30A9               	movlw	169
  1651  140D                     u6757:	
  1652  140D  0B89               	decfsz	9,f
  1653  140E  2C0D               	goto	u6757
  1654  140F  0BE3               	decfsz	??_von_mitte_bis_wieder_wand^(0+128),f
  1655  1410  2C0D               	goto	u6757
  1656  1411  0BE4               	decfsz	(??_von_mitte_bis_wieder_wand^(0+128)+1),f
  1657  1412  2C0D               	goto	u6757
  1658  1413  3200               	nop2
  1659                           
  1660                           ;PGM_5.c: 364: if (A_D_Wert [3] > 80){
  1661  1414  3051               	movlw	81
  1662  1415  0021               	movlb	1	; select bank1
  1663  1416  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  1664  1417  1C03               	skipc
  1665  1418  2C2B               	goto	l5544
  1666                           
  1667                           ;PGM_5.c: 365: VAR_von_mitte_bis_wieder_wand = 0 ;
  1668  1419  1171               	bcf	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  1669                           
  1670                           ;PGM_5.c: 366: LATD = (LATD & 0b11110000) ;
  1671  141A  0022               	movlb	2	; select bank2
  1672  141B  080F               	movf	15,w	;volatile
  1673  141C  39F0               	andlw	240
  1674  141D  008F               	movwf	15	;volatile
  1675                           
  1676                           ;PGM_5.c: 367: _delay((unsigned long)((500)*(20000000/4000.0)));
  1677  141E  300D               	movlw	13
  1678  141F  0021               	movlb	1	; select bank1
  1679  1420  00E4               	movwf	(??_von_mitte_bis_wieder_wand^(0+128)+1)
  1680  1421  30AF               	movlw	175
  1681  1422  00E3               	movwf	??_von_mitte_bis_wieder_wand^(0+128)
  1682  1423  30B6               	movlw	182
  1683  1424                     u6767:	
  1684  1424  0B89               	decfsz	9,f
  1685  1425  2C24               	goto	u6767
  1686  1426  0BE3               	decfsz	??_von_mitte_bis_wieder_wand^(0+128),f
  1687  1427  2C24               	goto	u6767
  1688  1428  0BE4               	decfsz	(??_von_mitte_bis_wieder_wand^(0+128)+1),f
  1689  1429  2C24               	goto	u6767
  1690  142A  0000               	nop
  1691  142B                     l5544:	
  1692                           
  1693                           ;PGM_5.c: 368: }
  1694                           ;PGM_5.c: 369: }
  1695                           ;PGM_5.c: 371: if (Encoder > 40 ){
  1696  142B  3029               	movlw	41
  1697  142C  0020               	movlb	0	; select bank0
  1698  142D  0256               	subwf	_Encoder,w
  1699  142E  1C03               	skipc
  1700  142F  2C37               	goto	l5552
  1701                           
  1702                           ;PGM_5.c: 372: VAR_von_mitte_bis_wieder_wand = 0 ;
  1703  1430  1171               	bcf	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  1704                           
  1705                           ;PGM_5.c: 373: VAR_bis_wand_zeit = 0;
  1706  1431  0021               	movlb	1	; select bank1
  1707  1432  01D6               	clrf	_VAR_bis_wand_zeit^(0+128)
  1708                           
  1709                           ;PGM_5.c: 374: LATD = (LATD & 0b11110000) ;
  1710  1433  0022               	movlb	2	; select bank2
  1711  1434  080F               	movf	15,w	;volatile
  1712  1435  39F0               	andlw	240
  1713  1436  008F               	movwf	15	;volatile
  1714  1437                     l5552:	
  1715                           
  1716                           ;PGM_5.c: 375: }
  1717                           ;PGM_5.c: 377: schwarzeplatte();
  1718  1437  3185  2555  3193   	fcall	_schwarzeplatte
  1719                           
  1720                           ;PGM_5.c: 378: opfer();
  1721  143A  3195  2599  3193   	fcall	_opfer
  1722                           
  1723                           ;PGM_5.c: 379: hindernis();
  1724  143D  3196  26A7  3193   	fcall	_hindernis
  1725  1440  2BE4               	goto	l5558
  1726  1441                     l5560:	
  1727                           
  1728                           ;PGM_5.c: 380: }
  1729                           ;PGM_5.c: 381: LATD = (LATD & 0b11110000) ;
  1730  1441  0022               	movlb	2	; select bank2
  1731  1442  080F               	movf	15,w	;volatile
  1732  1443  39F0               	andlw	240
  1733  1444  008F               	movwf	15	;volatile
  1734  1445  0008               	return
  1735  1446                     __end_of_von_mitte_bis_wieder_wand:	
  1736                           
  1737                           	psect	text3
  1738  0555                     __ptext3:	
  1739 ;; *************** function _schwarzeplatte *****************
  1740 ;; Defined at:
  1741 ;;		line 724 in file "PGM_5.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      void 
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0, pclath, cstack
  1750 ;; Tracked objects:
  1751 ;;		On entry : 0/0
  1752 ;;		On exit  : 0/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1757 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1758 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1759 ;;Total ram usage:        2 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    8
  1762 ;; This function calls:
  1763 ;;		_Strecke_fahren
  1764 ;;		_ausrichten
  1765 ;;		_links90grad
  1766 ;;		_opfer
  1767 ;;		_von_mitte_bis_wieder_wand_in_schwarzeplatte
  1768 ;; This function is called by:
  1769 ;;		_main
  1770 ;;		_von_sensor_VR_bis_mitte
  1771 ;;		_von_mitte_bis_wieder_wand
  1772 ;;		_cm_fahren
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           
  1777                           ;psect for function _schwarzeplatte
  1778  0555                     _schwarzeplatte:	
  1779                           
  1780                           ;PGM_5.c: 725: if ((A_D_Wert [9] > schwarz )||(A_D_Wert [8] > schwarz )){
  1781                           
  1782                           ;incstack = 0
  1783                           ; Regs used in _schwarzeplatte: [wreg+status,2+status,0+pclath+cstack]
  1784  0555  0021               	movlb	1	; select bank1
  1785  0556  0829               	movf	(_A_D_Wert^(0+128)+9),w
  1786  0557  0020               	movlb	0	; select bank0
  1787  0558  0262               	subwf	_schwarz,w
  1788  0559  1C03               	skipc
  1789  055A  2D61               	goto	l5314
  1790  055B  0021               	movlb	1	; select bank1
  1791  055C  0828               	movf	(_A_D_Wert^(0+128)+8),w
  1792  055D  0020               	movlb	0	; select bank0
  1793  055E  0262               	subwf	_schwarz,w
  1794  055F  1803               	skipnc
  1795  0560  0008               	return
  1796  0561                     l5314:	
  1797                           
  1798                           ;PGM_5.c: 726: LATD = (LATD & 0b11110000);
  1799  0561  0022               	movlb	2	; select bank2
  1800  0562  080F               	movf	15,w	;volatile
  1801  0563  39F0               	andlw	240
  1802  0564  008F               	movwf	15	;volatile
  1803                           
  1804                           ;PGM_5.c: 727: Strecke_fahren (30,LATD = (LATD & 0b11110000)|0b00001010);
  1805  0565  080F               	movf	15,w	;volatile
  1806  0566  39F0               	andlw	240
  1807  0567  380A               	iorlw	10
  1808  0568  008F               	movwf	15	;volatile
  1809  0569  0021               	movlb	1	; select bank1
  1810  056A  00E1               	movwf	??_schwarzeplatte^(0+128)
  1811  056B  0861               	movf	??_schwarzeplatte^(0+128),w
  1812  056C  00F7               	movwf	Strecke_fahren@Direction
  1813  056D  301E               	movlw	30
  1814  056E  3191  2179  3185   	fcall	_Strecke_fahren
  1815  0571                     l556:	
  1816                           ;PGM_5.c: 728: while(!Flag_Strecke_erreicht);
  1817                           
  1818  0571  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  1819  0572  2D71               	goto	l556
  1820                           
  1821                           ;PGM_5.c: 729: LATD = (LATD & 0b11110000);
  1822  0573  0022               	movlb	2	; select bank2
  1823  0574  080F               	movf	15,w	;volatile
  1824  0575  39F0               	andlw	240
  1825  0576  008F               	movwf	15	;volatile
  1826                           
  1827                           ;PGM_5.c: 730: if ((A_D_Wert [9] > schwarz )&&(A_D_Wert [8] > schwarz )){
  1828  0577  0021               	movlb	1	; select bank1
  1829  0578  0829               	movf	(_A_D_Wert^(0+128)+9),w
  1830  0579  0020               	movlb	0	; select bank0
  1831  057A  0262               	subwf	_schwarz,w
  1832  057B  1803               	skipnc
  1833  057C  2E95               	goto	l5410
  1834  057D  0021               	movlb	1	; select bank1
  1835  057E  0828               	movf	(_A_D_Wert^(0+128)+8),w
  1836  057F  0020               	movlb	0	; select bank0
  1837  0580  0262               	subwf	_schwarz,w
  1838  0581  1803               	skipnc
  1839  0582  2E95               	goto	l5410
  1840                           
  1841                           ;PGM_5.c: 731: LATD = (LATD & 0b11110000);
  1842  0583  0022               	movlb	2	; select bank2
  1843  0584  080F               	movf	15,w	;volatile
  1844  0585  39F0               	andlw	240
  1845  0586  008F               	movwf	15	;volatile
  1846                           
  1847                           ;PGM_5.c: 732: VAR_Schwarz_ausrichten=1;
  1848  0587  0021               	movlb	1	; select bank1
  1849  0588  01D7               	clrf	_VAR_Schwarz_ausrichten^(0+128)
  1850  0589  0AD7               	incf	_VAR_Schwarz_ausrichten^(0+128),f
  1851                           
  1852                           ;PGM_5.c: 733: Encoder=0;
  1853  058A  0020               	movlb	0	; select bank0
  1854  058B  01D6               	clrf	_Encoder
  1855                           
  1856                           ;PGM_5.c: 734: while ((A_D_Wert [9] > schwarz )&&(A_D_Wert [8] > schwarz )){
  1857  058C  2E0A               	goto	l5362
  1858  058D                     l5330:	
  1859                           ;PGM_5.c: 735: while ((A_D_Wert [9] > schwarz )&&(A_D_Wert [8] > schwarz )){
  1860                           
  1861                           
  1862                           ;PGM_5.c: 736: LATD = (LATD & 0b11110000)|0b00000101;
  1863  058D  0022               	movlb	2	; select bank2
  1864  058E  080F               	movf	15,w	;volatile
  1865  058F  39F0               	andlw	240
  1866  0590  3805               	iorlw	5
  1867  0591  008F               	movwf	15	;volatile
  1868                           
  1869                           ;PGM_5.c: 737: _delay((unsigned long)((20)*(20000000/4000.0)));
  1870  0592  3082               	movlw	130
  1871  0593  0021               	movlb	1	; select bank1
  1872  0594  00E1               	movwf	??_schwarzeplatte^(0+128)
  1873  0595  30DD               	movlw	221
  1874  0596                     u6777:	
  1875  0596  0B89               	decfsz	9,f
  1876  0597  2D96               	goto	u6777
  1877  0598  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  1878  0599  2D96               	goto	u6777
  1879  059A  3200               	nop2
  1880                           
  1881                           ;PGM_5.c: 738: LATD = (LATD & 0b11110000);
  1882  059B  0022               	movlb	2	; select bank2
  1883  059C  080F               	movf	15,w	;volatile
  1884  059D  39F0               	andlw	240
  1885  059E  008F               	movwf	15	;volatile
  1886                           
  1887                           ;PGM_5.c: 739: _delay((unsigned long)((12)*(20000000/4000.0)));
  1888  059F  304E               	movlw	78
  1889  05A0  0021               	movlb	1	; select bank1
  1890  05A1  00E1               	movwf	??_schwarzeplatte^(0+128)
  1891  05A2  30EB               	movlw	235
  1892  05A3                     u6787:	
  1893  05A3  0B89               	decfsz	9,f
  1894  05A4  2DA3               	goto	u6787
  1895  05A5  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  1896  05A6  2DA3               	goto	u6787
  1897  05A7                     l562:	
  1898  05A7  0021               	movlb	1	; select bank1
  1899  05A8  0829               	movf	(_A_D_Wert^(0+128)+9),w
  1900  05A9  0020               	movlb	0	; select bank0
  1901  05AA  0262               	subwf	_schwarz,w
  1902  05AB  1803               	skipnc
  1903  05AC  2DD3               	goto	l5346
  1904  05AD  0021               	movlb	1	; select bank1
  1905  05AE  0828               	movf	(_A_D_Wert^(0+128)+8),w
  1906  05AF  0020               	movlb	0	; select bank0
  1907  05B0  0262               	subwf	_schwarz,w
  1908  05B1  1803               	btfsc	3,0
  1909  05B2  2DD3               	goto	l5346
  1910  05B3  2D8D               	goto	l5330
  1911  05B4                     l5338:	
  1912                           ;PGM_5.c: 740: }
  1913                           ;PGM_5.c: 741: while ((A_D_Wert [9] > schwarz )&&(A_D_Wert [8] < schwarz )){
  1914                           
  1915                           
  1916                           ;PGM_5.c: 742: LATD = (LATD & 0b11110000)|0b00000100;
  1917  05B4  0022               	movlb	2	; select bank2
  1918  05B5  080F               	movf	15,w	;volatile
  1919  05B6  39F0               	andlw	240
  1920  05B7  3804               	iorlw	4
  1921  05B8  008F               	movwf	15	;volatile
  1922                           
  1923                           ;PGM_5.c: 743: _delay((unsigned long)((20)*(20000000/4000.0)));
  1924  05B9  3082               	movlw	130
  1925  05BA  0021               	movlb	1	; select bank1
  1926  05BB  00E1               	movwf	??_schwarzeplatte^(0+128)
  1927  05BC  30DD               	movlw	221
  1928  05BD                     u6797:	
  1929  05BD  0B89               	decfsz	9,f
  1930  05BE  2DBD               	goto	u6797
  1931  05BF  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  1932  05C0  2DBD               	goto	u6797
  1933  05C1  3200               	nop2
  1934                           
  1935                           ;PGM_5.c: 744: LATD = (LATD & 0b11110000)|0b00000010;
  1936  05C2  0022               	movlb	2	; select bank2
  1937  05C3  080F               	movf	15,w	;volatile
  1938  05C4  39F0               	andlw	240
  1939  05C5  3802               	iorlw	2
  1940  05C6  008F               	movwf	15	;volatile
  1941                           
  1942                           ;PGM_5.c: 745: _delay((unsigned long)((12)*(20000000/4000.0)));
  1943  05C7  304E               	movlw	78
  1944  05C8  0021               	movlb	1	; select bank1
  1945  05C9  00E1               	movwf	??_schwarzeplatte^(0+128)
  1946  05CA  30EB               	movlw	235
  1947  05CB                     u6807:	
  1948  05CB  0B89               	decfsz	9,f
  1949  05CC  2DCB               	goto	u6807
  1950  05CD  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  1951  05CE  2DCB               	goto	u6807
  1952                           
  1953                           ;PGM_5.c: 746: LATD = (LATD & 0b11110000);
  1954  05CF  0022               	movlb	2	; select bank2
  1955  05D0  080F               	movf	15,w	;volatile
  1956  05D1  39F0               	andlw	240
  1957  05D2  008F               	movwf	15	;volatile
  1958  05D3                     l5346:	
  1959  05D3  0021               	movlb	1	; select bank1
  1960  05D4  0829               	movf	(_A_D_Wert^(0+128)+9),w
  1961  05D5  0020               	movlb	0	; select bank0
  1962  05D6  0262               	subwf	_schwarz,w
  1963  05D7  1803               	skipnc
  1964  05D8  2DFF               	goto	l5358
  1965  05D9  0862               	movf	_schwarz,w
  1966  05DA  0021               	movlb	1	; select bank1
  1967  05DB  0228               	subwf	(_A_D_Wert^(0+128)+8),w
  1968  05DC  1803               	btfsc	3,0
  1969  05DD  2DFF               	goto	l5358
  1970  05DE  2DB4               	goto	l5338
  1971  05DF                     l5350:	
  1972                           ;PGM_5.c: 747: }
  1973                           ;PGM_5.c: 748: while ((A_D_Wert [9] < schwarz )&&(A_D_Wert [8] > schwarz )){
  1974                           
  1975                           
  1976                           ;PGM_5.c: 749: LATD = (LATD & 0b11110000)|0b00000001;
  1977  05DF  0022               	movlb	2	; select bank2
  1978  05E0  080F               	movf	15,w	;volatile
  1979  05E1  39F0               	andlw	240
  1980  05E2  3801               	iorlw	1
  1981  05E3  008F               	movwf	15	;volatile
  1982                           
  1983                           ;PGM_5.c: 750: _delay((unsigned long)((15)*(20000000/4000.0)));
  1984  05E4  3062               	movlw	98
  1985  05E5  0021               	movlb	1	; select bank1
  1986  05E6  00E1               	movwf	??_schwarzeplatte^(0+128)
  1987  05E7  3065               	movlw	101
  1988  05E8                     u6817:	
  1989  05E8  0B89               	decfsz	9,f
  1990  05E9  2DE8               	goto	u6817
  1991  05EA  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  1992  05EB  2DE8               	goto	u6817
  1993  05EC  3200               	nop2
  1994                           
  1995                           ;PGM_5.c: 751: LATD = (LATD & 0b11110000)|0b00001000;
  1996  05ED  0022               	movlb	2	; select bank2
  1997  05EE  080F               	movf	15,w	;volatile
  1998  05EF  39F0               	andlw	240
  1999  05F0  3808               	iorlw	8
  2000  05F1  008F               	movwf	15	;volatile
  2001                           
  2002                           ;PGM_5.c: 752: _delay((unsigned long)((5)*(20000000/4000.0)));
  2003  05F2  3021               	movlw	33
  2004  05F3  0021               	movlb	1	; select bank1
  2005  05F4  00E1               	movwf	??_schwarzeplatte^(0+128)
  2006  05F5  3076               	movlw	118
  2007  05F6                     u6827:	
  2008  05F6  0B89               	decfsz	9,f
  2009  05F7  2DF6               	goto	u6827
  2010  05F8  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  2011  05F9  2DF6               	goto	u6827
  2012  05FA  0000               	nop
  2013                           
  2014                           ;PGM_5.c: 753: LATD = (LATD & 0b11110000);
  2015  05FB  0022               	movlb	2	; select bank2
  2016  05FC  080F               	movf	15,w	;volatile
  2017  05FD  39F0               	andlw	240
  2018  05FE  008F               	movwf	15	;volatile
  2019  05FF                     l5358:	
  2020  05FF  0020               	movlb	0	; select bank0
  2021  0600  0862               	movf	_schwarz,w
  2022  0601  0021               	movlb	1	; select bank1
  2023  0602  0229               	subwf	(_A_D_Wert^(0+128)+9),w
  2024  0603  1803               	skipnc
  2025  0604  2E0A               	goto	l5362
  2026  0605  0828               	movf	(_A_D_Wert^(0+128)+8),w
  2027  0606  0020               	movlb	0	; select bank0
  2028  0607  0262               	subwf	_schwarz,w
  2029  0608  1C03               	skipc
  2030  0609  2DDF               	goto	l5350
  2031  060A                     l5362:	
  2032  060A  0021               	movlb	1	; select bank1
  2033  060B  0829               	movf	(_A_D_Wert^(0+128)+9),w
  2034  060C  0020               	movlb	0	; select bank0
  2035  060D  0262               	subwf	_schwarz,w
  2036  060E  1803               	skipnc
  2037  060F  2E16               	goto	l5366
  2038  0610  0021               	movlb	1	; select bank1
  2039  0611  0828               	movf	(_A_D_Wert^(0+128)+8),w
  2040  0612  0020               	movlb	0	; select bank0
  2041  0613  0262               	subwf	_schwarz,w
  2042  0614  1C03               	skipc
  2043  0615  2DA7               	goto	l562
  2044  0616                     l5366:	
  2045                           
  2046                           ;PGM_5.c: 754: }
  2047                           ;PGM_5.c: 756: }
  2048                           ;PGM_5.c: 757: LATD = (LATD & 0b11110000);
  2049  0616  0022               	movlb	2	; select bank2
  2050  0617  080F               	movf	15,w	;volatile
  2051  0618  39F0               	andlw	240
  2052  0619  008F               	movwf	15	;volatile
  2053                           
  2054                           ;PGM_5.c: 758: _delay((unsigned long)((50)*(20000000/4000.0)));
  2055  061A  3002               	movlw	2
  2056  061B  0021               	movlb	1	; select bank1
  2057  061C  00E2               	movwf	(??_schwarzeplatte^(0+128)+1)
  2058  061D  3045               	movlw	69
  2059  061E  00E1               	movwf	??_schwarzeplatte^(0+128)
  2060  061F  30A9               	movlw	169
  2061  0620                     u6837:	
  2062  0620  0B89               	decfsz	9,f
  2063  0621  2E20               	goto	u6837
  2064  0622  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  2065  0623  2E20               	goto	u6837
  2066  0624  0BE2               	decfsz	(??_schwarzeplatte^(0+128)+1),f
  2067  0625  2E20               	goto	u6837
  2068  0626  3200               	nop2
  2069                           
  2070                           ;PGM_5.c: 759: Strecke_fahren(48,LATD = (LATD & 0b11110000)|0b00000101);
  2071  0627  0022               	movlb	2	; select bank2
  2072  0628  080F               	movf	15,w	;volatile
  2073  0629  39F0               	andlw	240
  2074  062A  3805               	iorlw	5
  2075  062B  008F               	movwf	15	;volatile
  2076  062C  0021               	movlb	1	; select bank1
  2077  062D  00E1               	movwf	??_schwarzeplatte^(0+128)
  2078  062E  0861               	movf	??_schwarzeplatte^(0+128),w
  2079  062F  00F7               	movwf	Strecke_fahren@Direction
  2080  0630  3030               	movlw	48
  2081  0631  3191  2179  3185   	fcall	_Strecke_fahren
  2082  0634                     l580:	
  2083                           ;PGM_5.c: 760: while(!Flag_Strecke_erreicht);
  2084                           
  2085  0634  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  2086  0635  2E34               	goto	l580
  2087                           
  2088                           ;PGM_5.c: 761: LATD = (LATD & 0b11110000);
  2089  0636  0022               	movlb	2	; select bank2
  2090  0637  080F               	movf	15,w	;volatile
  2091  0638  39F0               	andlw	240
  2092  0639  008F               	movwf	15	;volatile
  2093                           
  2094                           ;PGM_5.c: 762: _delay((unsigned long)((1000)*(20000000/4000.0)));
  2095  063A  301A               	movlw	26
  2096  063B  0021               	movlb	1	; select bank1
  2097  063C  00E2               	movwf	(??_schwarzeplatte^(0+128)+1)
  2098  063D  305E               	movlw	94
  2099  063E  00E1               	movwf	??_schwarzeplatte^(0+128)
  2100  063F  306E               	movlw	110
  2101  0640                     u6847:	
  2102  0640  0B89               	decfsz	9,f
  2103  0641  2E40               	goto	u6847
  2104  0642  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  2105  0643  2E40               	goto	u6847
  2106  0644  0BE2               	decfsz	(??_schwarzeplatte^(0+128)+1),f
  2107  0645  2E40               	goto	u6847
  2108  0646  0000               	nop
  2109                           
  2110                           ;PGM_5.c: 763: ausrichten();
  2111  0647  3192  2220  3185   	fcall	_ausrichten
  2112                           
  2113                           ;PGM_5.c: 764: links90grad();
  2114  064A  3191  21A6  3185   	fcall	_links90grad
  2115  064D                     l5382:	
  2116                           ;PGM_5.c: 765: while (!Flag_Strecke_erreicht){
  2117                           
  2118  064D  18F0               	btfsc	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  2119  064E  2E53               	goto	l5384
  2120                           
  2121                           ;PGM_5.c: 766: opfer();
  2122  064F  3195  2599  3185   	fcall	_opfer
  2123  0652  2E4D               	goto	l5382
  2124  0653                     l5384:	
  2125                           
  2126                           ;PGM_5.c: 767: }
  2127                           ;PGM_5.c: 768: LATD = (LATD & 0b11110000);
  2128  0653  0022               	movlb	2	; select bank2
  2129  0654  080F               	movf	15,w	;volatile
  2130  0655  39F0               	andlw	240
  2131  0656  008F               	movwf	15	;volatile
  2132                           
  2133                           ;PGM_5.c: 769: ausrichten();
  2134  0657  3192  2220  3185   	fcall	_ausrichten
  2135                           
  2136                           ;PGM_5.c: 770: if (A_D_Wert [3] > wand){
  2137  065A  0021               	movlb	1	; select bank1
  2138  065B  0823               	movf	(_A_D_Wert^(0+128)+3),w
  2139  065C  0279               	subwf	_wand,w
  2140  065D  1803               	skipnc
  2141  065E  2E6F               	goto	l5400
  2142                           
  2143                           ;PGM_5.c: 771: links90grad();
  2144  065F  3191  21A6  3185   	fcall	_links90grad
  2145  0662                     l5394:	
  2146                           ;PGM_5.c: 772: while (!Flag_Strecke_erreicht){
  2147                           
  2148  0662  18F0               	btfsc	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  2149  0663  2E68               	goto	l5396
  2150                           
  2151                           ;PGM_5.c: 773: opfer();
  2152  0664  3195  2599  3185   	fcall	_opfer
  2153  0667  2E62               	goto	l5394
  2154  0668                     l5396:	
  2155                           
  2156                           ;PGM_5.c: 774: }
  2157                           ;PGM_5.c: 775: LATD = (LATD & 0b11110000);
  2158  0668  0022               	movlb	2	; select bank2
  2159  0669  080F               	movf	15,w	;volatile
  2160  066A  39F0               	andlw	240
  2161  066B  008F               	movwf	15	;volatile
  2162                           
  2163                           ;PGM_5.c: 776: ausrichten();
  2164  066C  3192  2220         	fcall	_ausrichten
  2165                           
  2166                           ;PGM_5.c: 777: }
  2167  066E  0008               	return
  2168  066F                     l5400:	
  2169                           
  2170                           ;PGM_5.c: 778: else{
  2171                           ;PGM_5.c: 779: LATD = (LATD & 0b11110000);
  2172  066F  0022               	movlb	2	; select bank2
  2173  0670  080F               	movf	15,w	;volatile
  2174  0671  39F0               	andlw	240
  2175  0672  008F               	movwf	15	;volatile
  2176                           
  2177                           ;PGM_5.c: 780: _delay((unsigned long)((50)*(20000000/4000.0)));
  2178  0673  3002               	movlw	2
  2179  0674  0021               	movlb	1	; select bank1
  2180  0675  00E2               	movwf	(??_schwarzeplatte^(0+128)+1)
  2181  0676  3045               	movlw	69
  2182  0677  00E1               	movwf	??_schwarzeplatte^(0+128)
  2183  0678  30A9               	movlw	169
  2184  0679                     u6857:	
  2185  0679  0B89               	decfsz	9,f
  2186  067A  2E79               	goto	u6857
  2187  067B  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  2188  067C  2E79               	goto	u6857
  2189  067D  0BE2               	decfsz	(??_schwarzeplatte^(0+128)+1),f
  2190  067E  2E79               	goto	u6857
  2191  067F  3200               	nop2
  2192                           
  2193                           ;PGM_5.c: 781: von_mitte_bis_wieder_wand_in_schwarzeplatte();
  2194  0680  3194  2446  3185   	fcall	_von_mitte_bis_wieder_wand_in_schwarzeplatte
  2195                           
  2196                           ;PGM_5.c: 782: LATD = (LATD & 0b11110000);
  2197  0683  0022               	movlb	2	; select bank2
  2198  0684  080F               	movf	15,w	;volatile
  2199  0685  39F0               	andlw	240
  2200  0686  008F               	movwf	15	;volatile
  2201                           
  2202                           ;PGM_5.c: 783: _delay((unsigned long)((50)*(20000000/4000.0)));
  2203  0687  3002               	movlw	2
  2204  0688  0021               	movlb	1	; select bank1
  2205  0689  00E2               	movwf	(??_schwarzeplatte^(0+128)+1)
  2206  068A  3045               	movlw	69
  2207  068B  00E1               	movwf	??_schwarzeplatte^(0+128)
  2208  068C  30A9               	movlw	169
  2209  068D                     u6867:	
  2210  068D  0B89               	decfsz	9,f
  2211  068E  2E8D               	goto	u6867
  2212  068F  0BE1               	decfsz	??_schwarzeplatte^(0+128),f
  2213  0690  2E8D               	goto	u6867
  2214  0691  0BE2               	decfsz	(??_schwarzeplatte^(0+128)+1),f
  2215  0692  2E8D               	goto	u6867
  2216  0693  3200               	nop2
  2217                           
  2218                           ;PGM_5.c: 784: }
  2219                           ;PGM_5.c: 786: }
  2220  0694  0008               	return
  2221  0695                     l5410:	
  2222                           
  2223                           ;PGM_5.c: 787: else{
  2224                           ;PGM_5.c: 788: Strecke_fahren (30,LATD = (LATD & 0b11110000)|0b00000101);
  2225  0695  0022               	movlb	2	; select bank2
  2226  0696  080F               	movf	15,w	;volatile
  2227  0697  39F0               	andlw	240
  2228  0698  3805               	iorlw	5
  2229  0699  008F               	movwf	15	;volatile
  2230  069A  0021               	movlb	1	; select bank1
  2231  069B  00E1               	movwf	??_schwarzeplatte^(0+128)
  2232  069C  0861               	movf	??_schwarzeplatte^(0+128),w
  2233  069D  00F7               	movwf	Strecke_fahren@Direction
  2234  069E  301E               	movlw	30
  2235  069F  3191  2179  3185   	fcall	_Strecke_fahren
  2236  06A2                     l592:	
  2237                           ;PGM_5.c: 789: while(!Flag_Strecke_erreicht);
  2238                           
  2239  06A2  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  2240  06A3  2EA2               	goto	l592
  2241                           
  2242                           ;PGM_5.c: 790: LATD = (LATD & 0b11110000);
  2243  06A4  0022               	movlb	2	; select bank2
  2244  06A5  080F               	movf	15,w	;volatile
  2245  06A6  39F0               	andlw	240
  2246  06A7  008F               	movwf	15	;volatile
  2247  06A8  0008               	return
  2248  06A9                     __end_of_schwarzeplatte:	
  2249                           
  2250                           	psect	text4
  2251  1446                     __ptext4:	
  2252 ;; *************** function _von_mitte_bis_wieder_wand_in_schwarzeplatte *****************
  2253 ;; Defined at:
  2254 ;;		line 383 in file "PGM_5.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg, status,2, status,0, pclath, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2270 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2272 ;;Total ram usage:        2 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    6
  2275 ;; This function calls:
  2276 ;;		_Strecke_fahren
  2277 ;;		_hindernis
  2278 ;;		_opfer
  2279 ;; This function is called by:
  2280 ;;		_schwarzeplatte
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           
  2285                           ;psect for function _von_mitte_bis_wieder_wand_in_schwarzeplatte
  2286  1446                     _von_mitte_bis_wieder_wand_in_schwarzeplatte:	
  2287                           
  2288                           ;PGM_5.c: 384: VAR_von_mitte_bis_wieder_wand = 1;
  2289                           
  2290                           ;incstack = 0
  2291                           ; Regs used in _von_mitte_bis_wieder_wand_in_schwarzeplatte: [wreg+status,2+status,0+pcl
      +                          ath+cstack]
  2292  1446  1571               	bsf	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  2293                           
  2294                           ;PGM_5.c: 385: Encoder = 0 ;
  2295  1447  0020               	movlb	0	; select bank0
  2296  1448  01D6               	clrf	_Encoder
  2297  1449                     l5306:	
  2298                           ;PGM_5.c: 386: while ( VAR_von_mitte_bis_wieder_wand == 1){
  2299                           
  2300  1449  1D71               	btfss	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  2301  144A  2CAA               	goto	l5308
  2302                           
  2303                           ;PGM_5.c: 387: if (A_D_Wert [2] > wand){
  2304  144B  0021               	movlb	1	; select bank1
  2305  144C  0822               	movf	(_A_D_Wert^(0+128)+2),w
  2306  144D  0279               	subwf	_wand,w
  2307  144E  1803               	skipnc
  2308  144F  2C7A               	goto	l5284
  2309                           
  2310                           ;PGM_5.c: 388: Strecke_fahren(2,LATD = (LATD & 0b11110000)|0b00001010);
  2311  1450  0022               	movlb	2	; select bank2
  2312  1451  080F               	movf	15,w	;volatile
  2313  1452  39F0               	andlw	240
  2314  1453  380A               	iorlw	10
  2315  1454  008F               	movwf	15	;volatile
  2316  1455  0020               	movlb	0	; select bank0
  2317  1456  00A5               	movwf	??_von_mitte_bis_wieder_wand_in_schwarzeplatte
  2318  1457  0825               	movf	??_von_mitte_bis_wieder_wand_in_schwarzeplatte,w
  2319  1458  00F7               	movwf	Strecke_fahren@Direction
  2320  1459  3002               	movlw	2
  2321  145A  3191  2179  3194   	fcall	_Strecke_fahren
  2322  145D                     l432:	
  2323                           ;PGM_5.c: 389: while(!Flag_Strecke_erreicht);
  2324                           
  2325  145D  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  2326  145E  2C5D               	goto	l432
  2327                           
  2328                           ;PGM_5.c: 390: LATD = (LATD & 0b11110000);
  2329  145F  0022               	movlb	2	; select bank2
  2330  1460  080F               	movf	15,w	;volatile
  2331  1461  39F0               	andlw	240
  2332  1462  008F               	movwf	15	;volatile
  2333                           
  2334                           ;PGM_5.c: 391: _delay((unsigned long)((50)*(20000000/4000.0)));
  2335  1463  3002               	movlw	2
  2336  1464  0020               	movlb	0	; select bank0
  2337  1465  00A6               	movwf	??_von_mitte_bis_wieder_wand_in_schwarzeplatte+1
  2338  1466  3045               	movlw	69
  2339  1467  00A5               	movwf	??_von_mitte_bis_wieder_wand_in_schwarzeplatte
  2340  1468  30A9               	movlw	169
  2341  1469                     u6877:	
  2342  1469  0B89               	decfsz	9,f
  2343  146A  2C69               	goto	u6877
  2344  146B  0BA5               	decfsz	??_von_mitte_bis_wieder_wand_in_schwarzeplatte,f
  2345  146C  2C69               	goto	u6877
  2346  146D  0BA6               	decfsz	??_von_mitte_bis_wieder_wand_in_schwarzeplatte+1,f
  2347  146E  2C69               	goto	u6877
  2348  146F  3200               	nop2
  2349                           
  2350                           ;PGM_5.c: 392: if (A_D_Wert [2] > wand){
  2351  1470  0021               	movlb	1	; select bank1
  2352  1471  0822               	movf	(_A_D_Wert^(0+128)+2),w
  2353  1472  0279               	subwf	_wand,w
  2354  1473  1803               	skipnc
  2355  1474  2C7A               	goto	l5284
  2356                           
  2357                           ;PGM_5.c: 393: VAR_von_mitte_bis_wieder_wand = 0 ;
  2358  1475  1171               	bcf	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  2359                           
  2360                           ;PGM_5.c: 394: LATD = (LATD & 0b11110000) ;
  2361  1476  0022               	movlb	2	; select bank2
  2362  1477  080F               	movf	15,w	;volatile
  2363  1478  39F0               	andlw	240
  2364  1479  008F               	movwf	15	;volatile
  2365  147A                     l5284:	
  2366                           
  2367                           ;PGM_5.c: 395: }
  2368                           ;PGM_5.c: 396: }
  2369                           ;PGM_5.c: 397: if (A_D_Wert [3] > wand){
  2370  147A  0021               	movlb	1	; select bank1
  2371  147B  0823               	movf	(_A_D_Wert^(0+128)+3),w
  2372  147C  0279               	subwf	_wand,w
  2373  147D  1803               	skipnc
  2374  147E  2C92               	goto	l5292
  2375                           
  2376                           ;PGM_5.c: 398: _delay((unsigned long)((20)*(20000000/4000.0)));
  2377  147F  3082               	movlw	130
  2378  1480  0020               	movlb	0	; select bank0
  2379  1481  00A5               	movwf	??_von_mitte_bis_wieder_wand_in_schwarzeplatte
  2380  1482  30DD               	movlw	221
  2381  1483                     u6887:	
  2382  1483  0B89               	decfsz	9,f
  2383  1484  2C83               	goto	u6887
  2384  1485  0BA5               	decfsz	??_von_mitte_bis_wieder_wand_in_schwarzeplatte,f
  2385  1486  2C83               	goto	u6887
  2386  1487  3200               	nop2
  2387                           
  2388                           ;PGM_5.c: 399: if (A_D_Wert [3] > wand){
  2389  1488  0021               	movlb	1	; select bank1
  2390  1489  0823               	movf	(_A_D_Wert^(0+128)+3),w
  2391  148A  0279               	subwf	_wand,w
  2392  148B  1803               	skipnc
  2393  148C  2C92               	goto	l5292
  2394                           
  2395                           ;PGM_5.c: 400: VAR_von_mitte_bis_wieder_wand = 0 ;
  2396  148D  1171               	bcf	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  2397                           
  2398                           ;PGM_5.c: 401: LATD = (LATD & 0b11110000) ;
  2399  148E  0022               	movlb	2	; select bank2
  2400  148F  080F               	movf	15,w	;volatile
  2401  1490  39F0               	andlw	240
  2402  1491  008F               	movwf	15	;volatile
  2403  1492                     l5292:	
  2404                           
  2405                           ;PGM_5.c: 402: }
  2406                           ;PGM_5.c: 403: }
  2407                           ;PGM_5.c: 405: if (Encoder > 40 ){
  2408  1492  3029               	movlw	41
  2409  1493  0020               	movlb	0	; select bank0
  2410  1494  0256               	subwf	_Encoder,w
  2411  1495  1C03               	skipc
  2412  1496  2C9E               	goto	l5300
  2413                           
  2414                           ;PGM_5.c: 406: VAR_von_mitte_bis_wieder_wand = 0 ;
  2415  1497  1171               	bcf	_VAR_von_mitte_bis_wieder_wand/(0+8),_VAR_von_mitte_bis_wieder_wand& (0+7)
  2416                           
  2417                           ;PGM_5.c: 407: VAR_bis_wand_zeit = 0;
  2418  1498  0021               	movlb	1	; select bank1
  2419  1499  01D6               	clrf	_VAR_bis_wand_zeit^(0+128)
  2420                           
  2421                           ;PGM_5.c: 408: LATD = (LATD & 0b11110000) ;
  2422  149A  0022               	movlb	2	; select bank2
  2423  149B  080F               	movf	15,w	;volatile
  2424  149C  39F0               	andlw	240
  2425  149D  008F               	movwf	15	;volatile
  2426  149E                     l5300:	
  2427                           
  2428                           ;PGM_5.c: 409: }
  2429                           ;PGM_5.c: 411: opfer();
  2430  149E  3195  2599  3194   	fcall	_opfer
  2431                           
  2432                           ;PGM_5.c: 412: hindernis();
  2433  14A1  3196  26A7  3194   	fcall	_hindernis
  2434                           
  2435                           ;PGM_5.c: 413: LATD = (LATD & 0b11110000)|0b00001010 ;
  2436  14A4  0022               	movlb	2	; select bank2
  2437  14A5  080F               	movf	15,w	;volatile
  2438  14A6  39F0               	andlw	240
  2439  14A7  380A               	iorlw	10
  2440  14A8  008F               	movwf	15	;volatile
  2441  14A9  2C49               	goto	l5306
  2442  14AA                     l5308:	
  2443                           
  2444                           ;PGM_5.c: 416: }
  2445                           ;PGM_5.c: 417: LATD = (LATD & 0b11110000) ;
  2446  14AA  0022               	movlb	2	; select bank2
  2447  14AB  080F               	movf	15,w	;volatile
  2448  14AC  39F0               	andlw	240
  2449  14AD  008F               	movwf	15	;volatile
  2450  14AE  0008               	return
  2451  14AF                     __end_of_von_mitte_bis_wieder_wand_in_schwarzeplatte:	
  2452                           
  2453                           	psect	text5
  2454  16A7                     __ptext5:	
  2455 ;; *************** function _hindernis *****************
  2456 ;; Defined at:
  2457 ;;		line 796 in file "PGM_5.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg, status,2, status,0
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2473 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2474 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2475 ;;Total ram usage:        2 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    3
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;;		_von_sensor_VR_bis_mitte
  2483 ;;		_von_mitte_bis_wieder_wand
  2484 ;;		_von_mitte_bis_wieder_wand_in_schwarzeplatte
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function _hindernis
  2490  16A7                     _hindernis:	
  2491                           
  2492                           ;PGM_5.c: 797: if (Flag_Hindernis == 1){
  2493                           
  2494                           ;incstack = 0
  2495                           ; Regs used in _hindernis: [wreg+status,2+status,0]
  2496  16A7  1EF0               	btfss	_Flag_Hindernis/(0+8),_Flag_Hindernis& (0+7)
  2497  16A8  2F43               	goto	L1
  2498                           
  2499                           ;PGM_5.c: 798: Encoder = encodersave;
  2500  16A9  0021               	movlb	1	; select bank1
  2501  16AA  0850               	movf	_encodersave^(0+128),w
  2502  16AB  00F7               	movwf	??_hindernis
  2503  16AC  0877               	movf	??_hindernis,w
  2504  16AD  0020               	movlb	0	; select bank0
  2505  16AE  00D6               	movwf	_Encoder
  2506                           
  2507                           ;PGM_5.c: 799: while((A_D_Wert [0] > 110)&& (A_D_Wert [3] < wand)){
  2508  16AF  2EEF               	goto	l3208
  2509  16B0                     l3196:	
  2510                           
  2511                           ;PGM_5.c: 800: LATD = (LATD & 0b11110000)|0b00000010;
  2512  16B0  0022               	movlb	2	; select bank2
  2513  16B1  080F               	movf	15,w	;volatile
  2514  16B2  39F0               	andlw	240
  2515  16B3  3802               	iorlw	2
  2516  16B4  008F               	movwf	15	;volatile
  2517                           
  2518                           ;PGM_5.c: 801: _delay((unsigned long)((52)*(20000000/4000.0)));
  2519  16B5  3002               	movlw	2
  2520  16B6  00F8               	movwf	??_hindernis+1
  2521  16B7  3052               	movlw	82
  2522  16B8  00F7               	movwf	??_hindernis
  2523  16B9  30A6               	movlw	166
  2524  16BA                     u6897:	
  2525  16BA  0B89               	decfsz	9,f
  2526  16BB  2EBA               	goto	u6897
  2527  16BC  0BF7               	decfsz	??_hindernis,f
  2528  16BD  2EBA               	goto	u6897
  2529  16BE  0BF8               	decfsz	??_hindernis+1,f
  2530  16BF  2EBA               	goto	u6897
  2531  16C0  3200               	nop2
  2532                           
  2533                           ;PGM_5.c: 802: LATD = (LATD & 0b11110000)|0b00001000;
  2534  16C1  0022               	movlb	2	; select bank2
  2535  16C2  080F               	movf	15,w	;volatile
  2536  16C3  39F0               	andlw	240
  2537  16C4  3808               	iorlw	8
  2538  16C5  008F               	movwf	15	;volatile
  2539                           
  2540                           ;PGM_5.c: 803: _delay((unsigned long)((38)*(20000000/4000.0)));
  2541  16C6  30F7               	movlw	247
  2542  16C7  00F7               	movwf	??_hindernis
  2543  16C8  30C0               	movlw	192
  2544  16C9                     u6907:	
  2545  16C9  0B89               	decfsz	9,f
  2546  16CA  2EC9               	goto	u6907
  2547  16CB  0BF7               	decfsz	??_hindernis,f
  2548  16CC  2EC9               	goto	u6907
  2549                           
  2550                           ;PGM_5.c: 804: LATD = (LATD & 0b11110000)|0b00000001;
  2551  16CD  0022               	movlb	2	; select bank2
  2552  16CE  080F               	movf	15,w	;volatile
  2553  16CF  39F0               	andlw	240
  2554  16D0  3801               	iorlw	1
  2555  16D1  008F               	movwf	15	;volatile
  2556                           
  2557                           ;PGM_5.c: 805: _delay((unsigned long)((42)*(20000000/4000.0)));
  2558  16D2  3002               	movlw	2
  2559  16D3  00F8               	movwf	??_hindernis+1
  2560  16D4  3011               	movlw	17
  2561  16D5  00F7               	movwf	??_hindernis
  2562  16D6  30B7               	movlw	183
  2563  16D7                     u6917:	
  2564  16D7  0B89               	decfsz	9,f
  2565  16D8  2ED7               	goto	u6917
  2566  16D9  0BF7               	decfsz	??_hindernis,f
  2567  16DA  2ED7               	goto	u6917
  2568  16DB  0BF8               	decfsz	??_hindernis+1,f
  2569  16DC  2ED7               	goto	u6917
  2570  16DD  0000               	nop
  2571                           
  2572                           ;PGM_5.c: 806: LATD = (LATD & 0b11110000)|0b00000100;
  2573  16DE  0022               	movlb	2	; select bank2
  2574  16DF  080F               	movf	15,w	;volatile
  2575  16E0  39F0               	andlw	240
  2576  16E1  3804               	iorlw	4
  2577  16E2  008F               	movwf	15	;volatile
  2578                           
  2579                           ;PGM_5.c: 807: _delay((unsigned long)((42)*(20000000/4000.0)));
  2580  16E3  3002               	movlw	2
  2581  16E4  00F8               	movwf	??_hindernis+1
  2582  16E5  3011               	movlw	17
  2583  16E6  00F7               	movwf	??_hindernis
  2584  16E7  30B7               	movlw	183
  2585  16E8                     u6927:	
  2586  16E8  0B89               	decfsz	9,f
  2587  16E9  2EE8               	goto	u6927
  2588  16EA  0BF7               	decfsz	??_hindernis,f
  2589  16EB  2EE8               	goto	u6927
  2590  16EC  0BF8               	decfsz	??_hindernis+1,f
  2591  16ED  2EE8               	goto	u6927
  2592  16EE  0000               	nop
  2593  16EF                     l3208:	
  2594  16EF  306F               	movlw	111
  2595  16F0  0021               	movlb	1	; select bank1
  2596  16F1  0220               	subwf	_A_D_Wert^(0+128),w
  2597  16F2  1C03               	skipc
  2598  16F3  2EF8               	goto	l3212
  2599  16F4  0879               	movf	_wand,w
  2600  16F5  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  2601  16F6  1C03               	skipc
  2602  16F7  2EB0               	goto	l3196
  2603  16F8                     l3212:	
  2604                           
  2605                           ;PGM_5.c: 808: }
  2606                           ;PGM_5.c: 809: VAR_omni=0;
  2607  16F8  01EA               	clrf	_VAR_omni^(0+128)
  2608  16F9                     l3228:	
  2609                           ;PGM_5.c: 810: while (VAR_omni < 2){
  2610                           
  2611  16F9  3002               	movlw	2
  2612  16FA  026A               	subwf	_VAR_omni^(0+128),w
  2613  16FB  1803               	btfsc	3,0
  2614  16FC  2F42               	goto	l598
  2615                           
  2616                           ;PGM_5.c: 811: LATD = (LATD & 0b11110000)|0b00000010;
  2617  16FD  0022               	movlb	2	; select bank2
  2618  16FE  080F               	movf	15,w	;volatile
  2619  16FF  39F0               	andlw	240
  2620  1700  3802               	iorlw	2
  2621  1701  008F               	movwf	15	;volatile
  2622                           
  2623                           ;PGM_5.c: 812: _delay((unsigned long)((52)*(20000000/4000.0)));
  2624  1702  3002               	movlw	2
  2625  1703  00F8               	movwf	??_hindernis+1
  2626  1704  3052               	movlw	82
  2627  1705  00F7               	movwf	??_hindernis
  2628  1706  30A6               	movlw	166
  2629  1707                     u6937:	
  2630  1707  0B89               	decfsz	9,f
  2631  1708  2F07               	goto	u6937
  2632  1709  0BF7               	decfsz	??_hindernis,f
  2633  170A  2F07               	goto	u6937
  2634  170B  0BF8               	decfsz	??_hindernis+1,f
  2635  170C  2F07               	goto	u6937
  2636  170D  3200               	nop2
  2637                           
  2638                           ;PGM_5.c: 813: LATD = (LATD & 0b11110000)|0b00001000;
  2639  170E  0022               	movlb	2	; select bank2
  2640  170F  080F               	movf	15,w	;volatile
  2641  1710  39F0               	andlw	240
  2642  1711  3808               	iorlw	8
  2643  1712  008F               	movwf	15	;volatile
  2644                           
  2645                           ;PGM_5.c: 814: _delay((unsigned long)((38)*(20000000/4000.0)));
  2646  1713  30F7               	movlw	247
  2647  1714  00F7               	movwf	??_hindernis
  2648  1715  30C0               	movlw	192
  2649  1716                     u6947:	
  2650  1716  0B89               	decfsz	9,f
  2651  1717  2F16               	goto	u6947
  2652  1718  0BF7               	decfsz	??_hindernis,f
  2653  1719  2F16               	goto	u6947
  2654                           
  2655                           ;PGM_5.c: 815: LATD = (LATD & 0b11110000)|0b00000001;
  2656  171A  0022               	movlb	2	; select bank2
  2657  171B  080F               	movf	15,w	;volatile
  2658  171C  39F0               	andlw	240
  2659  171D  3801               	iorlw	1
  2660  171E  008F               	movwf	15	;volatile
  2661                           
  2662                           ;PGM_5.c: 816: _delay((unsigned long)((42)*(20000000/4000.0)));
  2663  171F  3002               	movlw	2
  2664  1720  00F8               	movwf	??_hindernis+1
  2665  1721  3011               	movlw	17
  2666  1722  00F7               	movwf	??_hindernis
  2667  1723  30B7               	movlw	183
  2668  1724                     u6957:	
  2669  1724  0B89               	decfsz	9,f
  2670  1725  2F24               	goto	u6957
  2671  1726  0BF7               	decfsz	??_hindernis,f
  2672  1727  2F24               	goto	u6957
  2673  1728  0BF8               	decfsz	??_hindernis+1,f
  2674  1729  2F24               	goto	u6957
  2675  172A  0000               	nop
  2676                           
  2677                           ;PGM_5.c: 817: LATD = (LATD & 0b11110000)|0b00000100;
  2678  172B  0022               	movlb	2	; select bank2
  2679  172C  080F               	movf	15,w	;volatile
  2680  172D  39F0               	andlw	240
  2681  172E  3804               	iorlw	4
  2682  172F  008F               	movwf	15	;volatile
  2683                           
  2684                           ;PGM_5.c: 818: _delay((unsigned long)((42)*(20000000/4000.0)));
  2685  1730  3002               	movlw	2
  2686  1731  00F8               	movwf	??_hindernis+1
  2687  1732  3011               	movlw	17
  2688  1733  00F7               	movwf	??_hindernis
  2689  1734  30B7               	movlw	183
  2690  1735                     u6967:	
  2691  1735  0B89               	decfsz	9,f
  2692  1736  2F35               	goto	u6967
  2693  1737  0BF7               	decfsz	??_hindernis,f
  2694  1738  2F35               	goto	u6967
  2695  1739  0BF8               	decfsz	??_hindernis+1,f
  2696  173A  2F35               	goto	u6967
  2697  173B  0000               	nop
  2698                           
  2699                           ;PGM_5.c: 819: VAR_omni++;
  2700  173C  3001               	movlw	1
  2701  173D  00F7               	movwf	??_hindernis
  2702  173E  0877               	movf	??_hindernis,w
  2703  173F  0021               	movlb	1	; select bank1
  2704  1740  07EA               	addwf	_VAR_omni^(0+128),f
  2705  1741  2EF9               	goto	l3228
  2706  1742                     l598:	
  2707                           
  2708                           ;PGM_5.c: 820: }
  2709                           ;PGM_5.c: 821: }
  2710                           ;PGM_5.c: 822: Flag_Hindernis = 0;
  2711  1742  12F0               	bcf	_Flag_Hindernis/(0+8),_Flag_Hindernis& (0+7)
  2712  1743                     L1:	
  2713                           
  2714                           ;PGM_5.c: 823: VAR_omni = 0;
  2715  1743  0021               	movlb	1	; select bank1
  2716  1744  01EA               	clrf	_VAR_omni^(0+128)
  2717                           
  2718                           ;PGM_5.c: 824: encodersave = Encoder;
  2719  1745  0020               	movlb	0	; select bank0
  2720  1746  0856               	movf	_Encoder,w
  2721  1747  00F7               	movwf	??_hindernis
  2722  1748  0877               	movf	??_hindernis,w
  2723  1749  0021               	movlb	1	; select bank1
  2724  174A  00D0               	movwf	_encodersave^(0+128)
  2725  174B  0008               	return
  2726  174C                     __end_of_hindernis:	
  2727                           
  2728                           	psect	text6
  2729  1220                     __ptext6:	
  2730 ;; *************** function _ausrichten *****************
  2731 ;; Defined at:
  2732 ;;		line 870 in file "PGM_5.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;		None
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;		None
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  1    wreg      void 
  2739 ;; Registers used:
  2740 ;;		wreg, status,2, status,0, pclath, cstack
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2749 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2750 ;;Total ram usage:        2 bytes
  2751 ;; Hardware stack levels used:    1
  2752 ;; Hardware stack levels required when called:    7
  2753 ;; This function calls:
  2754 ;;		_hinten_ausrichten
  2755 ;;		_links_ausrichten
  2756 ;;		_omnifakelinks
  2757 ;;		_omnifakerechts
  2758 ;;		_rechts_ausrichten
  2759 ;;		_vorne_ausrichten
  2760 ;; This function is called by:
  2761 ;;		_main
  2762 ;;		_schwarzeplatte
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           
  2767                           ;psect for function _ausrichten
  2768  1220                     _ausrichten:	
  2769                           
  2770                           ;PGM_5.c: 871: links_ausrichten();
  2771                           
  2772                           ;incstack = 0
  2773                           ; Regs used in _ausrichten: [wreg+status,2+status,0+pclath+cstack]
  2774  1220  318A  22EB  3192   	fcall	_links_ausrichten
  2775                           
  2776                           ;PGM_5.c: 872: rechts_ausrichten();
  2777  1223  318B  23E8  3192   	fcall	_rechts_ausrichten
  2778                           
  2779                           ;PGM_5.c: 873: vorne_ausrichten();
  2780  1226  3181  21E7  3192   	fcall	_vorne_ausrichten
  2781                           
  2782                           ;PGM_5.c: 875: hinten_ausrichten();
  2783  1229  318D  2502  3192   	fcall	_hinten_ausrichten
  2784                           
  2785                           ;PGM_5.c: 879: links_ausrichten();
  2786  122C  318A  22EB  3192   	fcall	_links_ausrichten
  2787                           
  2788                           ;PGM_5.c: 880: omnifakelinks();
  2789  122F  3189  21F6  3192   	fcall	_omnifakelinks
  2790                           
  2791                           ;PGM_5.c: 881: LATD = (LATD & 0b11110000);
  2792  1232  0022               	movlb	2	; select bank2
  2793  1233  080F               	movf	15,w	;volatile
  2794  1234  39F0               	andlw	240
  2795  1235  008F               	movwf	15	;volatile
  2796                           
  2797                           ;PGM_5.c: 882: _delay((unsigned long)((50)*(20000000/4000.0)));
  2798  1236  3002               	movlw	2
  2799  1237  0020               	movlb	0	; select bank0
  2800  1238  00D2               	movwf	??_ausrichten+1
  2801  1239  3045               	movlw	69
  2802  123A  00D1               	movwf	??_ausrichten
  2803  123B  30A9               	movlw	169
  2804  123C                     u6977:	
  2805  123C  0B89               	decfsz	9,f
  2806  123D  2A3C               	goto	u6977
  2807  123E  0BD1               	decfsz	??_ausrichten,f
  2808  123F  2A3C               	goto	u6977
  2809  1240  0BD2               	decfsz	??_ausrichten+1,f
  2810  1241  2A3C               	goto	u6977
  2811  1242  3200               	nop2
  2812                           
  2813                           ;PGM_5.c: 883: links_ausrichten();
  2814  1243  318A  22EB  3192   	fcall	_links_ausrichten
  2815                           
  2816                           ;PGM_5.c: 884: if((A_D_Wert [1] < Schwellwert_Ausrichten)||(A_D_Wert [6] < Schwellwert_A
      +                          usrichten)){
  2817  1246  0020               	movlb	0	; select bank0
  2818  1247  0868               	movf	_Schwellwert_Ausrichten,w
  2819  1248  0021               	movlb	1	; select bank1
  2820  1249  0221               	subwf	(_A_D_Wert^(0+128)+1),w
  2821  124A  1C03               	skipc
  2822  124B  2A52               	goto	l5258
  2823  124C  0020               	movlb	0	; select bank0
  2824  124D  0868               	movf	_Schwellwert_Ausrichten,w
  2825  124E  0021               	movlb	1	; select bank1
  2826  124F  0226               	subwf	(_A_D_Wert^(0+128)+6),w
  2827  1250  1803               	skipnc
  2828  1251  0008               	return
  2829  1252                     l5258:	
  2830                           
  2831                           ;PGM_5.c: 885: rechts_ausrichten();
  2832  1252  318B  23E8  3192   	fcall	_rechts_ausrichten
  2833                           
  2834                           ;PGM_5.c: 886: omnifakerechts();
  2835  1255  3189  210E  3192   	fcall	_omnifakerechts
  2836                           
  2837                           ;PGM_5.c: 887: LATD = (LATD & 0b11110000);
  2838  1258  0022               	movlb	2	; select bank2
  2839  1259  080F               	movf	15,w	;volatile
  2840  125A  39F0               	andlw	240
  2841  125B  008F               	movwf	15	;volatile
  2842                           
  2843                           ;PGM_5.c: 888: _delay((unsigned long)((50)*(20000000/4000.0)));
  2844  125C  3002               	movlw	2
  2845  125D  0020               	movlb	0	; select bank0
  2846  125E  00D2               	movwf	??_ausrichten+1
  2847  125F  3045               	movlw	69
  2848  1260  00D1               	movwf	??_ausrichten
  2849  1261  30A9               	movlw	169
  2850  1262                     u6987:	
  2851  1262  0B89               	decfsz	9,f
  2852  1263  2A62               	goto	u6987
  2853  1264  0BD1               	decfsz	??_ausrichten,f
  2854  1265  2A62               	goto	u6987
  2855  1266  0BD2               	decfsz	??_ausrichten+1,f
  2856  1267  2A62               	goto	u6987
  2857  1268  3200               	nop2
  2858                           
  2859                           ;PGM_5.c: 889: rechts_ausrichten();
  2860  1269  318B  23E8         	fcall	_rechts_ausrichten
  2861  126B  0008               	return
  2862  126C                     __end_of_ausrichten:	
  2863                           
  2864                           	psect	text7
  2865  01E7                     __ptext7:	
  2866 ;; *************** function _vorne_ausrichten *****************
  2867 ;; Defined at:
  2868 ;;		line 892 in file "PGM_5.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg, status,2, status,0, pclath, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2884 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2885 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2886 ;;Total ram usage:        4 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    6
  2889 ;; This function calls:
  2890 ;;		_Power_Ausrichten
  2891 ;;		___ftmul
  2892 ;;		___fttol
  2893 ;;		___lbtoft
  2894 ;;		_opfer
  2895 ;; This function is called by:
  2896 ;;		_ausrichten
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           
  2901                           ;psect for function _vorne_ausrichten
  2902  01E7                     _vorne_ausrichten:	
  2903                           
  2904                           ;PGM_5.c: 893: if ((A_D_Wert [3] < wand) && ( A_D_Wert [0] < wand )){
  2905                           
  2906                           ;incstack = 0
  2907                           ; Regs used in _vorne_ausrichten: [wreg+status,2+status,0+pclath+cstack]
  2908  01E7  0879               	movf	_wand,w
  2909  01E8  0021               	movlb	1	; select bank1
  2910  01E9  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  2911  01EA  1803               	skipnc
  2912  01EB  2A59               	goto	l5044
  2913  01EC  0879               	movf	_wand,w
  2914  01ED  0220               	subwf	_A_D_Wert^(0+128),w
  2915  01EE  1803               	skipnc
  2916  01EF  2A59               	goto	l5044
  2917                           
  2918                           ;PGM_5.c: 894: if ((A_D_Wert [10] < 111) && (A_D_Wert [10] >68)){
  2919  01F0  306F               	movlw	111
  2920  01F1  022A               	subwf	(_A_D_Wert^(0+128)+10),w
  2921  01F2  1803               	skipnc
  2922  01F3  2A59               	goto	l5044
  2923  01F4  3045               	movlw	69
  2924  01F5  022A               	subwf	(_A_D_Wert^(0+128)+10),w
  2925  01F6  1C03               	skipc
  2926  01F7  2A59               	goto	l5044
  2927                           
  2928                           ;PGM_5.c: 895: Var_lang_Ausrichten = 0;
  2929  01F8  01D5               	clrf	_Var_lang_Ausrichten^(0+128)
  2930  01F9                     l5042:	
  2931                           ;PGM_5.c: 896: while (Var_lang_Ausrichten == 0){
  2932                           
  2933  01F9  0021               	movlb	1	; select bank1
  2934  01FA  0855               	movf	_Var_lang_Ausrichten^(0+128),w
  2935  01FB  1D03               	btfss	3,2
  2936  01FC  2A59               	goto	l5044
  2937                           
  2938                           ;PGM_5.c: 897: if (A_D_Wert [10] < 89){
  2939  01FD  3059               	movlw	89
  2940  01FE  022A               	subwf	(_A_D_Wert^(0+128)+10),w
  2941  01FF  1803               	skipnc
  2942  0200  2A1C               	goto	l642
  2943                           
  2944                           ;PGM_5.c: 898: LATD = (LATD & 0b11110000)|0b00001010;
  2945  0201  0022               	movlb	2	; select bank2
  2946  0202  080F               	movf	15,w	;volatile
  2947  0203  39F0               	andlw	240
  2948  0204  380A               	iorlw	10
  2949  0205  008F               	movwf	15	;volatile
  2950                           
  2951                           ;PGM_5.c: 899: _delay((unsigned long)((10)*(20000000/4000.0)));
  2952  0206  3041               	movlw	65
  2953  0207  0020               	movlb	0	; select bank0
  2954  0208  00CD               	movwf	??_vorne_ausrichten
  2955  0209  30EE               	movlw	238
  2956  020A                     u6997:	
  2957  020A  0B89               	decfsz	9,f
  2958  020B  2A0A               	goto	u6997
  2959  020C  0BCD               	decfsz	??_vorne_ausrichten,f
  2960  020D  2A0A               	goto	u6997
  2961  020E  0000               	nop
  2962                           
  2963                           ;PGM_5.c: 900: LATD = (LATD & 0b11110000);
  2964  020F  0022               	movlb	2	; select bank2
  2965  0210  080F               	movf	15,w	;volatile
  2966  0211  39F0               	andlw	240
  2967  0212  008F               	movwf	15	;volatile
  2968                           
  2969                           ;PGM_5.c: 901: _delay((unsigned long)((10)*(20000000/4000.0)));
  2970  0213  3041               	movlw	65
  2971  0214  0020               	movlb	0	; select bank0
  2972  0215  00CD               	movwf	??_vorne_ausrichten
  2973  0216  30EE               	movlw	238
  2974  0217                     u7007:	
  2975  0217  0B89               	decfsz	9,f
  2976  0218  2A17               	goto	u7007
  2977  0219  0BCD               	decfsz	??_vorne_ausrichten,f
  2978  021A  2A17               	goto	u7007
  2979  021B  0000               	nop
  2980  021C                     l642:	
  2981                           
  2982                           ;PGM_5.c: 902: }
  2983                           ;PGM_5.c: 903: if (A_D_Wert [10] > 89){
  2984  021C  305A               	movlw	90
  2985  021D  0021               	movlb	1	; select bank1
  2986  021E  022A               	subwf	(_A_D_Wert^(0+128)+10),w
  2987  021F  1C03               	skipc
  2988  0220  2A3C               	goto	l643
  2989                           
  2990                           ;PGM_5.c: 904: LATD = (LATD & 0b11110000)|0b00000101;
  2991  0221  0022               	movlb	2	; select bank2
  2992  0222  080F               	movf	15,w	;volatile
  2993  0223  39F0               	andlw	240
  2994  0224  3805               	iorlw	5
  2995  0225  008F               	movwf	15	;volatile
  2996                           
  2997                           ;PGM_5.c: 905: _delay((unsigned long)((10)*(20000000/4000.0)));
  2998  0226  3041               	movlw	65
  2999  0227  0020               	movlb	0	; select bank0
  3000  0228  00CD               	movwf	??_vorne_ausrichten
  3001  0229  30EE               	movlw	238
  3002  022A                     u7017:	
  3003  022A  0B89               	decfsz	9,f
  3004  022B  2A2A               	goto	u7017
  3005  022C  0BCD               	decfsz	??_vorne_ausrichten,f
  3006  022D  2A2A               	goto	u7017
  3007  022E  0000               	nop
  3008                           
  3009                           ;PGM_5.c: 906: LATD = (LATD & 0b11110000);
  3010  022F  0022               	movlb	2	; select bank2
  3011  0230  080F               	movf	15,w	;volatile
  3012  0231  39F0               	andlw	240
  3013  0232  008F               	movwf	15	;volatile
  3014                           
  3015                           ;PGM_5.c: 907: _delay((unsigned long)((10)*(20000000/4000.0)));
  3016  0233  3041               	movlw	65
  3017  0234  0020               	movlb	0	; select bank0
  3018  0235  00CD               	movwf	??_vorne_ausrichten
  3019  0236  30EE               	movlw	238
  3020  0237                     u7027:	
  3021  0237  0B89               	decfsz	9,f
  3022  0238  2A37               	goto	u7027
  3023  0239  0BCD               	decfsz	??_vorne_ausrichten,f
  3024  023A  2A37               	goto	u7027
  3025  023B  0000               	nop
  3026  023C                     l643:	
  3027                           
  3028                           ;PGM_5.c: 908: }
  3029                           ;PGM_5.c: 909: if ((A_D_Wert [10] > 88)&&(A_D_Wert [10] < 90)){
  3030  023C  3059               	movlw	89
  3031  023D  0021               	movlb	1	; select bank1
  3032  023E  022A               	subwf	(_A_D_Wert^(0+128)+10),w
  3033  023F  1C03               	skipc
  3034  0240  29F9               	goto	l5042
  3035  0241  305A               	movlw	90
  3036  0242  022A               	subwf	(_A_D_Wert^(0+128)+10),w
  3037  0243  1803               	skipnc
  3038  0244  29F9               	goto	l5042
  3039                           
  3040                           ;PGM_5.c: 910: Var_lang_Ausrichten = 1;
  3041  0245  01D5               	clrf	_Var_lang_Ausrichten^(0+128)
  3042  0246  0AD5               	incf	_Var_lang_Ausrichten^(0+128),f
  3043                           
  3044                           ;PGM_5.c: 911: LATD = (LATD & 0b11110000);
  3045  0247  0022               	movlb	2	; select bank2
  3046  0248  080F               	movf	15,w	;volatile
  3047  0249  39F0               	andlw	240
  3048  024A  008F               	movwf	15	;volatile
  3049                           
  3050                           ;PGM_5.c: 912: _delay((unsigned long)((1000)*(20000000/4000.0)));
  3051  024B  301A               	movlw	26
  3052  024C  0020               	movlb	0	; select bank0
  3053  024D  00CE               	movwf	??_vorne_ausrichten+1
  3054  024E  305E               	movlw	94
  3055  024F  00CD               	movwf	??_vorne_ausrichten
  3056  0250  306E               	movlw	110
  3057  0251                     u7037:	
  3058  0251  0B89               	decfsz	9,f
  3059  0252  2A51               	goto	u7037
  3060  0253  0BCD               	decfsz	??_vorne_ausrichten,f
  3061  0254  2A51               	goto	u7037
  3062  0255  0BCE               	decfsz	??_vorne_ausrichten+1,f
  3063  0256  2A51               	goto	u7037
  3064  0257  0000               	nop
  3065  0258  29F9               	goto	l5042
  3066  0259                     l5044:	
  3067                           
  3068                           ;PGM_5.c: 913: }
  3069                           ;PGM_5.c: 914: }
  3070                           ;PGM_5.c: 915: }
  3071                           ;PGM_5.c: 916: }
  3072                           ;PGM_5.c: 917: if ((A_D_Wert [3] > Schwellwert_Ausrichten) && ( A_D_Wert [0] > Schwellwe
      +                          rt_Ausrichten )){
  3073  0259  0823               	movf	(_A_D_Wert^(0+128)+3),w
  3074  025A  0020               	movlb	0	; select bank0
  3075  025B  0268               	subwf	_Schwellwert_Ausrichten,w
  3076  025C  1803               	skipnc
  3077  025D  0008               	return
  3078  025E  0021               	movlb	1	; select bank1
  3079  025F  0820               	movf	_A_D_Wert^(0+128),w
  3080  0260  0020               	movlb	0	; select bank0
  3081  0261  0268               	subwf	_Schwellwert_Ausrichten,w
  3082  0262  1803               	skipnc
  3083  0263  0008               	return
  3084                           
  3085                           ;PGM_5.c: 918: LATD = (LATD & 0b11110000);
  3086  0264  0022               	movlb	2	; select bank2
  3087  0265  080F               	movf	15,w	;volatile
  3088  0266  39F0               	andlw	240
  3089  0267  008F               	movwf	15	;volatile
  3090                           
  3091                           ;PGM_5.c: 919: VAR_aus_zeit = 0;
  3092  0268  0020               	movlb	0	; select bank0
  3093  0269  01D4               	clrf	_VAR_aus_zeit
  3094  026A  01D5               	clrf	_VAR_aus_zeit+1
  3095                           
  3096                           ;PGM_5.c: 920: LATD = (LATD & 0b11110000);
  3097  026B  0022               	movlb	2	; select bank2
  3098  026C  080F               	movf	15,w	;volatile
  3099  026D  39F0               	andlw	240
  3100  026E  008F               	movwf	15	;volatile
  3101                           
  3102                           ;PGM_5.c: 921: while ((A_D_Wert [3] > 81)&&(VAR_aus_zeit <= 3000)){
  3103  026F  2AD4               	goto	l647
  3104  0270                     l5054:	
  3105                           
  3106                           ;PGM_5.c: 922: Power_Ausrichten();
  3107  0270  3180  2003  3181   	fcall	_Power_Ausrichten
  3108                           
  3109                           ;PGM_5.c: 923: LATD = (LATD & 0b11110000)|0b00000101;
  3110  0273  0022               	movlb	2	; select bank2
  3111  0274  080F               	movf	15,w	;volatile
  3112  0275  39F0               	andlw	240
  3113  0276  3805               	iorlw	5
  3114  0277  008F               	movwf	15	;volatile
  3115                           
  3116                           ;PGM_5.c: 924: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  3117  0278  0020               	movlb	0	; select bank0
  3118  0279  086A               	movf	_Ausrichten_Fahren,w
  3119  027A  3191  218B  3181   	fcall	___lbtoft
  3120  027D  0020               	movlb	0	; select bank0
  3121  027E  0828               	movf	?___lbtoft,w
  3122  027F  00B2               	movwf	___ftmul@f2
  3123  0280  0829               	movf	?___lbtoft+1,w
  3124  0281  00B3               	movwf	___ftmul@f2+1
  3125  0282  082A               	movf	?___lbtoft+2,w
  3126  0283  00B4               	movwf	___ftmul@f2+2
  3127  0284  3040               	movlw	64
  3128  0285  00AF               	movwf	___ftmul@f1
  3129  0286  309C               	movlw	156
  3130  0287  00B0               	movwf	___ftmul@f1+1
  3131  0288  3045               	movlw	69
  3132  0289  00B1               	movwf	___ftmul@f1+2
  3133  028A  3197  274C  3181   	fcall	___ftmul
  3134  028D  0020               	movlb	0	; select bank0
  3135  028E  082F               	movf	?___ftmul,w
  3136  028F  00BF               	movwf	___fttol@f1
  3137  0290  0830               	movf	?___ftmul+1,w
  3138  0291  00C0               	movwf	___fttol@f1+1
  3139  0292  0831               	movf	?___ftmul+2,w
  3140  0293  00C1               	movwf	___fttol@f1+2
  3141  0294  3196  2620  3181   	fcall	___fttol
  3142  0297  0020               	movlb	0	; select bank0
  3143  0298  083F               	movf	?___fttol,w
  3144  0299  00CD               	movwf	??_vorne_ausrichten
  3145  029A  0840               	movf	?___fttol+1,w
  3146  029B  00CE               	movwf	??_vorne_ausrichten+1
  3147  029C  0841               	movf	?___fttol+2,w
  3148  029D  00CF               	movwf	??_vorne_ausrichten+2
  3149  029E  0842               	movf	?___fttol+3,w
  3150  029F  00D0               	movwf	??_vorne_ausrichten+3
  3151                           
  3152                           ;PGM_5.c: 925: LATD = (LATD & 0b11110000);
  3153  02A0  0022               	movlb	2	; select bank2
  3154  02A1  080F               	movf	15,w	;volatile
  3155  02A2  39F0               	andlw	240
  3156  02A3  008F               	movwf	15	;volatile
  3157                           
  3158                           ;PGM_5.c: 926: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  3159  02A4  0020               	movlb	0	; select bank0
  3160  02A5  0869               	movf	_Ausrichten_Stopp,w
  3161  02A6  3191  218B  3181   	fcall	___lbtoft
  3162  02A9  0020               	movlb	0	; select bank0
  3163  02AA  0828               	movf	?___lbtoft,w
  3164  02AB  00B2               	movwf	___ftmul@f2
  3165  02AC  0829               	movf	?___lbtoft+1,w
  3166  02AD  00B3               	movwf	___ftmul@f2+1
  3167  02AE  082A               	movf	?___lbtoft+2,w
  3168  02AF  00B4               	movwf	___ftmul@f2+2
  3169  02B0  3040               	movlw	64
  3170  02B1  00AF               	movwf	___ftmul@f1
  3171  02B2  309C               	movlw	156
  3172  02B3  00B0               	movwf	___ftmul@f1+1
  3173  02B4  3045               	movlw	69
  3174  02B5  00B1               	movwf	___ftmul@f1+2
  3175  02B6  3197  274C  3181   	fcall	___ftmul
  3176  02B9  0020               	movlb	0	; select bank0
  3177  02BA  082F               	movf	?___ftmul,w
  3178  02BB  00BF               	movwf	___fttol@f1
  3179  02BC  0830               	movf	?___ftmul+1,w
  3180  02BD  00C0               	movwf	___fttol@f1+1
  3181  02BE  0831               	movf	?___ftmul+2,w
  3182  02BF  00C1               	movwf	___fttol@f1+2
  3183  02C0  3196  2620  3181   	fcall	___fttol
  3184  02C3  0020               	movlb	0	; select bank0
  3185  02C4  083F               	movf	?___fttol,w
  3186  02C5  00CD               	movwf	??_vorne_ausrichten
  3187  02C6  0840               	movf	?___fttol+1,w
  3188  02C7  00CE               	movwf	??_vorne_ausrichten+1
  3189  02C8  0841               	movf	?___fttol+2,w
  3190  02C9  00CF               	movwf	??_vorne_ausrichten+2
  3191  02CA  0842               	movf	?___fttol+3,w
  3192  02CB  00D0               	movwf	??_vorne_ausrichten+3
  3193                           
  3194                           ;PGM_5.c: 927: opfer();
  3195  02CC  3195  2599  3181   	fcall	_opfer
  3196                           
  3197                           ;PGM_5.c: 928: VAR_aus_zeit ++ ;
  3198  02CF  3001               	movlw	1
  3199  02D0  0020               	movlb	0	; select bank0
  3200  02D1  07D4               	addwf	_VAR_aus_zeit,f
  3201  02D2  3000               	movlw	0
  3202  02D3  3DD5               	addwfc	_VAR_aus_zeit+1,f
  3203  02D4                     l647:	
  3204  02D4  3052               	movlw	82
  3205  02D5  0021               	movlb	1	; select bank1
  3206  02D6  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  3207  02D7  1C03               	skipc
  3208  02D8  2AE5               	goto	l5068
  3209  02D9  0020               	movlb	0	; select bank0
  3210  02DA  0855               	movf	_VAR_aus_zeit+1,w
  3211  02DB  3A80               	xorlw	128
  3212  02DC  00CD               	movwf	??_vorne_ausrichten
  3213  02DD  308B               	movlw	139
  3214  02DE  024D               	subwf	??_vorne_ausrichten,w
  3215  02DF  1D03               	skipz
  3216  02E0  2AE3               	goto	u5685
  3217  02E1  30B9               	movlw	185
  3218  02E2  0254               	subwf	_VAR_aus_zeit,w
  3219  02E3                     u5685:	
  3220  02E3  1C03               	skipc
  3221  02E4  2A70               	goto	l5054
  3222  02E5                     l5068:	
  3223                           
  3224                           ;PGM_5.c: 929: }
  3225                           ;PGM_5.c: 930: VAR_aus_zeit = 0;
  3226  02E5  0020               	movlb	0	; select bank0
  3227  02E6  01D4               	clrf	_VAR_aus_zeit
  3228  02E7  01D5               	clrf	_VAR_aus_zeit+1
  3229                           
  3230                           ;PGM_5.c: 931: while ((A_D_Wert [3] < 77)&&(VAR_aus_zeit <= 3000)){
  3231  02E8  2B4D               	goto	l652
  3232  02E9                     l5070:	
  3233                           
  3234                           ;PGM_5.c: 932: Power_Ausrichten();
  3235  02E9  3180  2003  3181   	fcall	_Power_Ausrichten
  3236                           
  3237                           ;PGM_5.c: 933: LATD = (LATD & 0b11110000)|0b00001010;
  3238  02EC  0022               	movlb	2	; select bank2
  3239  02ED  080F               	movf	15,w	;volatile
  3240  02EE  39F0               	andlw	240
  3241  02EF  380A               	iorlw	10
  3242  02F0  008F               	movwf	15	;volatile
  3243                           
  3244                           ;PGM_5.c: 934: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  3245  02F1  0020               	movlb	0	; select bank0
  3246  02F2  086A               	movf	_Ausrichten_Fahren,w
  3247  02F3  3191  218B  3181   	fcall	___lbtoft
  3248  02F6  0020               	movlb	0	; select bank0
  3249  02F7  0828               	movf	?___lbtoft,w
  3250  02F8  00B2               	movwf	___ftmul@f2
  3251  02F9  0829               	movf	?___lbtoft+1,w
  3252  02FA  00B3               	movwf	___ftmul@f2+1
  3253  02FB  082A               	movf	?___lbtoft+2,w
  3254  02FC  00B4               	movwf	___ftmul@f2+2
  3255  02FD  3040               	movlw	64
  3256  02FE  00AF               	movwf	___ftmul@f1
  3257  02FF  309C               	movlw	156
  3258  0300  00B0               	movwf	___ftmul@f1+1
  3259  0301  3045               	movlw	69
  3260  0302  00B1               	movwf	___ftmul@f1+2
  3261  0303  3197  274C  3181   	fcall	___ftmul
  3262  0306  0020               	movlb	0	; select bank0
  3263  0307  082F               	movf	?___ftmul,w
  3264  0308  00BF               	movwf	___fttol@f1
  3265  0309  0830               	movf	?___ftmul+1,w
  3266  030A  00C0               	movwf	___fttol@f1+1
  3267  030B  0831               	movf	?___ftmul+2,w
  3268  030C  00C1               	movwf	___fttol@f1+2
  3269  030D  3196  2620  3181   	fcall	___fttol
  3270  0310  0020               	movlb	0	; select bank0
  3271  0311  083F               	movf	?___fttol,w
  3272  0312  00CD               	movwf	??_vorne_ausrichten
  3273  0313  0840               	movf	?___fttol+1,w
  3274  0314  00CE               	movwf	??_vorne_ausrichten+1
  3275  0315  0841               	movf	?___fttol+2,w
  3276  0316  00CF               	movwf	??_vorne_ausrichten+2
  3277  0317  0842               	movf	?___fttol+3,w
  3278  0318  00D0               	movwf	??_vorne_ausrichten+3
  3279                           
  3280                           ;PGM_5.c: 935: LATD = (LATD & 0b11110000);
  3281  0319  0022               	movlb	2	; select bank2
  3282  031A  080F               	movf	15,w	;volatile
  3283  031B  39F0               	andlw	240
  3284  031C  008F               	movwf	15	;volatile
  3285                           
  3286                           ;PGM_5.c: 936: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  3287  031D  0020               	movlb	0	; select bank0
  3288  031E  0869               	movf	_Ausrichten_Stopp,w
  3289  031F  3191  218B  3181   	fcall	___lbtoft
  3290  0322  0020               	movlb	0	; select bank0
  3291  0323  0828               	movf	?___lbtoft,w
  3292  0324  00B2               	movwf	___ftmul@f2
  3293  0325  0829               	movf	?___lbtoft+1,w
  3294  0326  00B3               	movwf	___ftmul@f2+1
  3295  0327  082A               	movf	?___lbtoft+2,w
  3296  0328  00B4               	movwf	___ftmul@f2+2
  3297  0329  3040               	movlw	64
  3298  032A  00AF               	movwf	___ftmul@f1
  3299  032B  309C               	movlw	156
  3300  032C  00B0               	movwf	___ftmul@f1+1
  3301  032D  3045               	movlw	69
  3302  032E  00B1               	movwf	___ftmul@f1+2
  3303  032F  3197  274C  3181   	fcall	___ftmul
  3304  0332  0020               	movlb	0	; select bank0
  3305  0333  082F               	movf	?___ftmul,w
  3306  0334  00BF               	movwf	___fttol@f1
  3307  0335  0830               	movf	?___ftmul+1,w
  3308  0336  00C0               	movwf	___fttol@f1+1
  3309  0337  0831               	movf	?___ftmul+2,w
  3310  0338  00C1               	movwf	___fttol@f1+2
  3311  0339  3196  2620  3181   	fcall	___fttol
  3312  033C  0020               	movlb	0	; select bank0
  3313  033D  083F               	movf	?___fttol,w
  3314  033E  00CD               	movwf	??_vorne_ausrichten
  3315  033F  0840               	movf	?___fttol+1,w
  3316  0340  00CE               	movwf	??_vorne_ausrichten+1
  3317  0341  0841               	movf	?___fttol+2,w
  3318  0342  00CF               	movwf	??_vorne_ausrichten+2
  3319  0343  0842               	movf	?___fttol+3,w
  3320  0344  00D0               	movwf	??_vorne_ausrichten+3
  3321                           
  3322                           ;PGM_5.c: 937: opfer();
  3323  0345  3195  2599  3181   	fcall	_opfer
  3324                           
  3325                           ;PGM_5.c: 938: VAR_aus_zeit ++ ;
  3326  0348  3001               	movlw	1
  3327  0349  0020               	movlb	0	; select bank0
  3328  034A  07D4               	addwf	_VAR_aus_zeit,f
  3329  034B  3000               	movlw	0
  3330  034C  3DD5               	addwfc	_VAR_aus_zeit+1,f
  3331  034D                     l652:	
  3332  034D  304D               	movlw	77
  3333  034E  0021               	movlb	1	; select bank1
  3334  034F  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  3335  0350  1803               	skipnc
  3336  0351  2B5E               	goto	l5084
  3337  0352  0020               	movlb	0	; select bank0
  3338  0353  0855               	movf	_VAR_aus_zeit+1,w
  3339  0354  3A80               	xorlw	128
  3340  0355  00CD               	movwf	??_vorne_ausrichten
  3341  0356  308B               	movlw	139
  3342  0357  024D               	subwf	??_vorne_ausrichten,w
  3343  0358  1D03               	skipz
  3344  0359  2B5C               	goto	u5705
  3345  035A  30B9               	movlw	185
  3346  035B  0254               	subwf	_VAR_aus_zeit,w
  3347  035C                     u5705:	
  3348  035C  1C03               	skipc
  3349  035D  2AE9               	goto	l5070
  3350  035E                     l5084:	
  3351                           
  3352                           ;PGM_5.c: 939: }
  3353                           ;PGM_5.c: 940: VAR_aus_zeit = 0;
  3354  035E  0020               	movlb	0	; select bank0
  3355  035F  01D4               	clrf	_VAR_aus_zeit
  3356  0360  01D5               	clrf	_VAR_aus_zeit+1
  3357                           
  3358                           ;PGM_5.c: 941: while (A_D_Wert [3] < (A_D_Wert [0] +2 ) && (VAR_aus_zeit <= 3000)){
  3359  0361  2BC6               	goto	l657
  3360  0362                     l5086:	
  3361                           
  3362                           ;PGM_5.c: 942: Power_Ausrichten();
  3363  0362  3180  2003  3181   	fcall	_Power_Ausrichten
  3364                           
  3365                           ;PGM_5.c: 943: LATD = (LATD & 0b11110000)|0b00001000;
  3366  0365  0022               	movlb	2	; select bank2
  3367  0366  080F               	movf	15,w	;volatile
  3368  0367  39F0               	andlw	240
  3369  0368  3808               	iorlw	8
  3370  0369  008F               	movwf	15	;volatile
  3371                           
  3372                           ;PGM_5.c: 944: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  3373  036A  0020               	movlb	0	; select bank0
  3374  036B  086A               	movf	_Ausrichten_Fahren,w
  3375  036C  3191  218B  3181   	fcall	___lbtoft
  3376  036F  0020               	movlb	0	; select bank0
  3377  0370  0828               	movf	?___lbtoft,w
  3378  0371  00B2               	movwf	___ftmul@f2
  3379  0372  0829               	movf	?___lbtoft+1,w
  3380  0373  00B3               	movwf	___ftmul@f2+1
  3381  0374  082A               	movf	?___lbtoft+2,w
  3382  0375  00B4               	movwf	___ftmul@f2+2
  3383  0376  3040               	movlw	64
  3384  0377  00AF               	movwf	___ftmul@f1
  3385  0378  309C               	movlw	156
  3386  0379  00B0               	movwf	___ftmul@f1+1
  3387  037A  3045               	movlw	69
  3388  037B  00B1               	movwf	___ftmul@f1+2
  3389  037C  3197  274C  3181   	fcall	___ftmul
  3390  037F  0020               	movlb	0	; select bank0
  3391  0380  082F               	movf	?___ftmul,w
  3392  0381  00BF               	movwf	___fttol@f1
  3393  0382  0830               	movf	?___ftmul+1,w
  3394  0383  00C0               	movwf	___fttol@f1+1
  3395  0384  0831               	movf	?___ftmul+2,w
  3396  0385  00C1               	movwf	___fttol@f1+2
  3397  0386  3196  2620  3181   	fcall	___fttol
  3398  0389  0020               	movlb	0	; select bank0
  3399  038A  083F               	movf	?___fttol,w
  3400  038B  00CD               	movwf	??_vorne_ausrichten
  3401  038C  0840               	movf	?___fttol+1,w
  3402  038D  00CE               	movwf	??_vorne_ausrichten+1
  3403  038E  0841               	movf	?___fttol+2,w
  3404  038F  00CF               	movwf	??_vorne_ausrichten+2
  3405  0390  0842               	movf	?___fttol+3,w
  3406  0391  00D0               	movwf	??_vorne_ausrichten+3
  3407                           
  3408                           ;PGM_5.c: 945: LATD = (LATD & 0b11110000);
  3409  0392  0022               	movlb	2	; select bank2
  3410  0393  080F               	movf	15,w	;volatile
  3411  0394  39F0               	andlw	240
  3412  0395  008F               	movwf	15	;volatile
  3413                           
  3414                           ;PGM_5.c: 946: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  3415  0396  0020               	movlb	0	; select bank0
  3416  0397  0869               	movf	_Ausrichten_Stopp,w
  3417  0398  3191  218B  3181   	fcall	___lbtoft
  3418  039B  0020               	movlb	0	; select bank0
  3419  039C  0828               	movf	?___lbtoft,w
  3420  039D  00B2               	movwf	___ftmul@f2
  3421  039E  0829               	movf	?___lbtoft+1,w
  3422  039F  00B3               	movwf	___ftmul@f2+1
  3423  03A0  082A               	movf	?___lbtoft+2,w
  3424  03A1  00B4               	movwf	___ftmul@f2+2
  3425  03A2  3040               	movlw	64
  3426  03A3  00AF               	movwf	___ftmul@f1
  3427  03A4  309C               	movlw	156
  3428  03A5  00B0               	movwf	___ftmul@f1+1
  3429  03A6  3045               	movlw	69
  3430  03A7  00B1               	movwf	___ftmul@f1+2
  3431  03A8  3197  274C  3181   	fcall	___ftmul
  3432  03AB  0020               	movlb	0	; select bank0
  3433  03AC  082F               	movf	?___ftmul,w
  3434  03AD  00BF               	movwf	___fttol@f1
  3435  03AE  0830               	movf	?___ftmul+1,w
  3436  03AF  00C0               	movwf	___fttol@f1+1
  3437  03B0  0831               	movf	?___ftmul+2,w
  3438  03B1  00C1               	movwf	___fttol@f1+2
  3439  03B2  3196  2620  3181   	fcall	___fttol
  3440  03B5  0020               	movlb	0	; select bank0
  3441  03B6  083F               	movf	?___fttol,w
  3442  03B7  00CD               	movwf	??_vorne_ausrichten
  3443  03B8  0840               	movf	?___fttol+1,w
  3444  03B9  00CE               	movwf	??_vorne_ausrichten+1
  3445  03BA  0841               	movf	?___fttol+2,w
  3446  03BB  00CF               	movwf	??_vorne_ausrichten+2
  3447  03BC  0842               	movf	?___fttol+3,w
  3448  03BD  00D0               	movwf	??_vorne_ausrichten+3
  3449                           
  3450                           ;PGM_5.c: 947: opfer();
  3451  03BE  3195  2599  3181   	fcall	_opfer
  3452                           
  3453                           ;PGM_5.c: 948: VAR_aus_zeit ++ ;
  3454  03C1  3001               	movlw	1
  3455  03C2  0020               	movlb	0	; select bank0
  3456  03C3  07D4               	addwf	_VAR_aus_zeit,f
  3457  03C4  3000               	movlw	0
  3458  03C5  3DD5               	addwfc	_VAR_aus_zeit+1,f
  3459  03C6                     l657:	
  3460  03C6  0021               	movlb	1	; select bank1
  3461  03C7  0820               	movf	_A_D_Wert^(0+128),w
  3462  03C8  3E02               	addlw	2
  3463  03C9  0020               	movlb	0	; select bank0
  3464  03CA  00CD               	movwf	??_vorne_ausrichten
  3465  03CB  3000               	movlw	0
  3466  03CC  1803               	skipnc
  3467  03CD  3001               	movlw	1
  3468  03CE  00CE               	movwf	??_vorne_ausrichten+1
  3469  03CF  084E               	movf	??_vorne_ausrichten+1,w
  3470  03D0  3A80               	xorlw	128
  3471  03D1  3C80               	sublw	128
  3472  03D2  1D03               	skipz
  3473  03D3  2BD7               	goto	u5715
  3474  03D4  084D               	movf	??_vorne_ausrichten,w
  3475  03D5  0021               	movlb	1	; select bank1
  3476  03D6  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  3477  03D7                     u5715:	
  3478  03D7  1803               	skipnc
  3479  03D8  2BE5               	goto	l5100
  3480  03D9  0020               	movlb	0	; select bank0
  3481  03DA  0855               	movf	_VAR_aus_zeit+1,w
  3482  03DB  3A80               	xorlw	128
  3483  03DC  00CD               	movwf	??_vorne_ausrichten
  3484  03DD  308B               	movlw	139
  3485  03DE  024D               	subwf	??_vorne_ausrichten,w
  3486  03DF  1D03               	skipz
  3487  03E0  2BE3               	goto	u5725
  3488  03E1  30B9               	movlw	185
  3489  03E2  0254               	subwf	_VAR_aus_zeit,w
  3490  03E3                     u5725:	
  3491  03E3  1C03               	skipc
  3492  03E4  2B62               	goto	l5086
  3493  03E5                     l5100:	
  3494                           
  3495                           ;PGM_5.c: 949: }
  3496                           ;PGM_5.c: 950: VAR_aus_zeit = 0;
  3497  03E5  0020               	movlb	0	; select bank0
  3498  03E6  01D4               	clrf	_VAR_aus_zeit
  3499  03E7  01D5               	clrf	_VAR_aus_zeit+1
  3500                           
  3501                           ;PGM_5.c: 951: while(A_D_Wert [3] > (A_D_Wert [0] + 2)&& (VAR_aus_zeit <= 3000)){
  3502  03E8  2C4D               	goto	l662
  3503  03E9                     l5102:	
  3504                           
  3505                           ;PGM_5.c: 952: Power_Ausrichten();
  3506  03E9  3180  2003  3181   	fcall	_Power_Ausrichten
  3507                           
  3508                           ;PGM_5.c: 953: LATD = (LATD & 0b11110000)|0b00000010;
  3509  03EC  0022               	movlb	2	; select bank2
  3510  03ED  080F               	movf	15,w	;volatile
  3511  03EE  39F0               	andlw	240
  3512  03EF  3802               	iorlw	2
  3513  03F0  008F               	movwf	15	;volatile
  3514                           
  3515                           ;PGM_5.c: 954: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  3516  03F1  0020               	movlb	0	; select bank0
  3517  03F2  086A               	movf	_Ausrichten_Fahren,w
  3518  03F3  3191  218B  3181   	fcall	___lbtoft
  3519  03F6  0020               	movlb	0	; select bank0
  3520  03F7  0828               	movf	?___lbtoft,w
  3521  03F8  00B2               	movwf	___ftmul@f2
  3522  03F9  0829               	movf	?___lbtoft+1,w
  3523  03FA  00B3               	movwf	___ftmul@f2+1
  3524  03FB  082A               	movf	?___lbtoft+2,w
  3525  03FC  00B4               	movwf	___ftmul@f2+2
  3526  03FD  3040               	movlw	64
  3527  03FE  00AF               	movwf	___ftmul@f1
  3528  03FF  309C               	movlw	156
  3529  0400  00B0               	movwf	___ftmul@f1+1
  3530  0401  3045               	movlw	69
  3531  0402  00B1               	movwf	___ftmul@f1+2
  3532  0403  3197  274C  3181   	fcall	___ftmul
  3533  0406  0020               	movlb	0	; select bank0
  3534  0407  082F               	movf	?___ftmul,w
  3535  0408  00BF               	movwf	___fttol@f1
  3536  0409  0830               	movf	?___ftmul+1,w
  3537  040A  00C0               	movwf	___fttol@f1+1
  3538  040B  0831               	movf	?___ftmul+2,w
  3539  040C  00C1               	movwf	___fttol@f1+2
  3540  040D  3196  2620  3181   	fcall	___fttol
  3541  0410  0020               	movlb	0	; select bank0
  3542  0411  083F               	movf	?___fttol,w
  3543  0412  00CD               	movwf	??_vorne_ausrichten
  3544  0413  0840               	movf	?___fttol+1,w
  3545  0414  00CE               	movwf	??_vorne_ausrichten+1
  3546  0415  0841               	movf	?___fttol+2,w
  3547  0416  00CF               	movwf	??_vorne_ausrichten+2
  3548  0417  0842               	movf	?___fttol+3,w
  3549  0418  00D0               	movwf	??_vorne_ausrichten+3
  3550                           
  3551                           ;PGM_5.c: 955: LATD = (LATD & 0b11110000);
  3552  0419  0022               	movlb	2	; select bank2
  3553  041A  080F               	movf	15,w	;volatile
  3554  041B  39F0               	andlw	240
  3555  041C  008F               	movwf	15	;volatile
  3556                           
  3557                           ;PGM_5.c: 956: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  3558  041D  0020               	movlb	0	; select bank0
  3559  041E  0869               	movf	_Ausrichten_Stopp,w
  3560  041F  3191  218B  3181   	fcall	___lbtoft
  3561  0422  0020               	movlb	0	; select bank0
  3562  0423  0828               	movf	?___lbtoft,w
  3563  0424  00B2               	movwf	___ftmul@f2
  3564  0425  0829               	movf	?___lbtoft+1,w
  3565  0426  00B3               	movwf	___ftmul@f2+1
  3566  0427  082A               	movf	?___lbtoft+2,w
  3567  0428  00B4               	movwf	___ftmul@f2+2
  3568  0429  3040               	movlw	64
  3569  042A  00AF               	movwf	___ftmul@f1
  3570  042B  309C               	movlw	156
  3571  042C  00B0               	movwf	___ftmul@f1+1
  3572  042D  3045               	movlw	69
  3573  042E  00B1               	movwf	___ftmul@f1+2
  3574  042F  3197  274C  3181   	fcall	___ftmul
  3575  0432  0020               	movlb	0	; select bank0
  3576  0433  082F               	movf	?___ftmul,w
  3577  0434  00BF               	movwf	___fttol@f1
  3578  0435  0830               	movf	?___ftmul+1,w
  3579  0436  00C0               	movwf	___fttol@f1+1
  3580  0437  0831               	movf	?___ftmul+2,w
  3581  0438  00C1               	movwf	___fttol@f1+2
  3582  0439  3196  2620  3181   	fcall	___fttol
  3583  043C  0020               	movlb	0	; select bank0
  3584  043D  083F               	movf	?___fttol,w
  3585  043E  00CD               	movwf	??_vorne_ausrichten
  3586  043F  0840               	movf	?___fttol+1,w
  3587  0440  00CE               	movwf	??_vorne_ausrichten+1
  3588  0441  0841               	movf	?___fttol+2,w
  3589  0442  00CF               	movwf	??_vorne_ausrichten+2
  3590  0443  0842               	movf	?___fttol+3,w
  3591  0444  00D0               	movwf	??_vorne_ausrichten+3
  3592                           
  3593                           ;PGM_5.c: 957: opfer();
  3594  0445  3195  2599  3181   	fcall	_opfer
  3595                           
  3596                           ;PGM_5.c: 958: VAR_aus_zeit ++ ;
  3597  0448  3001               	movlw	1
  3598  0449  0020               	movlb	0	; select bank0
  3599  044A  07D4               	addwf	_VAR_aus_zeit,f
  3600  044B  3000               	movlw	0
  3601  044C  3DD5               	addwfc	_VAR_aus_zeit+1,f
  3602  044D                     l662:	
  3603  044D  0021               	movlb	1	; select bank1
  3604  044E  0820               	movf	_A_D_Wert^(0+128),w
  3605  044F  3E02               	addlw	2
  3606  0450  0020               	movlb	0	; select bank0
  3607  0451  00CD               	movwf	??_vorne_ausrichten
  3608  0452  3000               	movlw	0
  3609  0453  1803               	skipnc
  3610  0454  3001               	movlw	1
  3611  0455  00CE               	movwf	??_vorne_ausrichten+1
  3612  0456  084E               	movf	??_vorne_ausrichten+1,w
  3613  0457  3A80               	xorlw	128
  3614  0458  00CF               	movwf	??_vorne_ausrichten+2
  3615  0459  3080               	movlw	128
  3616  045A  024F               	subwf	??_vorne_ausrichten+2,w
  3617  045B  1D03               	skipz
  3618  045C  2C61               	goto	u5735
  3619  045D  0021               	movlb	1	; select bank1
  3620  045E  0823               	movf	(_A_D_Wert^(0+128)+3),w
  3621  045F  0020               	movlb	0	; select bank0
  3622  0460  024D               	subwf	??_vorne_ausrichten,w
  3623  0461                     u5735:	
  3624  0461  1803               	skipnc
  3625  0462  2C6F               	goto	l5116
  3626  0463  0020               	movlb	0	; select bank0
  3627  0464  0855               	movf	_VAR_aus_zeit+1,w
  3628  0465  3A80               	xorlw	128
  3629  0466  00CD               	movwf	??_vorne_ausrichten
  3630  0467  308B               	movlw	139
  3631  0468  024D               	subwf	??_vorne_ausrichten,w
  3632  0469  1D03               	skipz
  3633  046A  2C6D               	goto	u5745
  3634  046B  30B9               	movlw	185
  3635  046C  0254               	subwf	_VAR_aus_zeit,w
  3636  046D                     u5745:	
  3637  046D  1C03               	skipc
  3638  046E  2BE9               	goto	l5102
  3639  046F                     l5116:	
  3640                           
  3641                           ;PGM_5.c: 959: }
  3642                           ;PGM_5.c: 960: VAR_aus_zeit = 0;
  3643  046F  0020               	movlb	0	; select bank0
  3644  0470  01D4               	clrf	_VAR_aus_zeit
  3645  0471  01D5               	clrf	_VAR_aus_zeit+1
  3646                           
  3647                           ;PGM_5.c: 961: while ((A_D_Wert [3] < 77)&&(VAR_aus_zeit <= 3000)){
  3648  0472  2CD7               	goto	l667
  3649  0473                     l5118:	
  3650                           
  3651                           ;PGM_5.c: 962: Power_Ausrichten();
  3652  0473  3180  2003  3181   	fcall	_Power_Ausrichten
  3653                           
  3654                           ;PGM_5.c: 963: LATD = (LATD & 0b11110000)|0b00001010;
  3655  0476  0022               	movlb	2	; select bank2
  3656  0477  080F               	movf	15,w	;volatile
  3657  0478  39F0               	andlw	240
  3658  0479  380A               	iorlw	10
  3659  047A  008F               	movwf	15	;volatile
  3660                           
  3661                           ;PGM_5.c: 964: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  3662  047B  0020               	movlb	0	; select bank0
  3663  047C  086A               	movf	_Ausrichten_Fahren,w
  3664  047D  3191  218B  3181   	fcall	___lbtoft
  3665  0480  0020               	movlb	0	; select bank0
  3666  0481  0828               	movf	?___lbtoft,w
  3667  0482  00B2               	movwf	___ftmul@f2
  3668  0483  0829               	movf	?___lbtoft+1,w
  3669  0484  00B3               	movwf	___ftmul@f2+1
  3670  0485  082A               	movf	?___lbtoft+2,w
  3671  0486  00B4               	movwf	___ftmul@f2+2
  3672  0487  3040               	movlw	64
  3673  0488  00AF               	movwf	___ftmul@f1
  3674  0489  309C               	movlw	156
  3675  048A  00B0               	movwf	___ftmul@f1+1
  3676  048B  3045               	movlw	69
  3677  048C  00B1               	movwf	___ftmul@f1+2
  3678  048D  3197  274C  3181   	fcall	___ftmul
  3679  0490  0020               	movlb	0	; select bank0
  3680  0491  082F               	movf	?___ftmul,w
  3681  0492  00BF               	movwf	___fttol@f1
  3682  0493  0830               	movf	?___ftmul+1,w
  3683  0494  00C0               	movwf	___fttol@f1+1
  3684  0495  0831               	movf	?___ftmul+2,w
  3685  0496  00C1               	movwf	___fttol@f1+2
  3686  0497  3196  2620  3181   	fcall	___fttol
  3687  049A  0020               	movlb	0	; select bank0
  3688  049B  083F               	movf	?___fttol,w
  3689  049C  00CD               	movwf	??_vorne_ausrichten
  3690  049D  0840               	movf	?___fttol+1,w
  3691  049E  00CE               	movwf	??_vorne_ausrichten+1
  3692  049F  0841               	movf	?___fttol+2,w
  3693  04A0  00CF               	movwf	??_vorne_ausrichten+2
  3694  04A1  0842               	movf	?___fttol+3,w
  3695  04A2  00D0               	movwf	??_vorne_ausrichten+3
  3696                           
  3697                           ;PGM_5.c: 965: LATD = (LATD & 0b11110000);
  3698  04A3  0022               	movlb	2	; select bank2
  3699  04A4  080F               	movf	15,w	;volatile
  3700  04A5  39F0               	andlw	240
  3701  04A6  008F               	movwf	15	;volatile
  3702                           
  3703                           ;PGM_5.c: 966: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  3704  04A7  0020               	movlb	0	; select bank0
  3705  04A8  0869               	movf	_Ausrichten_Stopp,w
  3706  04A9  3191  218B  3181   	fcall	___lbtoft
  3707  04AC  0020               	movlb	0	; select bank0
  3708  04AD  0828               	movf	?___lbtoft,w
  3709  04AE  00B2               	movwf	___ftmul@f2
  3710  04AF  0829               	movf	?___lbtoft+1,w
  3711  04B0  00B3               	movwf	___ftmul@f2+1
  3712  04B1  082A               	movf	?___lbtoft+2,w
  3713  04B2  00B4               	movwf	___ftmul@f2+2
  3714  04B3  3040               	movlw	64
  3715  04B4  00AF               	movwf	___ftmul@f1
  3716  04B5  309C               	movlw	156
  3717  04B6  00B0               	movwf	___ftmul@f1+1
  3718  04B7  3045               	movlw	69
  3719  04B8  00B1               	movwf	___ftmul@f1+2
  3720  04B9  3197  274C  3181   	fcall	___ftmul
  3721  04BC  0020               	movlb	0	; select bank0
  3722  04BD  082F               	movf	?___ftmul,w
  3723  04BE  00BF               	movwf	___fttol@f1
  3724  04BF  0830               	movf	?___ftmul+1,w
  3725  04C0  00C0               	movwf	___fttol@f1+1
  3726  04C1  0831               	movf	?___ftmul+2,w
  3727  04C2  00C1               	movwf	___fttol@f1+2
  3728  04C3  3196  2620  3181   	fcall	___fttol
  3729  04C6  0020               	movlb	0	; select bank0
  3730  04C7  083F               	movf	?___fttol,w
  3731  04C8  00CD               	movwf	??_vorne_ausrichten
  3732  04C9  0840               	movf	?___fttol+1,w
  3733  04CA  00CE               	movwf	??_vorne_ausrichten+1
  3734  04CB  0841               	movf	?___fttol+2,w
  3735  04CC  00CF               	movwf	??_vorne_ausrichten+2
  3736  04CD  0842               	movf	?___fttol+3,w
  3737  04CE  00D0               	movwf	??_vorne_ausrichten+3
  3738                           
  3739                           ;PGM_5.c: 967: opfer();
  3740  04CF  3195  2599  3181   	fcall	_opfer
  3741                           
  3742                           ;PGM_5.c: 968: VAR_aus_zeit ++ ;
  3743  04D2  3001               	movlw	1
  3744  04D3  0020               	movlb	0	; select bank0
  3745  04D4  07D4               	addwf	_VAR_aus_zeit,f
  3746  04D5  3000               	movlw	0
  3747  04D6  3DD5               	addwfc	_VAR_aus_zeit+1,f
  3748  04D7                     l667:	
  3749  04D7  304D               	movlw	77
  3750  04D8  0021               	movlb	1	; select bank1
  3751  04D9  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  3752  04DA  1803               	skipnc
  3753  04DB  2CE8               	goto	l5132
  3754  04DC  0020               	movlb	0	; select bank0
  3755  04DD  0855               	movf	_VAR_aus_zeit+1,w
  3756  04DE  3A80               	xorlw	128
  3757  04DF  00CD               	movwf	??_vorne_ausrichten
  3758  04E0  308B               	movlw	139
  3759  04E1  024D               	subwf	??_vorne_ausrichten,w
  3760  04E2  1D03               	skipz
  3761  04E3  2CE6               	goto	u5765
  3762  04E4  30B9               	movlw	185
  3763  04E5  0254               	subwf	_VAR_aus_zeit,w
  3764  04E6                     u5765:	
  3765  04E6  1C03               	skipc
  3766  04E7  2C73               	goto	l5118
  3767  04E8                     l5132:	
  3768                           
  3769                           ;PGM_5.c: 969: }
  3770                           ;PGM_5.c: 970: VAR_aus_zeit = 0;
  3771  04E8  0020               	movlb	0	; select bank0
  3772  04E9  01D4               	clrf	_VAR_aus_zeit
  3773  04EA  01D5               	clrf	_VAR_aus_zeit+1
  3774  04EB                     l672:	
  3775                           ;PGM_5.c: 971: while ((A_D_Wert [3] > 81)&&(!VAR_aus_zeit <= 3000)){
  3776                           
  3777  04EB  3052               	movlw	82
  3778  04EC  0021               	movlb	1	; select bank1
  3779  04ED  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  3780  04EE  1C03               	btfss	3,0
  3781  04EF  0008               	return
  3782                           
  3783                           ;PGM_5.c: 972: Power_Ausrichten();
  3784  04F0  3180  2003  3181   	fcall	_Power_Ausrichten
  3785                           
  3786                           ;PGM_5.c: 973: LATD = (LATD & 0b11110000)|0b00000101;
  3787  04F3  0022               	movlb	2	; select bank2
  3788  04F4  080F               	movf	15,w	;volatile
  3789  04F5  39F0               	andlw	240
  3790  04F6  3805               	iorlw	5
  3791  04F7  008F               	movwf	15	;volatile
  3792                           
  3793                           ;PGM_5.c: 974: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  3794  04F8  0020               	movlb	0	; select bank0
  3795  04F9  086A               	movf	_Ausrichten_Fahren,w
  3796  04FA  3191  218B  3181   	fcall	___lbtoft
  3797  04FD  0020               	movlb	0	; select bank0
  3798  04FE  0828               	movf	?___lbtoft,w
  3799  04FF  00B2               	movwf	___ftmul@f2
  3800  0500  0829               	movf	?___lbtoft+1,w
  3801  0501  00B3               	movwf	___ftmul@f2+1
  3802  0502  082A               	movf	?___lbtoft+2,w
  3803  0503  00B4               	movwf	___ftmul@f2+2
  3804  0504  3040               	movlw	64
  3805  0505  00AF               	movwf	___ftmul@f1
  3806  0506  309C               	movlw	156
  3807  0507  00B0               	movwf	___ftmul@f1+1
  3808  0508  3045               	movlw	69
  3809  0509  00B1               	movwf	___ftmul@f1+2
  3810  050A  3197  274C  3181   	fcall	___ftmul
  3811  050D  0020               	movlb	0	; select bank0
  3812  050E  082F               	movf	?___ftmul,w
  3813  050F  00BF               	movwf	___fttol@f1
  3814  0510  0830               	movf	?___ftmul+1,w
  3815  0511  00C0               	movwf	___fttol@f1+1
  3816  0512  0831               	movf	?___ftmul+2,w
  3817  0513  00C1               	movwf	___fttol@f1+2
  3818  0514  3196  2620  3181   	fcall	___fttol
  3819  0517  0020               	movlb	0	; select bank0
  3820  0518  083F               	movf	?___fttol,w
  3821  0519  00CD               	movwf	??_vorne_ausrichten
  3822  051A  0840               	movf	?___fttol+1,w
  3823  051B  00CE               	movwf	??_vorne_ausrichten+1
  3824  051C  0841               	movf	?___fttol+2,w
  3825  051D  00CF               	movwf	??_vorne_ausrichten+2
  3826  051E  0842               	movf	?___fttol+3,w
  3827  051F  00D0               	movwf	??_vorne_ausrichten+3
  3828                           
  3829                           ;PGM_5.c: 975: LATD = (LATD & 0b11110000);
  3830  0520  0022               	movlb	2	; select bank2
  3831  0521  080F               	movf	15,w	;volatile
  3832  0522  39F0               	andlw	240
  3833  0523  008F               	movwf	15	;volatile
  3834                           
  3835                           ;PGM_5.c: 976: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  3836  0524  0020               	movlb	0	; select bank0
  3837  0525  0869               	movf	_Ausrichten_Stopp,w
  3838  0526  3191  218B  3181   	fcall	___lbtoft
  3839  0529  0020               	movlb	0	; select bank0
  3840  052A  0828               	movf	?___lbtoft,w
  3841  052B  00B2               	movwf	___ftmul@f2
  3842  052C  0829               	movf	?___lbtoft+1,w
  3843  052D  00B3               	movwf	___ftmul@f2+1
  3844  052E  082A               	movf	?___lbtoft+2,w
  3845  052F  00B4               	movwf	___ftmul@f2+2
  3846  0530  3040               	movlw	64
  3847  0531  00AF               	movwf	___ftmul@f1
  3848  0532  309C               	movlw	156
  3849  0533  00B0               	movwf	___ftmul@f1+1
  3850  0534  3045               	movlw	69
  3851  0535  00B1               	movwf	___ftmul@f1+2
  3852  0536  3197  274C  3181   	fcall	___ftmul
  3853  0539  0020               	movlb	0	; select bank0
  3854  053A  082F               	movf	?___ftmul,w
  3855  053B  00BF               	movwf	___fttol@f1
  3856  053C  0830               	movf	?___ftmul+1,w
  3857  053D  00C0               	movwf	___fttol@f1+1
  3858  053E  0831               	movf	?___ftmul+2,w
  3859  053F  00C1               	movwf	___fttol@f1+2
  3860  0540  3196  2620  3181   	fcall	___fttol
  3861  0543  0020               	movlb	0	; select bank0
  3862  0544  083F               	movf	?___fttol,w
  3863  0545  00CD               	movwf	??_vorne_ausrichten
  3864  0546  0840               	movf	?___fttol+1,w
  3865  0547  00CE               	movwf	??_vorne_ausrichten+1
  3866  0548  0841               	movf	?___fttol+2,w
  3867  0549  00CF               	movwf	??_vorne_ausrichten+2
  3868  054A  0842               	movf	?___fttol+3,w
  3869  054B  00D0               	movwf	??_vorne_ausrichten+3
  3870                           
  3871                           ;PGM_5.c: 977: opfer();
  3872  054C  3195  2599  3181   	fcall	_opfer
  3873                           
  3874                           ;PGM_5.c: 978: VAR_aus_zeit ++ ;
  3875  054F  3001               	movlw	1
  3876  0550  0020               	movlb	0	; select bank0
  3877  0551  07D4               	addwf	_VAR_aus_zeit,f
  3878  0552  3000               	movlw	0
  3879  0553  3DD5               	addwfc	_VAR_aus_zeit+1,f
  3880  0554  2CEB               	goto	l672
  3881  0555                     __end_of_vorne_ausrichten:	
  3882                           
  3883                           	psect	text8
  3884  0BE8                     __ptext8:	
  3885 ;; *************** function _rechts_ausrichten *****************
  3886 ;; Defined at:
  3887 ;;		line 1072 in file "PGM_5.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;		None
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0, pclath, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3903 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3904 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;Total ram usage:        4 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    6
  3908 ;; This function calls:
  3909 ;;		_Power_Ausrichten
  3910 ;;		___ftmul
  3911 ;;		___fttol
  3912 ;;		___lbtoft
  3913 ;;		_opfer
  3914 ;; This function is called by:
  3915 ;;		_ausrichten
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           
  3920                           ;psect for function _rechts_ausrichten
  3921  0BE8                     _rechts_ausrichten:	
  3922                           
  3923                           ;PGM_5.c: 1073: if (( A_D_Wert [2] > 63 )&&( A_D_Wert [5] > 63 )) {
  3924                           
  3925                           ;incstack = 0
  3926                           ; Regs used in _rechts_ausrichten: [wreg+status,2+status,0+pclath+cstack]
  3927  0BE8  3040               	movlw	64
  3928  0BE9  0021               	movlb	1	; select bank1
  3929  0BEA  0222               	subwf	(_A_D_Wert^(0+128)+2),w
  3930  0BEB  1C03               	skipc
  3931  0BEC  0008               	return
  3932  0BED  3040               	movlw	64
  3933  0BEE  0225               	subwf	(_A_D_Wert^(0+128)+5),w
  3934  0BEF  1C03               	skipc
  3935  0BF0  0008               	return
  3936                           
  3937                           ;PGM_5.c: 1074: VAR_aus_zeit = 0;
  3938  0BF1  0020               	movlb	0	; select bank0
  3939  0BF2  01D4               	clrf	_VAR_aus_zeit
  3940  0BF3  01D5               	clrf	_VAR_aus_zeit+1
  3941                           
  3942                           ;PGM_5.c: 1075: while ((A_D_Wert [2] > A_D_Wert [5] +2 ) && (VAR_aus_zeit <= 3000)){
  3943  0BF4  2C59               	goto	l727
  3944  0BF5                     l4980:	
  3945                           
  3946                           ;PGM_5.c: 1076: Power_Ausrichten();
  3947  0BF5  3180  2003  318B   	fcall	_Power_Ausrichten
  3948                           
  3949                           ;PGM_5.c: 1077: LATD = (LATD & 0b11110000)|0b00001000;
  3950  0BF8  0022               	movlb	2	; select bank2
  3951  0BF9  080F               	movf	15,w	;volatile
  3952  0BFA  39F0               	andlw	240
  3953  0BFB  3808               	iorlw	8
  3954  0BFC  008F               	movwf	15	;volatile
  3955                           
  3956                           ;PGM_5.c: 1078: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  3957  0BFD  0020               	movlb	0	; select bank0
  3958  0BFE  086A               	movf	_Ausrichten_Fahren,w
  3959  0BFF  3191  218B  318B   	fcall	___lbtoft
  3960  0C02  0020               	movlb	0	; select bank0
  3961  0C03  0828               	movf	?___lbtoft,w
  3962  0C04  00B2               	movwf	___ftmul@f2
  3963  0C05  0829               	movf	?___lbtoft+1,w
  3964  0C06  00B3               	movwf	___ftmul@f2+1
  3965  0C07  082A               	movf	?___lbtoft+2,w
  3966  0C08  00B4               	movwf	___ftmul@f2+2
  3967  0C09  3040               	movlw	64
  3968  0C0A  00AF               	movwf	___ftmul@f1
  3969  0C0B  309C               	movlw	156
  3970  0C0C  00B0               	movwf	___ftmul@f1+1
  3971  0C0D  3045               	movlw	69
  3972  0C0E  00B1               	movwf	___ftmul@f1+2
  3973  0C0F  3197  274C  318B   	fcall	___ftmul
  3974  0C12  0020               	movlb	0	; select bank0
  3975  0C13  082F               	movf	?___ftmul,w
  3976  0C14  00BF               	movwf	___fttol@f1
  3977  0C15  0830               	movf	?___ftmul+1,w
  3978  0C16  00C0               	movwf	___fttol@f1+1
  3979  0C17  0831               	movf	?___ftmul+2,w
  3980  0C18  00C1               	movwf	___fttol@f1+2
  3981  0C19  3196  2620  318B   	fcall	___fttol
  3982  0C1C  0020               	movlb	0	; select bank0
  3983  0C1D  083F               	movf	?___fttol,w
  3984  0C1E  00CD               	movwf	??_rechts_ausrichten
  3985  0C1F  0840               	movf	?___fttol+1,w
  3986  0C20  00CE               	movwf	??_rechts_ausrichten+1
  3987  0C21  0841               	movf	?___fttol+2,w
  3988  0C22  00CF               	movwf	??_rechts_ausrichten+2
  3989  0C23  0842               	movf	?___fttol+3,w
  3990  0C24  00D0               	movwf	??_rechts_ausrichten+3
  3991                           
  3992                           ;PGM_5.c: 1079: LATD = (LATD & 0b11110000);
  3993  0C25  0022               	movlb	2	; select bank2
  3994  0C26  080F               	movf	15,w	;volatile
  3995  0C27  39F0               	andlw	240
  3996  0C28  008F               	movwf	15	;volatile
  3997                           
  3998                           ;PGM_5.c: 1080: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  3999  0C29  0020               	movlb	0	; select bank0
  4000  0C2A  0869               	movf	_Ausrichten_Stopp,w
  4001  0C2B  3191  218B  318B   	fcall	___lbtoft
  4002  0C2E  0020               	movlb	0	; select bank0
  4003  0C2F  0828               	movf	?___lbtoft,w
  4004  0C30  00B2               	movwf	___ftmul@f2
  4005  0C31  0829               	movf	?___lbtoft+1,w
  4006  0C32  00B3               	movwf	___ftmul@f2+1
  4007  0C33  082A               	movf	?___lbtoft+2,w
  4008  0C34  00B4               	movwf	___ftmul@f2+2
  4009  0C35  3040               	movlw	64
  4010  0C36  00AF               	movwf	___ftmul@f1
  4011  0C37  309C               	movlw	156
  4012  0C38  00B0               	movwf	___ftmul@f1+1
  4013  0C39  3045               	movlw	69
  4014  0C3A  00B1               	movwf	___ftmul@f1+2
  4015  0C3B  3197  274C  318B   	fcall	___ftmul
  4016  0C3E  0020               	movlb	0	; select bank0
  4017  0C3F  082F               	movf	?___ftmul,w
  4018  0C40  00BF               	movwf	___fttol@f1
  4019  0C41  0830               	movf	?___ftmul+1,w
  4020  0C42  00C0               	movwf	___fttol@f1+1
  4021  0C43  0831               	movf	?___ftmul+2,w
  4022  0C44  00C1               	movwf	___fttol@f1+2
  4023  0C45  3196  2620  318B   	fcall	___fttol
  4024  0C48  0020               	movlb	0	; select bank0
  4025  0C49  083F               	movf	?___fttol,w
  4026  0C4A  00CD               	movwf	??_rechts_ausrichten
  4027  0C4B  0840               	movf	?___fttol+1,w
  4028  0C4C  00CE               	movwf	??_rechts_ausrichten+1
  4029  0C4D  0841               	movf	?___fttol+2,w
  4030  0C4E  00CF               	movwf	??_rechts_ausrichten+2
  4031  0C4F  0842               	movf	?___fttol+3,w
  4032  0C50  00D0               	movwf	??_rechts_ausrichten+3
  4033                           
  4034                           ;PGM_5.c: 1081: opfer();
  4035  0C51  3195  2599  318B   	fcall	_opfer
  4036                           
  4037                           ;PGM_5.c: 1082: VAR_aus_zeit ++ ;
  4038  0C54  3001               	movlw	1
  4039  0C55  0020               	movlb	0	; select bank0
  4040  0C56  07D4               	addwf	_VAR_aus_zeit,f
  4041  0C57  3000               	movlw	0
  4042  0C58  3DD5               	addwfc	_VAR_aus_zeit+1,f
  4043  0C59                     l727:	
  4044  0C59  0021               	movlb	1	; select bank1
  4045  0C5A  0825               	movf	(_A_D_Wert^(0+128)+5),w
  4046  0C5B  3E02               	addlw	2
  4047  0C5C  0020               	movlb	0	; select bank0
  4048  0C5D  00CD               	movwf	??_rechts_ausrichten
  4049  0C5E  3000               	movlw	0
  4050  0C5F  1803               	skipnc
  4051  0C60  3001               	movlw	1
  4052  0C61  00CE               	movwf	??_rechts_ausrichten+1
  4053  0C62  084E               	movf	??_rechts_ausrichten+1,w
  4054  0C63  3A80               	xorlw	128
  4055  0C64  00CF               	movwf	??_rechts_ausrichten+2
  4056  0C65  3080               	movlw	128
  4057  0C66  024F               	subwf	??_rechts_ausrichten+2,w
  4058  0C67  1D03               	skipz
  4059  0C68  2C6D               	goto	u5525
  4060  0C69  0021               	movlb	1	; select bank1
  4061  0C6A  0822               	movf	(_A_D_Wert^(0+128)+2),w
  4062  0C6B  0020               	movlb	0	; select bank0
  4063  0C6C  024D               	subwf	??_rechts_ausrichten,w
  4064  0C6D                     u5525:	
  4065  0C6D  1803               	skipnc
  4066  0C6E  2C7B               	goto	l4994
  4067  0C6F  0020               	movlb	0	; select bank0
  4068  0C70  0855               	movf	_VAR_aus_zeit+1,w
  4069  0C71  3A80               	xorlw	128
  4070  0C72  00CD               	movwf	??_rechts_ausrichten
  4071  0C73  308B               	movlw	139
  4072  0C74  024D               	subwf	??_rechts_ausrichten,w
  4073  0C75  1D03               	skipz
  4074  0C76  2C79               	goto	u5535
  4075  0C77  30B9               	movlw	185
  4076  0C78  0254               	subwf	_VAR_aus_zeit,w
  4077  0C79                     u5535:	
  4078  0C79  1C03               	skipc
  4079  0C7A  2BF5               	goto	l4980
  4080  0C7B                     l4994:	
  4081                           
  4082                           ;PGM_5.c: 1083: }
  4083                           ;PGM_5.c: 1084: VAR_aus_zeit = 0;
  4084  0C7B  0020               	movlb	0	; select bank0
  4085  0C7C  01D4               	clrf	_VAR_aus_zeit
  4086  0C7D  01D5               	clrf	_VAR_aus_zeit+1
  4087  0C7E                     l732:	
  4088                           ;PGM_5.c: 1085: while ((A_D_Wert [2] < A_D_Wert [5] +2 ) && (VAR_aus_zeit <= 3000)){
  4089                           
  4090  0C7E  0021               	movlb	1	; select bank1
  4091  0C7F  0825               	movf	(_A_D_Wert^(0+128)+5),w
  4092  0C80  3E02               	addlw	2
  4093  0C81  0020               	movlb	0	; select bank0
  4094  0C82  00CD               	movwf	??_rechts_ausrichten
  4095  0C83  3000               	movlw	0
  4096  0C84  1803               	skipnc
  4097  0C85  3001               	movlw	1
  4098  0C86  00CE               	movwf	??_rechts_ausrichten+1
  4099  0C87  084E               	movf	??_rechts_ausrichten+1,w
  4100  0C88  3A80               	xorlw	128
  4101  0C89  3C80               	sublw	128
  4102  0C8A  1D03               	skipz
  4103  0C8B  2C8F               	goto	u5545
  4104  0C8C  084D               	movf	??_rechts_ausrichten,w
  4105  0C8D  0021               	movlb	1	; select bank1
  4106  0C8E  0222               	subwf	(_A_D_Wert^(0+128)+2),w
  4107  0C8F                     u5545:	
  4108  0C8F  1803               	skipnc
  4109  0C90  0008               	return
  4110  0C91  0020               	movlb	0	; select bank0
  4111  0C92  0855               	movf	_VAR_aus_zeit+1,w
  4112  0C93  3A80               	xorlw	128
  4113  0C94  00CD               	movwf	??_rechts_ausrichten
  4114  0C95  308B               	movlw	139
  4115  0C96  024D               	subwf	??_rechts_ausrichten,w
  4116  0C97  1D03               	skipz
  4117  0C98  2C9B               	goto	u5555
  4118  0C99  30B9               	movlw	185
  4119  0C9A  0254               	subwf	_VAR_aus_zeit,w
  4120  0C9B                     u5555:	
  4121  0C9B  1803               	btfsc	3,0
  4122  0C9C  0008               	return
  4123                           
  4124                           ;PGM_5.c: 1086: Power_Ausrichten();
  4125  0C9D  3180  2003  318B   	fcall	_Power_Ausrichten
  4126                           
  4127                           ;PGM_5.c: 1087: LATD = (LATD & 0b11110000)|0b00000010 ;
  4128  0CA0  0022               	movlb	2	; select bank2
  4129  0CA1  080F               	movf	15,w	;volatile
  4130  0CA2  39F0               	andlw	240
  4131  0CA3  3802               	iorlw	2
  4132  0CA4  008F               	movwf	15	;volatile
  4133                           
  4134                           ;PGM_5.c: 1088: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  4135  0CA5  0020               	movlb	0	; select bank0
  4136  0CA6  086A               	movf	_Ausrichten_Fahren,w
  4137  0CA7  3191  218B  318B   	fcall	___lbtoft
  4138  0CAA  0020               	movlb	0	; select bank0
  4139  0CAB  0828               	movf	?___lbtoft,w
  4140  0CAC  00B2               	movwf	___ftmul@f2
  4141  0CAD  0829               	movf	?___lbtoft+1,w
  4142  0CAE  00B3               	movwf	___ftmul@f2+1
  4143  0CAF  082A               	movf	?___lbtoft+2,w
  4144  0CB0  00B4               	movwf	___ftmul@f2+2
  4145  0CB1  3040               	movlw	64
  4146  0CB2  00AF               	movwf	___ftmul@f1
  4147  0CB3  309C               	movlw	156
  4148  0CB4  00B0               	movwf	___ftmul@f1+1
  4149  0CB5  3045               	movlw	69
  4150  0CB6  00B1               	movwf	___ftmul@f1+2
  4151  0CB7  3197  274C  318B   	fcall	___ftmul
  4152  0CBA  0020               	movlb	0	; select bank0
  4153  0CBB  082F               	movf	?___ftmul,w
  4154  0CBC  00BF               	movwf	___fttol@f1
  4155  0CBD  0830               	movf	?___ftmul+1,w
  4156  0CBE  00C0               	movwf	___fttol@f1+1
  4157  0CBF  0831               	movf	?___ftmul+2,w
  4158  0CC0  00C1               	movwf	___fttol@f1+2
  4159  0CC1  3196  2620  318B   	fcall	___fttol
  4160  0CC4  0020               	movlb	0	; select bank0
  4161  0CC5  083F               	movf	?___fttol,w
  4162  0CC6  00CD               	movwf	??_rechts_ausrichten
  4163  0CC7  0840               	movf	?___fttol+1,w
  4164  0CC8  00CE               	movwf	??_rechts_ausrichten+1
  4165  0CC9  0841               	movf	?___fttol+2,w
  4166  0CCA  00CF               	movwf	??_rechts_ausrichten+2
  4167  0CCB  0842               	movf	?___fttol+3,w
  4168  0CCC  00D0               	movwf	??_rechts_ausrichten+3
  4169                           
  4170                           ;PGM_5.c: 1089: LATD = (LATD & 0b11110000);
  4171  0CCD  0022               	movlb	2	; select bank2
  4172  0CCE  080F               	movf	15,w	;volatile
  4173  0CCF  39F0               	andlw	240
  4174  0CD0  008F               	movwf	15	;volatile
  4175                           
  4176                           ;PGM_5.c: 1090: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  4177  0CD1  0020               	movlb	0	; select bank0
  4178  0CD2  0869               	movf	_Ausrichten_Stopp,w
  4179  0CD3  3191  218B  318B   	fcall	___lbtoft
  4180  0CD6  0020               	movlb	0	; select bank0
  4181  0CD7  0828               	movf	?___lbtoft,w
  4182  0CD8  00B2               	movwf	___ftmul@f2
  4183  0CD9  0829               	movf	?___lbtoft+1,w
  4184  0CDA  00B3               	movwf	___ftmul@f2+1
  4185  0CDB  082A               	movf	?___lbtoft+2,w
  4186  0CDC  00B4               	movwf	___ftmul@f2+2
  4187  0CDD  3040               	movlw	64
  4188  0CDE  00AF               	movwf	___ftmul@f1
  4189  0CDF  309C               	movlw	156
  4190  0CE0  00B0               	movwf	___ftmul@f1+1
  4191  0CE1  3045               	movlw	69
  4192  0CE2  00B1               	movwf	___ftmul@f1+2
  4193  0CE3  3197  274C  318B   	fcall	___ftmul
  4194  0CE6  0020               	movlb	0	; select bank0
  4195  0CE7  082F               	movf	?___ftmul,w
  4196  0CE8  00BF               	movwf	___fttol@f1
  4197  0CE9  0830               	movf	?___ftmul+1,w
  4198  0CEA  00C0               	movwf	___fttol@f1+1
  4199  0CEB  0831               	movf	?___ftmul+2,w
  4200  0CEC  00C1               	movwf	___fttol@f1+2
  4201  0CED  3196  2620  318B   	fcall	___fttol
  4202  0CF0  0020               	movlb	0	; select bank0
  4203  0CF1  083F               	movf	?___fttol,w
  4204  0CF2  00CD               	movwf	??_rechts_ausrichten
  4205  0CF3  0840               	movf	?___fttol+1,w
  4206  0CF4  00CE               	movwf	??_rechts_ausrichten+1
  4207  0CF5  0841               	movf	?___fttol+2,w
  4208  0CF6  00CF               	movwf	??_rechts_ausrichten+2
  4209  0CF7  0842               	movf	?___fttol+3,w
  4210  0CF8  00D0               	movwf	??_rechts_ausrichten+3
  4211                           
  4212                           ;PGM_5.c: 1091: opfer();
  4213  0CF9  3195  2599  318B   	fcall	_opfer
  4214                           
  4215                           ;PGM_5.c: 1092: VAR_aus_zeit ++ ;
  4216  0CFC  3001               	movlw	1
  4217  0CFD  0020               	movlb	0	; select bank0
  4218  0CFE  07D4               	addwf	_VAR_aus_zeit,f
  4219  0CFF  3000               	movlw	0
  4220  0D00  3DD5               	addwfc	_VAR_aus_zeit+1,f
  4221  0D01  2C7E               	goto	l732
  4222  0D02                     __end_of_rechts_ausrichten:	
  4223                           
  4224                           	psect	text9
  4225  090E                     __ptext9:	
  4226 ;; *************** function _omnifakerechts *****************
  4227 ;; Defined at:
  4228 ;;		line 487 in file "PGM_5.c"
  4229 ;; Parameters:    Size  Location     Type
  4230 ;;		None
  4231 ;; Auto vars:     Size  Location     Type
  4232 ;;		None
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      void 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0, pclath, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4246 ;;Total ram usage:        2 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    4
  4249 ;; This function calls:
  4250 ;;		___awdiv
  4251 ;; This function is called by:
  4252 ;;		_ausrichten
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           
  4257                           ;psect for function _omnifakerechts
  4258  090E                     _omnifakerechts:	
  4259                           
  4260                           ;PGM_5.c: 488: if((A_D_Wert [2] > Schwellwert_Omni)&&(A_D_Wert [5] > Schwellwert_Omni)){
  4261                           
  4262                           ;incstack = 0
  4263                           ; Regs used in _omnifakerechts: [wreg+status,2+status,0+pclath+cstack]
  4264  090E  0021               	movlb	1	; select bank1
  4265  090F  0822               	movf	(_A_D_Wert^(0+128)+2),w
  4266  0910  0020               	movlb	0	; select bank0
  4267  0911  0267               	subwf	_Schwellwert_Omni,w
  4268  0912  1803               	skipnc
  4269  0913  0008               	return
  4270  0914  0021               	movlb	1	; select bank1
  4271  0915  0825               	movf	(_A_D_Wert^(0+128)+5),w
  4272  0916  0020               	movlb	0	; select bank0
  4273  0917  0267               	subwf	_Schwellwert_Omni,w
  4274  0918  1803               	skipnc
  4275  0919  0008               	return
  4276                           
  4277                           ;PGM_5.c: 489: VAR_omni = 0;
  4278  091A  0021               	movlb	1	; select bank1
  4279  091B  01EA               	clrf	_VAR_omni^(0+128)
  4280  091C                     l4912:	
  4281                           ;PGM_5.c: 490: while((((A_D_Wert [2] + A_D_Wert [5] )/2)<=78)&&(!VAR_omni < 6)){
  4282                           
  4283  091C  3002               	movlw	2
  4284  091D  0020               	movlb	0	; select bank0
  4285  091E  00A0               	movwf	___awdiv@divisor
  4286  091F  3000               	movlw	0
  4287  0920  00A1               	movwf	___awdiv@divisor+1
  4288  0921  0021               	movlb	1	; select bank1
  4289  0922  0822               	movf	(_A_D_Wert^(0+128)+2),w
  4290  0923  0725               	addwf	(_A_D_Wert^(0+128)+5),w
  4291  0924  0020               	movlb	0	; select bank0
  4292  0925  00A2               	movwf	___awdiv@dividend
  4293  0926  01A3               	clrf	___awdiv@dividend+1
  4294  0927  0DA3               	rlf	___awdiv@dividend+1,f
  4295  0928  3192  226C  3189   	fcall	___awdiv
  4296  092B  0020               	movlb	0	; select bank0
  4297  092C  0821               	movf	?___awdiv+1,w
  4298  092D  3A80               	xorlw	128
  4299  092E  00A8               	movwf	??_omnifakerechts
  4300  092F  3080               	movlw	128
  4301  0930  0228               	subwf	??_omnifakerechts,w
  4302  0931  1D03               	skipz
  4303  0932  2935               	goto	u5425
  4304  0933  304F               	movlw	79
  4305  0934  0220               	subwf	?___awdiv,w
  4306  0935                     u5425:	
  4307  0935  1803               	btfsc	3,0
  4308  0936  2980               	goto	l4914
  4309                           
  4310                           ;PGM_5.c: 491: LATD = (LATD & 0b11110000)|0b00000010;
  4311  0937  0022               	movlb	2	; select bank2
  4312  0938  080F               	movf	15,w	;volatile
  4313  0939  39F0               	andlw	240
  4314  093A  3802               	iorlw	2
  4315  093B  008F               	movwf	15	;volatile
  4316                           
  4317                           ;PGM_5.c: 492: _delay((unsigned long)((52)*(20000000/4000.0)));
  4318  093C  3002               	movlw	2
  4319  093D  0020               	movlb	0	; select bank0
  4320  093E  00A9               	movwf	??_omnifakerechts+1
  4321  093F  3052               	movlw	82
  4322  0940  00A8               	movwf	??_omnifakerechts
  4323  0941  30A6               	movlw	166
  4324  0942                     u7047:	
  4325  0942  0B89               	decfsz	9,f
  4326  0943  2942               	goto	u7047
  4327  0944  0BA8               	decfsz	??_omnifakerechts,f
  4328  0945  2942               	goto	u7047
  4329  0946  0BA9               	decfsz	??_omnifakerechts+1,f
  4330  0947  2942               	goto	u7047
  4331  0948  0000               	nop
  4332                           
  4333                           ;PGM_5.c: 493: LATD = (LATD & 0b11110000)|0b00001000;
  4334  0949  0022               	movlb	2	; select bank2
  4335  094A  080F               	movf	15,w	;volatile
  4336  094B  39F0               	andlw	240
  4337  094C  3808               	iorlw	8
  4338  094D  008F               	movwf	15	;volatile
  4339                           
  4340                           ;PGM_5.c: 494: _delay((unsigned long)((38)*(20000000/4000.0)));
  4341  094E  30F7               	movlw	247
  4342  094F  0020               	movlb	0	; select bank0
  4343  0950  00A8               	movwf	??_omnifakerechts
  4344  0951  30BF               	movlw	191
  4345  0952                     u7057:	
  4346  0952  0B89               	decfsz	9,f
  4347  0953  2952               	goto	u7057
  4348  0954  0BA8               	decfsz	??_omnifakerechts,f
  4349  0955  2952               	goto	u7057
  4350  0956  3200               	nop2
  4351                           
  4352                           ;PGM_5.c: 495: LATD = (LATD & 0b11110000)|0b00000001;
  4353  0957  0022               	movlb	2	; select bank2
  4354  0958  080F               	movf	15,w	;volatile
  4355  0959  39F0               	andlw	240
  4356  095A  3801               	iorlw	1
  4357  095B  008F               	movwf	15	;volatile
  4358                           
  4359                           ;PGM_5.c: 496: _delay((unsigned long)((42)*(20000000/4000.0)));
  4360  095C  3002               	movlw	2
  4361  095D  0020               	movlb	0	; select bank0
  4362  095E  00A9               	movwf	??_omnifakerechts+1
  4363  095F  3011               	movlw	17
  4364  0960  00A8               	movwf	??_omnifakerechts
  4365  0961  30B7               	movlw	183
  4366  0962                     u7067:	
  4367  0962  0B89               	decfsz	9,f
  4368  0963  2962               	goto	u7067
  4369  0964  0BA8               	decfsz	??_omnifakerechts,f
  4370  0965  2962               	goto	u7067
  4371  0966  0BA9               	decfsz	??_omnifakerechts+1,f
  4372  0967  2962               	goto	u7067
  4373                           
  4374                           ;PGM_5.c: 497: LATD = (LATD & 0b11110000)|0b00000100;
  4375  0968  0022               	movlb	2	; select bank2
  4376  0969  080F               	movf	15,w	;volatile
  4377  096A  39F0               	andlw	240
  4378  096B  3804               	iorlw	4
  4379  096C  008F               	movwf	15	;volatile
  4380                           
  4381                           ;PGM_5.c: 498: _delay((unsigned long)((42)*(20000000/4000.0)));
  4382  096D  3002               	movlw	2
  4383  096E  0020               	movlb	0	; select bank0
  4384  096F  00A9               	movwf	??_omnifakerechts+1
  4385  0970  3011               	movlw	17
  4386  0971  00A8               	movwf	??_omnifakerechts
  4387  0972  30B7               	movlw	183
  4388  0973                     u7077:	
  4389  0973  0B89               	decfsz	9,f
  4390  0974  2973               	goto	u7077
  4391  0975  0BA8               	decfsz	??_omnifakerechts,f
  4392  0976  2973               	goto	u7077
  4393  0977  0BA9               	decfsz	??_omnifakerechts+1,f
  4394  0978  2973               	goto	u7077
  4395                           
  4396                           ;PGM_5.c: 499: VAR_omni++;
  4397  0979  3001               	movlw	1
  4398  097A  0020               	movlb	0	; select bank0
  4399  097B  00A8               	movwf	??_omnifakerechts
  4400  097C  0828               	movf	??_omnifakerechts,w
  4401  097D  0021               	movlb	1	; select bank1
  4402  097E  07EA               	addwf	_VAR_omni^(0+128),f
  4403  097F  291C               	goto	l4912
  4404  0980                     l4914:	
  4405                           
  4406                           ;PGM_5.c: 500: }
  4407                           ;PGM_5.c: 501: LATD = (LATD & 0b11110000);
  4408  0980  0022               	movlb	2	; select bank2
  4409  0981  080F               	movf	15,w	;volatile
  4410  0982  39F0               	andlw	240
  4411  0983  008F               	movwf	15	;volatile
  4412                           
  4413                           ;PGM_5.c: 502: VAR_omni = 0;
  4414  0984  0021               	movlb	1	; select bank1
  4415  0985  01EA               	clrf	_VAR_omni^(0+128)
  4416  0986                     l4932:	
  4417                           ;PGM_5.c: 503: while((((A_D_Wert [2] + A_D_Wert [5] )/2)>=80)&&(!VAR_omni < 6)){
  4418                           
  4419  0986  3002               	movlw	2
  4420  0987  0020               	movlb	0	; select bank0
  4421  0988  00A0               	movwf	___awdiv@divisor
  4422  0989  3000               	movlw	0
  4423  098A  00A1               	movwf	___awdiv@divisor+1
  4424  098B  0021               	movlb	1	; select bank1
  4425  098C  0822               	movf	(_A_D_Wert^(0+128)+2),w
  4426  098D  0725               	addwf	(_A_D_Wert^(0+128)+5),w
  4427  098E  0020               	movlb	0	; select bank0
  4428  098F  00A2               	movwf	___awdiv@dividend
  4429  0990  01A3               	clrf	___awdiv@dividend+1
  4430  0991  0DA3               	rlf	___awdiv@dividend+1,f
  4431  0992  3192  226C  3189   	fcall	___awdiv
  4432  0995  0020               	movlb	0	; select bank0
  4433  0996  0821               	movf	?___awdiv+1,w
  4434  0997  3A80               	xorlw	128
  4435  0998  00A8               	movwf	??_omnifakerechts
  4436  0999  3080               	movlw	128
  4437  099A  0228               	subwf	??_omnifakerechts,w
  4438  099B  1D03               	skipz
  4439  099C  299F               	goto	u5435
  4440  099D  3050               	movlw	80
  4441  099E  0220               	subwf	?___awdiv,w
  4442  099F                     u5435:	
  4443  099F  1C03               	btfss	3,0
  4444  09A0  29EF               	goto	l4934
  4445                           
  4446                           ;PGM_5.c: 504: LATD = (LATD & 0b11110000)|0b00001000;
  4447  09A1  0022               	movlb	2	; select bank2
  4448  09A2  080F               	movf	15,w	;volatile
  4449  09A3  39F0               	andlw	240
  4450  09A4  3808               	iorlw	8
  4451  09A5  008F               	movwf	15	;volatile
  4452                           
  4453                           ;PGM_5.c: 505: _delay((unsigned long)((50)*(20000000/4000.0)));
  4454  09A6  3002               	movlw	2
  4455  09A7  0020               	movlb	0	; select bank0
  4456  09A8  00A9               	movwf	??_omnifakerechts+1
  4457  09A9  3045               	movlw	69
  4458  09AA  00A8               	movwf	??_omnifakerechts
  4459  09AB  30A9               	movlw	169
  4460  09AC                     u7087:	
  4461  09AC  0B89               	decfsz	9,f
  4462  09AD  29AC               	goto	u7087
  4463  09AE  0BA8               	decfsz	??_omnifakerechts,f
  4464  09AF  29AC               	goto	u7087
  4465  09B0  0BA9               	decfsz	??_omnifakerechts+1,f
  4466  09B1  29AC               	goto	u7087
  4467  09B2  3200               	nop2
  4468                           
  4469                           ;PGM_5.c: 506: LATD = (LATD & 0b11110000)|0b00000010;
  4470  09B3  0022               	movlb	2	; select bank2
  4471  09B4  080F               	movf	15,w	;volatile
  4472  09B5  39F0               	andlw	240
  4473  09B6  3802               	iorlw	2
  4474  09B7  008F               	movwf	15	;volatile
  4475                           
  4476                           ;PGM_5.c: 507: _delay((unsigned long)((55)*(20000000/4000.0)));
  4477  09B8  3002               	movlw	2
  4478  09B9  0020               	movlb	0	; select bank0
  4479  09BA  00A9               	movwf	??_omnifakerechts+1
  4480  09BB  3066               	movlw	102
  4481  09BC  00A8               	movwf	??_omnifakerechts
  4482  09BD  3021               	movlw	33
  4483  09BE                     u7097:	
  4484  09BE  0B89               	decfsz	9,f
  4485  09BF  29BE               	goto	u7097
  4486  09C0  0BA8               	decfsz	??_omnifakerechts,f
  4487  09C1  29BE               	goto	u7097
  4488  09C2  0BA9               	decfsz	??_omnifakerechts+1,f
  4489  09C3  29BE               	goto	u7097
  4490                           
  4491                           ;PGM_5.c: 508: LATD = (LATD & 0b11110000)|0b00000100;
  4492  09C4  0022               	movlb	2	; select bank2
  4493  09C5  080F               	movf	15,w	;volatile
  4494  09C6  39F0               	andlw	240
  4495  09C7  3804               	iorlw	4
  4496  09C8  008F               	movwf	15	;volatile
  4497                           
  4498                           ;PGM_5.c: 509: _delay((unsigned long)((45)*(20000000/4000.0)));
  4499  09C9  3002               	movlw	2
  4500  09CA  0020               	movlb	0	; select bank0
  4501  09CB  00A9               	movwf	??_omnifakerechts+1
  4502  09CC  3025               	movlw	37
  4503  09CD  00A8               	movwf	??_omnifakerechts
  4504  09CE  3031               	movlw	49
  4505  09CF                     u7107:	
  4506  09CF  0B89               	decfsz	9,f
  4507  09D0  29CF               	goto	u7107
  4508  09D1  0BA8               	decfsz	??_omnifakerechts,f
  4509  09D2  29CF               	goto	u7107
  4510  09D3  0BA9               	decfsz	??_omnifakerechts+1,f
  4511  09D4  29CF               	goto	u7107
  4512  09D5  3200               	nop2
  4513                           
  4514                           ;PGM_5.c: 510: LATD = (LATD & 0b11110000)|0b00000001;
  4515  09D6  0022               	movlb	2	; select bank2
  4516  09D7  080F               	movf	15,w	;volatile
  4517  09D8  39F0               	andlw	240
  4518  09D9  3801               	iorlw	1
  4519  09DA  008F               	movwf	15	;volatile
  4520                           
  4521                           ;PGM_5.c: 511: _delay((unsigned long)((45)*(20000000/4000.0)));
  4522  09DB  3002               	movlw	2
  4523  09DC  0020               	movlb	0	; select bank0
  4524  09DD  00A9               	movwf	??_omnifakerechts+1
  4525  09DE  3025               	movlw	37
  4526  09DF  00A8               	movwf	??_omnifakerechts
  4527  09E0  3031               	movlw	49
  4528  09E1                     u7117:	
  4529  09E1  0B89               	decfsz	9,f
  4530  09E2  29E1               	goto	u7117
  4531  09E3  0BA8               	decfsz	??_omnifakerechts,f
  4532  09E4  29E1               	goto	u7117
  4533  09E5  0BA9               	decfsz	??_omnifakerechts+1,f
  4534  09E6  29E1               	goto	u7117
  4535  09E7  3200               	nop2
  4536                           
  4537                           ;PGM_5.c: 512: VAR_omni++;
  4538  09E8  3001               	movlw	1
  4539  09E9  0020               	movlb	0	; select bank0
  4540  09EA  00A8               	movwf	??_omnifakerechts
  4541  09EB  0828               	movf	??_omnifakerechts,w
  4542  09EC  0021               	movlb	1	; select bank1
  4543  09ED  07EA               	addwf	_VAR_omni^(0+128),f
  4544  09EE  2986               	goto	l4932
  4545  09EF                     l4934:	
  4546                           
  4547                           ;PGM_5.c: 513: }
  4548                           ;PGM_5.c: 514: VAR_omni = 0;
  4549  09EF  0021               	movlb	1	; select bank1
  4550  09F0  01EA               	clrf	_VAR_omni^(0+128)
  4551                           
  4552                           ;PGM_5.c: 515: LATD = (LATD & 0b11110000);
  4553  09F1  0022               	movlb	2	; select bank2
  4554  09F2  080F               	movf	15,w	;volatile
  4555  09F3  39F0               	andlw	240
  4556  09F4  008F               	movwf	15	;volatile
  4557  09F5  0008               	return
  4558  09F6                     __end_of_omnifakerechts:	
  4559                           
  4560                           	psect	text10
  4561  09F6                     __ptext10:	
  4562 ;; *************** function _omnifakelinks *****************
  4563 ;; Defined at:
  4564 ;;		line 450 in file "PGM_5.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;		None
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;		None
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0, pclath, cstack
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4580 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4581 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4582 ;;Total ram usage:        2 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    4
  4585 ;; This function calls:
  4586 ;;		___awdiv
  4587 ;; This function is called by:
  4588 ;;		_ausrichten
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           
  4593                           ;psect for function _omnifakelinks
  4594  09F6                     _omnifakelinks:	
  4595                           
  4596                           ;PGM_5.c: 451: if((A_D_Wert [1] > Schwellwert_Omni)&&(A_D_Wert [6] > Schwellwert_Omni)){
  4597                           
  4598                           ;incstack = 0
  4599                           ; Regs used in _omnifakelinks: [wreg+status,2+status,0+pclath+cstack]
  4600  09F6  0021               	movlb	1	; select bank1
  4601  09F7  0821               	movf	(_A_D_Wert^(0+128)+1),w
  4602  09F8  0020               	movlb	0	; select bank0
  4603  09F9  0267               	subwf	_Schwellwert_Omni,w
  4604  09FA  1803               	skipnc
  4605  09FB  0008               	return
  4606  09FC  0021               	movlb	1	; select bank1
  4607  09FD  0826               	movf	(_A_D_Wert^(0+128)+6),w
  4608  09FE  0020               	movlb	0	; select bank0
  4609  09FF  0267               	subwf	_Schwellwert_Omni,w
  4610  0A00  1803               	skipnc
  4611  0A01  0008               	return
  4612                           
  4613                           ;PGM_5.c: 452: VAR_omni = 0;
  4614  0A02  0021               	movlb	1	; select bank1
  4615  0A03  01EA               	clrf	_VAR_omni^(0+128)
  4616  0A04                     l4866:	
  4617                           ;PGM_5.c: 453: while((((A_D_Wert [1] + A_D_Wert [6] )/2)<=78)&&(!VAR_omni < 6)){
  4618                           
  4619  0A04  3002               	movlw	2
  4620  0A05  0020               	movlb	0	; select bank0
  4621  0A06  00A0               	movwf	___awdiv@divisor
  4622  0A07  3000               	movlw	0
  4623  0A08  00A1               	movwf	___awdiv@divisor+1
  4624  0A09  0021               	movlb	1	; select bank1
  4625  0A0A  0821               	movf	(_A_D_Wert^(0+128)+1),w
  4626  0A0B  0726               	addwf	(_A_D_Wert^(0+128)+6),w
  4627  0A0C  0020               	movlb	0	; select bank0
  4628  0A0D  00A2               	movwf	___awdiv@dividend
  4629  0A0E  01A3               	clrf	___awdiv@dividend+1
  4630  0A0F  0DA3               	rlf	___awdiv@dividend+1,f
  4631  0A10  3192  226C  3189   	fcall	___awdiv
  4632  0A13  0020               	movlb	0	; select bank0
  4633  0A14  0821               	movf	?___awdiv+1,w
  4634  0A15  3A80               	xorlw	128
  4635  0A16  00A8               	movwf	??_omnifakelinks
  4636  0A17  3080               	movlw	128
  4637  0A18  0228               	subwf	??_omnifakelinks,w
  4638  0A19  1D03               	skipz
  4639  0A1A  2A1D               	goto	u5385
  4640  0A1B  304F               	movlw	79
  4641  0A1C  0220               	subwf	?___awdiv,w
  4642  0A1D                     u5385:	
  4643  0A1D  1803               	btfsc	3,0
  4644  0A1E  2A7A               	goto	l4868
  4645                           
  4646                           ;PGM_5.c: 454: LATD = (LATD & 0b11110000)|0b00001000;
  4647  0A1F  0022               	movlb	2	; select bank2
  4648  0A20  080F               	movf	15,w	;volatile
  4649  0A21  39F0               	andlw	240
  4650  0A22  3808               	iorlw	8
  4651  0A23  008F               	movwf	15	;volatile
  4652                           
  4653                           ;PGM_5.c: 455: _delay((unsigned long)((50)*(20000000/4000.0)));
  4654  0A24  3002               	movlw	2
  4655  0A25  0020               	movlb	0	; select bank0
  4656  0A26  00A9               	movwf	??_omnifakelinks+1
  4657  0A27  3045               	movlw	69
  4658  0A28  00A8               	movwf	??_omnifakelinks
  4659  0A29  30A9               	movlw	169
  4660  0A2A                     u7127:	
  4661  0A2A  0B89               	decfsz	9,f
  4662  0A2B  2A2A               	goto	u7127
  4663  0A2C  0BA8               	decfsz	??_omnifakelinks,f
  4664  0A2D  2A2A               	goto	u7127
  4665  0A2E  0BA9               	decfsz	??_omnifakelinks+1,f
  4666  0A2F  2A2A               	goto	u7127
  4667  0A30  3200               	nop2
  4668                           
  4669                           ;PGM_5.c: 456: LATD = (LATD & 0b11110000);
  4670  0A31  0022               	movlb	2	; select bank2
  4671  0A32  080F               	movf	15,w	;volatile
  4672  0A33  39F0               	andlw	240
  4673  0A34  008F               	movwf	15	;volatile
  4674                           
  4675                           ;PGM_5.c: 457: LATD = (LATD & 0b11110000)|0b00000010;
  4676  0A35  080F               	movf	15,w	;volatile
  4677  0A36  39F0               	andlw	240
  4678  0A37  3802               	iorlw	2
  4679  0A38  008F               	movwf	15	;volatile
  4680                           
  4681                           ;PGM_5.c: 458: _delay((unsigned long)((55)*(20000000/4000.0)));
  4682  0A39  3002               	movlw	2
  4683  0A3A  0020               	movlb	0	; select bank0
  4684  0A3B  00A9               	movwf	??_omnifakelinks+1
  4685  0A3C  3066               	movlw	102
  4686  0A3D  00A8               	movwf	??_omnifakelinks
  4687  0A3E  3021               	movlw	33
  4688  0A3F                     u7137:	
  4689  0A3F  0B89               	decfsz	9,f
  4690  0A40  2A3F               	goto	u7137
  4691  0A41  0BA8               	decfsz	??_omnifakelinks,f
  4692  0A42  2A3F               	goto	u7137
  4693  0A43  0BA9               	decfsz	??_omnifakelinks+1,f
  4694  0A44  2A3F               	goto	u7137
  4695                           
  4696                           ;PGM_5.c: 459: LATD = (LATD & 0b11110000);
  4697  0A45  0022               	movlb	2	; select bank2
  4698  0A46  080F               	movf	15,w	;volatile
  4699  0A47  39F0               	andlw	240
  4700  0A48  008F               	movwf	15	;volatile
  4701                           
  4702                           ;PGM_5.c: 460: LATD = (LATD & 0b11110000)|0b00000100;
  4703  0A49  080F               	movf	15,w	;volatile
  4704  0A4A  39F0               	andlw	240
  4705  0A4B  3804               	iorlw	4
  4706  0A4C  008F               	movwf	15	;volatile
  4707                           
  4708                           ;PGM_5.c: 461: _delay((unsigned long)((50)*(20000000/4000.0)));
  4709  0A4D  3002               	movlw	2
  4710  0A4E  0020               	movlb	0	; select bank0
  4711  0A4F  00A9               	movwf	??_omnifakelinks+1
  4712  0A50  3045               	movlw	69
  4713  0A51  00A8               	movwf	??_omnifakelinks
  4714  0A52  30A9               	movlw	169
  4715  0A53                     u7147:	
  4716  0A53  0B89               	decfsz	9,f
  4717  0A54  2A53               	goto	u7147
  4718  0A55  0BA8               	decfsz	??_omnifakelinks,f
  4719  0A56  2A53               	goto	u7147
  4720  0A57  0BA9               	decfsz	??_omnifakelinks+1,f
  4721  0A58  2A53               	goto	u7147
  4722  0A59  3200               	nop2
  4723                           
  4724                           ;PGM_5.c: 462: LATD = (LATD & 0b11110000);
  4725  0A5A  0022               	movlb	2	; select bank2
  4726  0A5B  080F               	movf	15,w	;volatile
  4727  0A5C  39F0               	andlw	240
  4728  0A5D  008F               	movwf	15	;volatile
  4729                           
  4730                           ;PGM_5.c: 463: LATD = (LATD & 0b11110000)|0b00000001;
  4731  0A5E  080F               	movf	15,w	;volatile
  4732  0A5F  39F0               	andlw	240
  4733  0A60  3801               	iorlw	1
  4734  0A61  008F               	movwf	15	;volatile
  4735                           
  4736                           ;PGM_5.c: 464: _delay((unsigned long)((50)*(20000000/4000.0)));
  4737  0A62  3002               	movlw	2
  4738  0A63  0020               	movlb	0	; select bank0
  4739  0A64  00A9               	movwf	??_omnifakelinks+1
  4740  0A65  3045               	movlw	69
  4741  0A66  00A8               	movwf	??_omnifakelinks
  4742  0A67  30A9               	movlw	169
  4743  0A68                     u7157:	
  4744  0A68  0B89               	decfsz	9,f
  4745  0A69  2A68               	goto	u7157
  4746  0A6A  0BA8               	decfsz	??_omnifakelinks,f
  4747  0A6B  2A68               	goto	u7157
  4748  0A6C  0BA9               	decfsz	??_omnifakelinks+1,f
  4749  0A6D  2A68               	goto	u7157
  4750  0A6E  3200               	nop2
  4751                           
  4752                           ;PGM_5.c: 465: LATD = (LATD & 0b11110000);
  4753  0A6F  0022               	movlb	2	; select bank2
  4754  0A70  080F               	movf	15,w	;volatile
  4755  0A71  39F0               	andlw	240
  4756  0A72  008F               	movwf	15	;volatile
  4757                           
  4758                           ;PGM_5.c: 466: VAR_omni++;
  4759  0A73  3001               	movlw	1
  4760  0A74  0020               	movlb	0	; select bank0
  4761  0A75  00A8               	movwf	??_omnifakelinks
  4762  0A76  0828               	movf	??_omnifakelinks,w
  4763  0A77  0021               	movlb	1	; select bank1
  4764  0A78  07EA               	addwf	_VAR_omni^(0+128),f
  4765  0A79  2A04               	goto	l4866
  4766  0A7A                     l4868:	
  4767                           
  4768                           ;PGM_5.c: 467: }
  4769                           ;PGM_5.c: 468: LATD = (LATD & 0b11110000);
  4770  0A7A  0022               	movlb	2	; select bank2
  4771  0A7B  080F               	movf	15,w	;volatile
  4772  0A7C  39F0               	andlw	240
  4773  0A7D  008F               	movwf	15	;volatile
  4774                           
  4775                           ;PGM_5.c: 469: VAR_omni = 0;
  4776  0A7E  0021               	movlb	1	; select bank1
  4777  0A7F  01EA               	clrf	_VAR_omni^(0+128)
  4778  0A80                     l4886:	
  4779                           ;PGM_5.c: 470: while((((A_D_Wert [1] + A_D_Wert [6] )/2)>=80)&&(!VAR_omni < 6)){
  4780                           
  4781  0A80  3002               	movlw	2
  4782  0A81  0020               	movlb	0	; select bank0
  4783  0A82  00A0               	movwf	___awdiv@divisor
  4784  0A83  3000               	movlw	0
  4785  0A84  00A1               	movwf	___awdiv@divisor+1
  4786  0A85  0021               	movlb	1	; select bank1
  4787  0A86  0821               	movf	(_A_D_Wert^(0+128)+1),w
  4788  0A87  0726               	addwf	(_A_D_Wert^(0+128)+6),w
  4789  0A88  0020               	movlb	0	; select bank0
  4790  0A89  00A2               	movwf	___awdiv@dividend
  4791  0A8A  01A3               	clrf	___awdiv@dividend+1
  4792  0A8B  0DA3               	rlf	___awdiv@dividend+1,f
  4793  0A8C  3192  226C  3189   	fcall	___awdiv
  4794  0A8F  0020               	movlb	0	; select bank0
  4795  0A90  0821               	movf	?___awdiv+1,w
  4796  0A91  3A80               	xorlw	128
  4797  0A92  00A8               	movwf	??_omnifakelinks
  4798  0A93  3080               	movlw	128
  4799  0A94  0228               	subwf	??_omnifakelinks,w
  4800  0A95  1D03               	skipz
  4801  0A96  2A99               	goto	u5395
  4802  0A97  3050               	movlw	80
  4803  0A98  0220               	subwf	?___awdiv,w
  4804  0A99                     u5395:	
  4805  0A99  1C03               	btfss	3,0
  4806  0A9A  2AE4               	goto	l4888
  4807                           
  4808                           ;PGM_5.c: 471: LATD = (LATD & 0b11110000)|0b00000010;
  4809  0A9B  0022               	movlb	2	; select bank2
  4810  0A9C  080F               	movf	15,w	;volatile
  4811  0A9D  39F0               	andlw	240
  4812  0A9E  3802               	iorlw	2
  4813  0A9F  008F               	movwf	15	;volatile
  4814                           
  4815                           ;PGM_5.c: 472: _delay((unsigned long)((52)*(20000000/4000.0)));
  4816  0AA0  3002               	movlw	2
  4817  0AA1  0020               	movlb	0	; select bank0
  4818  0AA2  00A9               	movwf	??_omnifakelinks+1
  4819  0AA3  3052               	movlw	82
  4820  0AA4  00A8               	movwf	??_omnifakelinks
  4821  0AA5  30A6               	movlw	166
  4822  0AA6                     u7167:	
  4823  0AA6  0B89               	decfsz	9,f
  4824  0AA7  2AA6               	goto	u7167
  4825  0AA8  0BA8               	decfsz	??_omnifakelinks,f
  4826  0AA9  2AA6               	goto	u7167
  4827  0AAA  0BA9               	decfsz	??_omnifakelinks+1,f
  4828  0AAB  2AA6               	goto	u7167
  4829  0AAC  0000               	nop
  4830                           
  4831                           ;PGM_5.c: 473: LATD = (LATD & 0b11110000)|0b00001000;
  4832  0AAD  0022               	movlb	2	; select bank2
  4833  0AAE  080F               	movf	15,w	;volatile
  4834  0AAF  39F0               	andlw	240
  4835  0AB0  3808               	iorlw	8
  4836  0AB1  008F               	movwf	15	;volatile
  4837                           
  4838                           ;PGM_5.c: 474: _delay((unsigned long)((38)*(20000000/4000.0)));
  4839  0AB2  30F7               	movlw	247
  4840  0AB3  0020               	movlb	0	; select bank0
  4841  0AB4  00A8               	movwf	??_omnifakelinks
  4842  0AB5  30BF               	movlw	191
  4843  0AB6                     u7177:	
  4844  0AB6  0B89               	decfsz	9,f
  4845  0AB7  2AB6               	goto	u7177
  4846  0AB8  0BA8               	decfsz	??_omnifakelinks,f
  4847  0AB9  2AB6               	goto	u7177
  4848  0ABA  3200               	nop2
  4849                           
  4850                           ;PGM_5.c: 475: LATD = (LATD & 0b11110000)|0b00000001;
  4851  0ABB  0022               	movlb	2	; select bank2
  4852  0ABC  080F               	movf	15,w	;volatile
  4853  0ABD  39F0               	andlw	240
  4854  0ABE  3801               	iorlw	1
  4855  0ABF  008F               	movwf	15	;volatile
  4856                           
  4857                           ;PGM_5.c: 476: _delay((unsigned long)((42)*(20000000/4000.0)));
  4858  0AC0  3002               	movlw	2
  4859  0AC1  0020               	movlb	0	; select bank0
  4860  0AC2  00A9               	movwf	??_omnifakelinks+1
  4861  0AC3  3011               	movlw	17
  4862  0AC4  00A8               	movwf	??_omnifakelinks
  4863  0AC5  30B7               	movlw	183
  4864  0AC6                     u7187:	
  4865  0AC6  0B89               	decfsz	9,f
  4866  0AC7  2AC6               	goto	u7187
  4867  0AC8  0BA8               	decfsz	??_omnifakelinks,f
  4868  0AC9  2AC6               	goto	u7187
  4869  0ACA  0BA9               	decfsz	??_omnifakelinks+1,f
  4870  0ACB  2AC6               	goto	u7187
  4871                           
  4872                           ;PGM_5.c: 477: LATD = (LATD & 0b11110000)|0b00000100;
  4873  0ACC  0022               	movlb	2	; select bank2
  4874  0ACD  080F               	movf	15,w	;volatile
  4875  0ACE  39F0               	andlw	240
  4876  0ACF  3804               	iorlw	4
  4877  0AD0  008F               	movwf	15	;volatile
  4878                           
  4879                           ;PGM_5.c: 478: _delay((unsigned long)((42)*(20000000/4000.0)));
  4880  0AD1  3002               	movlw	2
  4881  0AD2  0020               	movlb	0	; select bank0
  4882  0AD3  00A9               	movwf	??_omnifakelinks+1
  4883  0AD4  3011               	movlw	17
  4884  0AD5  00A8               	movwf	??_omnifakelinks
  4885  0AD6  30B7               	movlw	183
  4886  0AD7                     u7197:	
  4887  0AD7  0B89               	decfsz	9,f
  4888  0AD8  2AD7               	goto	u7197
  4889  0AD9  0BA8               	decfsz	??_omnifakelinks,f
  4890  0ADA  2AD7               	goto	u7197
  4891  0ADB  0BA9               	decfsz	??_omnifakelinks+1,f
  4892  0ADC  2AD7               	goto	u7197
  4893                           
  4894                           ;PGM_5.c: 479: VAR_omni++;
  4895  0ADD  3001               	movlw	1
  4896  0ADE  0020               	movlb	0	; select bank0
  4897  0ADF  00A8               	movwf	??_omnifakelinks
  4898  0AE0  0828               	movf	??_omnifakelinks,w
  4899  0AE1  0021               	movlb	1	; select bank1
  4900  0AE2  07EA               	addwf	_VAR_omni^(0+128),f
  4901  0AE3  2A80               	goto	l4886
  4902  0AE4                     l4888:	
  4903                           
  4904                           ;PGM_5.c: 480: }
  4905                           ;PGM_5.c: 481: VAR_omni = 0;
  4906  0AE4  0021               	movlb	1	; select bank1
  4907  0AE5  01EA               	clrf	_VAR_omni^(0+128)
  4908                           
  4909                           ;PGM_5.c: 482: LATD = (LATD & 0b11110000);
  4910  0AE6  0022               	movlb	2	; select bank2
  4911  0AE7  080F               	movf	15,w	;volatile
  4912  0AE8  39F0               	andlw	240
  4913  0AE9  008F               	movwf	15	;volatile
  4914  0AEA  0008               	return
  4915  0AEB                     __end_of_omnifakelinks:	
  4916                           
  4917                           	psect	text11
  4918  126C                     __ptext11:	
  4919 ;; *************** function ___awdiv *****************
  4920 ;; Defined at:
  4921 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;  divisor         2    0[BANK0 ] int 
  4924 ;;  dividend        2    2[BANK0 ] int 
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;  quotient        2    6[BANK0 ] int 
  4927 ;;  sign            1    5[BANK0 ] unsigned char 
  4928 ;;  counter         1    4[BANK0 ] unsigned char 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  2    0[BANK0 ] int 
  4931 ;; Registers used:
  4932 ;;		wreg, status,2, status,0
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4938 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4941 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4942 ;;Total ram usage:        9 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:    3
  4945 ;; This function calls:
  4946 ;;		Nothing
  4947 ;; This function is called by:
  4948 ;;		_omnifakelinks
  4949 ;;		_omnifakerechts
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           
  4954                           ;psect for function ___awdiv
  4955  126C                     ___awdiv:	
  4956                           
  4957                           ;incstack = 0
  4958                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  4959  126C  0020               	movlb	0	; select bank0
  4960  126D  01A5               	clrf	___awdiv@sign
  4961  126E  1FA1               	btfss	___awdiv@divisor+1,7
  4962  126F  2A77               	goto	l4750
  4963  1270  09A0               	comf	___awdiv@divisor,f
  4964  1271  09A1               	comf	___awdiv@divisor+1,f
  4965  1272  0AA0               	incf	___awdiv@divisor,f
  4966  1273  1903               	skipnz
  4967  1274  0AA1               	incf	___awdiv@divisor+1,f
  4968  1275  01A5               	clrf	___awdiv@sign
  4969  1276  0AA5               	incf	___awdiv@sign,f
  4970  1277                     l4750:	
  4971  1277  1FA3               	btfss	___awdiv@dividend+1,7
  4972  1278  2A82               	goto	l4756
  4973  1279  09A2               	comf	___awdiv@dividend,f
  4974  127A  09A3               	comf	___awdiv@dividend+1,f
  4975  127B  0AA2               	incf	___awdiv@dividend,f
  4976  127C  1903               	skipnz
  4977  127D  0AA3               	incf	___awdiv@dividend+1,f
  4978  127E  3001               	movlw	1
  4979  127F  00F7               	movwf	??___awdiv
  4980  1280  0877               	movf	??___awdiv,w
  4981  1281  06A5               	xorwf	___awdiv@sign,f
  4982  1282                     l4756:	
  4983  1282  01A6               	clrf	___awdiv@quotient
  4984  1283  01A7               	clrf	___awdiv@quotient+1
  4985  1284  0820               	movf	___awdiv@divisor,w
  4986  1285  0421               	iorwf	___awdiv@divisor+1,w
  4987  1286  1903               	btfsc	3,2
  4988  1287  2AB1               	goto	l4778
  4989  1288  01A4               	clrf	___awdiv@counter
  4990  1289  0AA4               	incf	___awdiv@counter,f
  4991  128A                     l4766:	
  4992  128A  1BA1               	btfsc	___awdiv@divisor+1,7
  4993  128B  2A96               	goto	l4768
  4994  128C  3001               	movlw	1
  4995  128D                     u5175:	
  4996  128D  35A0               	lslf	___awdiv@divisor,f
  4997  128E  0DA1               	rlf	___awdiv@divisor+1,f
  4998  128F  0B89               	decfsz	9,f
  4999  1290  2A8D               	goto	u5175
  5000  1291  3001               	movlw	1
  5001  1292  00F7               	movwf	??___awdiv
  5002  1293  0877               	movf	??___awdiv,w
  5003  1294  07A4               	addwf	___awdiv@counter,f
  5004  1295  2A8A               	goto	l4766
  5005  1296                     l4768:	
  5006  1296  3001               	movlw	1
  5007  1297                     u5195:	
  5008  1297  35A6               	lslf	___awdiv@quotient,f
  5009  1298  0DA7               	rlf	___awdiv@quotient+1,f
  5010  1299  0B89               	decfsz	9,f
  5011  129A  2A97               	goto	u5195
  5012  129B  0821               	movf	___awdiv@divisor+1,w
  5013  129C  0223               	subwf	___awdiv@dividend+1,w
  5014  129D  1D03               	skipz
  5015  129E  2AA1               	goto	u5205
  5016  129F  0820               	movf	___awdiv@divisor,w
  5017  12A0  0222               	subwf	___awdiv@dividend,w
  5018  12A1                     u5205:	
  5019  12A1  1C03               	skipc
  5020  12A2  2AA8               	goto	l4774
  5021  12A3  0820               	movf	___awdiv@divisor,w
  5022  12A4  02A2               	subwf	___awdiv@dividend,f
  5023  12A5  0821               	movf	___awdiv@divisor+1,w
  5024  12A6  3BA3               	subwfb	___awdiv@dividend+1,f
  5025  12A7  1426               	bsf	___awdiv@quotient,0
  5026  12A8                     l4774:	
  5027  12A8  3001               	movlw	1
  5028  12A9                     u5215:	
  5029  12A9  36A1               	lsrf	___awdiv@divisor+1,f
  5030  12AA  0CA0               	rrf	___awdiv@divisor,f
  5031  12AB  0B89               	decfsz	9,f
  5032  12AC  2AA9               	goto	u5215
  5033  12AD  3001               	movlw	1
  5034  12AE  02A4               	subwf	___awdiv@counter,f
  5035  12AF  1D03               	btfss	3,2
  5036  12B0  2A96               	goto	l4768
  5037  12B1                     l4778:	
  5038  12B1  0825               	movf	___awdiv@sign,w
  5039  12B2  1903               	btfsc	3,2
  5040  12B3  2AB9               	goto	l4782
  5041  12B4  09A6               	comf	___awdiv@quotient,f
  5042  12B5  09A7               	comf	___awdiv@quotient+1,f
  5043  12B6  0AA6               	incf	___awdiv@quotient,f
  5044  12B7  1903               	skipnz
  5045  12B8  0AA7               	incf	___awdiv@quotient+1,f
  5046  12B9                     l4782:	
  5047  12B9  0827               	movf	___awdiv@quotient+1,w
  5048  12BA  00A1               	movwf	?___awdiv+1
  5049  12BB  0826               	movf	___awdiv@quotient,w
  5050  12BC  00A0               	movwf	?___awdiv
  5051  12BD  0008               	return
  5052  12BE                     __end_of___awdiv:	
  5053                           
  5054                           	psect	text12
  5055  0AEB                     __ptext12:	
  5056 ;; *************** function _links_ausrichten *****************
  5057 ;; Defined at:
  5058 ;;		line 1048 in file "PGM_5.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;		None
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;		None
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  1    wreg      void 
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0, pclath, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5074 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5075 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5076 ;;Total ram usage:        4 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    6
  5079 ;; This function calls:
  5080 ;;		_Power_Ausrichten
  5081 ;;		___ftmul
  5082 ;;		___fttol
  5083 ;;		___lbtoft
  5084 ;;		_opfer
  5085 ;; This function is called by:
  5086 ;;		_ausrichten
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           
  5091                           ;psect for function _links_ausrichten
  5092  0AEB                     _links_ausrichten:	
  5093                           
  5094                           ;PGM_5.c: 1049: if (( A_D_Wert [1] > Schwellwert_Ausrichten )&&( A_D_Wert [6] > Schwellw
      +                          ert_Ausrichten )){
  5095                           
  5096                           ;incstack = 0
  5097                           ; Regs used in _links_ausrichten: [wreg+status,2+status,0+pclath+cstack]
  5098  0AEB  0021               	movlb	1	; select bank1
  5099  0AEC  0821               	movf	(_A_D_Wert^(0+128)+1),w
  5100  0AED  0020               	movlb	0	; select bank0
  5101  0AEE  0268               	subwf	_Schwellwert_Ausrichten,w
  5102  0AEF  1803               	skipnc
  5103  0AF0  0008               	return
  5104  0AF1  0021               	movlb	1	; select bank1
  5105  0AF2  0826               	movf	(_A_D_Wert^(0+128)+6),w
  5106  0AF3  0020               	movlb	0	; select bank0
  5107  0AF4  0268               	subwf	_Schwellwert_Ausrichten,w
  5108  0AF5  1803               	skipnc
  5109  0AF6  0008               	return
  5110                           
  5111                           ;PGM_5.c: 1050: VAR_aus_zeit = 0;
  5112  0AF7  01D4               	clrf	_VAR_aus_zeit
  5113  0AF8  01D5               	clrf	_VAR_aus_zeit+1
  5114                           
  5115                           ;PGM_5.c: 1051: while ((A_D_Wert [6] > A_D_Wert [1] ) && (VAR_aus_zeit <= 3000)){
  5116  0AF9  2B5E               	goto	l713
  5117  0AFA                     l4944:	
  5118                           
  5119                           ;PGM_5.c: 1052: Power_Ausrichten();
  5120  0AFA  3180  2003  318A   	fcall	_Power_Ausrichten
  5121                           
  5122                           ;PGM_5.c: 1053: LATD = (LATD & 0b11110000)|0b00001000;
  5123  0AFD  0022               	movlb	2	; select bank2
  5124  0AFE  080F               	movf	15,w	;volatile
  5125  0AFF  39F0               	andlw	240
  5126  0B00  3808               	iorlw	8
  5127  0B01  008F               	movwf	15	;volatile
  5128                           
  5129                           ;PGM_5.c: 1054: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  5130  0B02  0020               	movlb	0	; select bank0
  5131  0B03  086A               	movf	_Ausrichten_Fahren,w
  5132  0B04  3191  218B  318A   	fcall	___lbtoft
  5133  0B07  0020               	movlb	0	; select bank0
  5134  0B08  0828               	movf	?___lbtoft,w
  5135  0B09  00B2               	movwf	___ftmul@f2
  5136  0B0A  0829               	movf	?___lbtoft+1,w
  5137  0B0B  00B3               	movwf	___ftmul@f2+1
  5138  0B0C  082A               	movf	?___lbtoft+2,w
  5139  0B0D  00B4               	movwf	___ftmul@f2+2
  5140  0B0E  3040               	movlw	64
  5141  0B0F  00AF               	movwf	___ftmul@f1
  5142  0B10  309C               	movlw	156
  5143  0B11  00B0               	movwf	___ftmul@f1+1
  5144  0B12  3045               	movlw	69
  5145  0B13  00B1               	movwf	___ftmul@f1+2
  5146  0B14  3197  274C  318A   	fcall	___ftmul
  5147  0B17  0020               	movlb	0	; select bank0
  5148  0B18  082F               	movf	?___ftmul,w
  5149  0B19  00BF               	movwf	___fttol@f1
  5150  0B1A  0830               	movf	?___ftmul+1,w
  5151  0B1B  00C0               	movwf	___fttol@f1+1
  5152  0B1C  0831               	movf	?___ftmul+2,w
  5153  0B1D  00C1               	movwf	___fttol@f1+2
  5154  0B1E  3196  2620  318A   	fcall	___fttol
  5155  0B21  0020               	movlb	0	; select bank0
  5156  0B22  083F               	movf	?___fttol,w
  5157  0B23  00CD               	movwf	??_links_ausrichten
  5158  0B24  0840               	movf	?___fttol+1,w
  5159  0B25  00CE               	movwf	??_links_ausrichten+1
  5160  0B26  0841               	movf	?___fttol+2,w
  5161  0B27  00CF               	movwf	??_links_ausrichten+2
  5162  0B28  0842               	movf	?___fttol+3,w
  5163  0B29  00D0               	movwf	??_links_ausrichten+3
  5164                           
  5165                           ;PGM_5.c: 1055: LATD = (LATD & 0b11110000);
  5166  0B2A  0022               	movlb	2	; select bank2
  5167  0B2B  080F               	movf	15,w	;volatile
  5168  0B2C  39F0               	andlw	240
  5169  0B2D  008F               	movwf	15	;volatile
  5170                           
  5171                           ;PGM_5.c: 1056: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  5172  0B2E  0020               	movlb	0	; select bank0
  5173  0B2F  0869               	movf	_Ausrichten_Stopp,w
  5174  0B30  3191  218B  318A   	fcall	___lbtoft
  5175  0B33  0020               	movlb	0	; select bank0
  5176  0B34  0828               	movf	?___lbtoft,w
  5177  0B35  00B2               	movwf	___ftmul@f2
  5178  0B36  0829               	movf	?___lbtoft+1,w
  5179  0B37  00B3               	movwf	___ftmul@f2+1
  5180  0B38  082A               	movf	?___lbtoft+2,w
  5181  0B39  00B4               	movwf	___ftmul@f2+2
  5182  0B3A  3040               	movlw	64
  5183  0B3B  00AF               	movwf	___ftmul@f1
  5184  0B3C  309C               	movlw	156
  5185  0B3D  00B0               	movwf	___ftmul@f1+1
  5186  0B3E  3045               	movlw	69
  5187  0B3F  00B1               	movwf	___ftmul@f1+2
  5188  0B40  3197  274C  318A   	fcall	___ftmul
  5189  0B43  0020               	movlb	0	; select bank0
  5190  0B44  082F               	movf	?___ftmul,w
  5191  0B45  00BF               	movwf	___fttol@f1
  5192  0B46  0830               	movf	?___ftmul+1,w
  5193  0B47  00C0               	movwf	___fttol@f1+1
  5194  0B48  0831               	movf	?___ftmul+2,w
  5195  0B49  00C1               	movwf	___fttol@f1+2
  5196  0B4A  3196  2620  318A   	fcall	___fttol
  5197  0B4D  0020               	movlb	0	; select bank0
  5198  0B4E  083F               	movf	?___fttol,w
  5199  0B4F  00CD               	movwf	??_links_ausrichten
  5200  0B50  0840               	movf	?___fttol+1,w
  5201  0B51  00CE               	movwf	??_links_ausrichten+1
  5202  0B52  0841               	movf	?___fttol+2,w
  5203  0B53  00CF               	movwf	??_links_ausrichten+2
  5204  0B54  0842               	movf	?___fttol+3,w
  5205  0B55  00D0               	movwf	??_links_ausrichten+3
  5206                           
  5207                           ;PGM_5.c: 1057: opfer();
  5208  0B56  3195  2599  318A   	fcall	_opfer
  5209                           
  5210                           ;PGM_5.c: 1058: VAR_aus_zeit ++ ;
  5211  0B59  3001               	movlw	1
  5212  0B5A  0020               	movlb	0	; select bank0
  5213  0B5B  07D4               	addwf	_VAR_aus_zeit,f
  5214  0B5C  3000               	movlw	0
  5215  0B5D  3DD5               	addwfc	_VAR_aus_zeit+1,f
  5216  0B5E                     l713:	
  5217  0B5E  0021               	movlb	1	; select bank1
  5218  0B5F  0826               	movf	(_A_D_Wert^(0+128)+6),w
  5219  0B60  0221               	subwf	(_A_D_Wert^(0+128)+1),w
  5220  0B61  1803               	skipnc
  5221  0B62  2B6F               	goto	l4958
  5222  0B63  0020               	movlb	0	; select bank0
  5223  0B64  0855               	movf	_VAR_aus_zeit+1,w
  5224  0B65  3A80               	xorlw	128
  5225  0B66  00CD               	movwf	??_links_ausrichten
  5226  0B67  308B               	movlw	139
  5227  0B68  024D               	subwf	??_links_ausrichten,w
  5228  0B69  1D03               	skipz
  5229  0B6A  2B6D               	goto	u5475
  5230  0B6B  30B9               	movlw	185
  5231  0B6C  0254               	subwf	_VAR_aus_zeit,w
  5232  0B6D                     u5475:	
  5233  0B6D  1C03               	skipc
  5234  0B6E  2AFA               	goto	l4944
  5235  0B6F                     l4958:	
  5236                           
  5237                           ;PGM_5.c: 1059: }
  5238                           ;PGM_5.c: 1060: VAR_aus_zeit = 0;
  5239  0B6F  0020               	movlb	0	; select bank0
  5240  0B70  01D4               	clrf	_VAR_aus_zeit
  5241  0B71  01D5               	clrf	_VAR_aus_zeit+1
  5242  0B72                     l718:	
  5243                           ;PGM_5.c: 1061: while ((A_D_Wert [6] < A_D_Wert [1] ) && (VAR_aus_zeit <= 3000)){
  5244                           
  5245  0B72  0021               	movlb	1	; select bank1
  5246  0B73  0821               	movf	(_A_D_Wert^(0+128)+1),w
  5247  0B74  0226               	subwf	(_A_D_Wert^(0+128)+6),w
  5248  0B75  1803               	skipnc
  5249  0B76  0008               	return
  5250  0B77  0020               	movlb	0	; select bank0
  5251  0B78  0855               	movf	_VAR_aus_zeit+1,w
  5252  0B79  3A80               	xorlw	128
  5253  0B7A  00CD               	movwf	??_links_ausrichten
  5254  0B7B  308B               	movlw	139
  5255  0B7C  024D               	subwf	??_links_ausrichten,w
  5256  0B7D  1D03               	skipz
  5257  0B7E  2B81               	goto	u5495
  5258  0B7F  30B9               	movlw	185
  5259  0B80  0254               	subwf	_VAR_aus_zeit,w
  5260  0B81                     u5495:	
  5261  0B81  1803               	btfsc	3,0
  5262  0B82  0008               	return
  5263                           
  5264                           ;PGM_5.c: 1062: Power_Ausrichten();
  5265  0B83  3180  2003  318A   	fcall	_Power_Ausrichten
  5266                           
  5267                           ;PGM_5.c: 1063: LATD = (LATD & 0b11110000)|0b00000010 ;
  5268  0B86  0022               	movlb	2	; select bank2
  5269  0B87  080F               	movf	15,w	;volatile
  5270  0B88  39F0               	andlw	240
  5271  0B89  3802               	iorlw	2
  5272  0B8A  008F               	movwf	15	;volatile
  5273                           
  5274                           ;PGM_5.c: 1064: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  5275  0B8B  0020               	movlb	0	; select bank0
  5276  0B8C  086A               	movf	_Ausrichten_Fahren,w
  5277  0B8D  3191  218B  318A   	fcall	___lbtoft
  5278  0B90  0020               	movlb	0	; select bank0
  5279  0B91  0828               	movf	?___lbtoft,w
  5280  0B92  00B2               	movwf	___ftmul@f2
  5281  0B93  0829               	movf	?___lbtoft+1,w
  5282  0B94  00B3               	movwf	___ftmul@f2+1
  5283  0B95  082A               	movf	?___lbtoft+2,w
  5284  0B96  00B4               	movwf	___ftmul@f2+2
  5285  0B97  3040               	movlw	64
  5286  0B98  00AF               	movwf	___ftmul@f1
  5287  0B99  309C               	movlw	156
  5288  0B9A  00B0               	movwf	___ftmul@f1+1
  5289  0B9B  3045               	movlw	69
  5290  0B9C  00B1               	movwf	___ftmul@f1+2
  5291  0B9D  3197  274C  318A   	fcall	___ftmul
  5292  0BA0  0020               	movlb	0	; select bank0
  5293  0BA1  082F               	movf	?___ftmul,w
  5294  0BA2  00BF               	movwf	___fttol@f1
  5295  0BA3  0830               	movf	?___ftmul+1,w
  5296  0BA4  00C0               	movwf	___fttol@f1+1
  5297  0BA5  0831               	movf	?___ftmul+2,w
  5298  0BA6  00C1               	movwf	___fttol@f1+2
  5299  0BA7  3196  2620  318A   	fcall	___fttol
  5300  0BAA  0020               	movlb	0	; select bank0
  5301  0BAB  083F               	movf	?___fttol,w
  5302  0BAC  00CD               	movwf	??_links_ausrichten
  5303  0BAD  0840               	movf	?___fttol+1,w
  5304  0BAE  00CE               	movwf	??_links_ausrichten+1
  5305  0BAF  0841               	movf	?___fttol+2,w
  5306  0BB0  00CF               	movwf	??_links_ausrichten+2
  5307  0BB1  0842               	movf	?___fttol+3,w
  5308  0BB2  00D0               	movwf	??_links_ausrichten+3
  5309                           
  5310                           ;PGM_5.c: 1065: LATD = (LATD & 0b11110000);
  5311  0BB3  0022               	movlb	2	; select bank2
  5312  0BB4  080F               	movf	15,w	;volatile
  5313  0BB5  39F0               	andlw	240
  5314  0BB6  008F               	movwf	15	;volatile
  5315                           
  5316                           ;PGM_5.c: 1066: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  5317  0BB7  0020               	movlb	0	; select bank0
  5318  0BB8  0869               	movf	_Ausrichten_Stopp,w
  5319  0BB9  3191  218B  318A   	fcall	___lbtoft
  5320  0BBC  0020               	movlb	0	; select bank0
  5321  0BBD  0828               	movf	?___lbtoft,w
  5322  0BBE  00B2               	movwf	___ftmul@f2
  5323  0BBF  0829               	movf	?___lbtoft+1,w
  5324  0BC0  00B3               	movwf	___ftmul@f2+1
  5325  0BC1  082A               	movf	?___lbtoft+2,w
  5326  0BC2  00B4               	movwf	___ftmul@f2+2
  5327  0BC3  3040               	movlw	64
  5328  0BC4  00AF               	movwf	___ftmul@f1
  5329  0BC5  309C               	movlw	156
  5330  0BC6  00B0               	movwf	___ftmul@f1+1
  5331  0BC7  3045               	movlw	69
  5332  0BC8  00B1               	movwf	___ftmul@f1+2
  5333  0BC9  3197  274C  318A   	fcall	___ftmul
  5334  0BCC  0020               	movlb	0	; select bank0
  5335  0BCD  082F               	movf	?___ftmul,w
  5336  0BCE  00BF               	movwf	___fttol@f1
  5337  0BCF  0830               	movf	?___ftmul+1,w
  5338  0BD0  00C0               	movwf	___fttol@f1+1
  5339  0BD1  0831               	movf	?___ftmul+2,w
  5340  0BD2  00C1               	movwf	___fttol@f1+2
  5341  0BD3  3196  2620  318A   	fcall	___fttol
  5342  0BD6  0020               	movlb	0	; select bank0
  5343  0BD7  083F               	movf	?___fttol,w
  5344  0BD8  00CD               	movwf	??_links_ausrichten
  5345  0BD9  0840               	movf	?___fttol+1,w
  5346  0BDA  00CE               	movwf	??_links_ausrichten+1
  5347  0BDB  0841               	movf	?___fttol+2,w
  5348  0BDC  00CF               	movwf	??_links_ausrichten+2
  5349  0BDD  0842               	movf	?___fttol+3,w
  5350  0BDE  00D0               	movwf	??_links_ausrichten+3
  5351                           
  5352                           ;PGM_5.c: 1067: opfer();
  5353  0BDF  3195  2599  318A   	fcall	_opfer
  5354                           
  5355                           ;PGM_5.c: 1068: VAR_aus_zeit ++ ;
  5356  0BE2  3001               	movlw	1
  5357  0BE3  0020               	movlb	0	; select bank0
  5358  0BE4  07D4               	addwf	_VAR_aus_zeit,f
  5359  0BE5  3000               	movlw	0
  5360  0BE6  3DD5               	addwfc	_VAR_aus_zeit+1,f
  5361  0BE7  2B72               	goto	l718
  5362  0BE8                     __end_of_links_ausrichten:	
  5363                           
  5364                           	psect	text13
  5365  0D02                     __ptext13:	
  5366 ;; *************** function _hinten_ausrichten *****************
  5367 ;; Defined at:
  5368 ;;		line 982 in file "PGM_5.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;		None
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;		None
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, status,2, status,0, pclath, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5384 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5385 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5386 ;;Total ram usage:        4 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    6
  5389 ;; This function calls:
  5390 ;;		_Power_Ausrichten
  5391 ;;		___ftmul
  5392 ;;		___fttol
  5393 ;;		___lbtoft
  5394 ;;		_opfer
  5395 ;; This function is called by:
  5396 ;;		_ausrichten
  5397 ;; This function uses a non-reentrant model
  5398 ;;
  5399                           
  5400                           
  5401                           ;psect for function _hinten_ausrichten
  5402  0D02                     _hinten_ausrichten:	
  5403                           
  5404                           ;PGM_5.c: 983: if ((A_D_Wert [4] >Schwellwert_Ausrichten)&&( A_D_Wert [7] > Schwellwert_
      +                          Ausrichten )) {
  5405                           
  5406                           ;incstack = 0
  5407                           ; Regs used in _hinten_ausrichten: [wreg+status,2+status,0+pclath+cstack]
  5408  0D02  0021               	movlb	1	; select bank1
  5409  0D03  0824               	movf	(_A_D_Wert^(0+128)+4),w
  5410  0D04  0020               	movlb	0	; select bank0
  5411  0D05  0268               	subwf	_Schwellwert_Ausrichten,w
  5412  0D06  1803               	skipnc
  5413  0D07  0008               	return
  5414  0D08  0021               	movlb	1	; select bank1
  5415  0D09  0827               	movf	(_A_D_Wert^(0+128)+7),w
  5416  0D0A  0020               	movlb	0	; select bank0
  5417  0D0B  0268               	subwf	_Schwellwert_Ausrichten,w
  5418  0D0C  1803               	skipnc
  5419  0D0D  0008               	return
  5420  0D0E  2D73               	goto	l679
  5421  0D0F                     l5152:	
  5422                           ;PGM_5.c: 984: while ((A_D_Wert [7] < 81)&&(VAR_aus_zeit <= 3000)){
  5423                           
  5424                           
  5425                           ;PGM_5.c: 985: Power_Ausrichten();
  5426  0D0F  3180  2003  318D   	fcall	_Power_Ausrichten
  5427                           
  5428                           ;PGM_5.c: 986: LATD = (LATD & 0b11110000)|0b00000101;
  5429  0D12  0022               	movlb	2	; select bank2
  5430  0D13  080F               	movf	15,w	;volatile
  5431  0D14  39F0               	andlw	240
  5432  0D15  3805               	iorlw	5
  5433  0D16  008F               	movwf	15	;volatile
  5434                           
  5435                           ;PGM_5.c: 987: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  5436  0D17  0020               	movlb	0	; select bank0
  5437  0D18  086A               	movf	_Ausrichten_Fahren,w
  5438  0D19  3191  218B  318D   	fcall	___lbtoft
  5439  0D1C  0020               	movlb	0	; select bank0
  5440  0D1D  0828               	movf	?___lbtoft,w
  5441  0D1E  00B2               	movwf	___ftmul@f2
  5442  0D1F  0829               	movf	?___lbtoft+1,w
  5443  0D20  00B3               	movwf	___ftmul@f2+1
  5444  0D21  082A               	movf	?___lbtoft+2,w
  5445  0D22  00B4               	movwf	___ftmul@f2+2
  5446  0D23  3040               	movlw	64
  5447  0D24  00AF               	movwf	___ftmul@f1
  5448  0D25  309C               	movlw	156
  5449  0D26  00B0               	movwf	___ftmul@f1+1
  5450  0D27  3045               	movlw	69
  5451  0D28  00B1               	movwf	___ftmul@f1+2
  5452  0D29  3197  274C  318D   	fcall	___ftmul
  5453  0D2C  0020               	movlb	0	; select bank0
  5454  0D2D  082F               	movf	?___ftmul,w
  5455  0D2E  00BF               	movwf	___fttol@f1
  5456  0D2F  0830               	movf	?___ftmul+1,w
  5457  0D30  00C0               	movwf	___fttol@f1+1
  5458  0D31  0831               	movf	?___ftmul+2,w
  5459  0D32  00C1               	movwf	___fttol@f1+2
  5460  0D33  3196  2620  318D   	fcall	___fttol
  5461  0D36  0020               	movlb	0	; select bank0
  5462  0D37  083F               	movf	?___fttol,w
  5463  0D38  00CD               	movwf	??_hinten_ausrichten
  5464  0D39  0840               	movf	?___fttol+1,w
  5465  0D3A  00CE               	movwf	??_hinten_ausrichten+1
  5466  0D3B  0841               	movf	?___fttol+2,w
  5467  0D3C  00CF               	movwf	??_hinten_ausrichten+2
  5468  0D3D  0842               	movf	?___fttol+3,w
  5469  0D3E  00D0               	movwf	??_hinten_ausrichten+3
  5470                           
  5471                           ;PGM_5.c: 988: LATD = (LATD & 0b11110000);
  5472  0D3F  0022               	movlb	2	; select bank2
  5473  0D40  080F               	movf	15,w	;volatile
  5474  0D41  39F0               	andlw	240
  5475  0D42  008F               	movwf	15	;volatile
  5476                           
  5477                           ;PGM_5.c: 989: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  5478  0D43  0020               	movlb	0	; select bank0
  5479  0D44  0869               	movf	_Ausrichten_Stopp,w
  5480  0D45  3191  218B  318D   	fcall	___lbtoft
  5481  0D48  0020               	movlb	0	; select bank0
  5482  0D49  0828               	movf	?___lbtoft,w
  5483  0D4A  00B2               	movwf	___ftmul@f2
  5484  0D4B  0829               	movf	?___lbtoft+1,w
  5485  0D4C  00B3               	movwf	___ftmul@f2+1
  5486  0D4D  082A               	movf	?___lbtoft+2,w
  5487  0D4E  00B4               	movwf	___ftmul@f2+2
  5488  0D4F  3040               	movlw	64
  5489  0D50  00AF               	movwf	___ftmul@f1
  5490  0D51  309C               	movlw	156
  5491  0D52  00B0               	movwf	___ftmul@f1+1
  5492  0D53  3045               	movlw	69
  5493  0D54  00B1               	movwf	___ftmul@f1+2
  5494  0D55  3197  274C  318D   	fcall	___ftmul
  5495  0D58  0020               	movlb	0	; select bank0
  5496  0D59  082F               	movf	?___ftmul,w
  5497  0D5A  00BF               	movwf	___fttol@f1
  5498  0D5B  0830               	movf	?___ftmul+1,w
  5499  0D5C  00C0               	movwf	___fttol@f1+1
  5500  0D5D  0831               	movf	?___ftmul+2,w
  5501  0D5E  00C1               	movwf	___fttol@f1+2
  5502  0D5F  3196  2620  318D   	fcall	___fttol
  5503  0D62  0020               	movlb	0	; select bank0
  5504  0D63  083F               	movf	?___fttol,w
  5505  0D64  00CD               	movwf	??_hinten_ausrichten
  5506  0D65  0840               	movf	?___fttol+1,w
  5507  0D66  00CE               	movwf	??_hinten_ausrichten+1
  5508  0D67  0841               	movf	?___fttol+2,w
  5509  0D68  00CF               	movwf	??_hinten_ausrichten+2
  5510  0D69  0842               	movf	?___fttol+3,w
  5511  0D6A  00D0               	movwf	??_hinten_ausrichten+3
  5512                           
  5513                           ;PGM_5.c: 990: opfer();
  5514  0D6B  3195  2599  318D   	fcall	_opfer
  5515                           
  5516                           ;PGM_5.c: 991: VAR_aus_zeit ++ ;
  5517  0D6E  3001               	movlw	1
  5518  0D6F  0020               	movlb	0	; select bank0
  5519  0D70  07D4               	addwf	_VAR_aus_zeit,f
  5520  0D71  3000               	movlw	0
  5521  0D72  3DD5               	addwfc	_VAR_aus_zeit+1,f
  5522  0D73                     l679:	
  5523  0D73  3051               	movlw	81
  5524  0D74  0021               	movlb	1	; select bank1
  5525  0D75  0227               	subwf	(_A_D_Wert^(0+128)+7),w
  5526  0D76  1803               	skipnc
  5527  0D77  2D84               	goto	l5166
  5528  0D78  0020               	movlb	0	; select bank0
  5529  0D79  0855               	movf	_VAR_aus_zeit+1,w
  5530  0D7A  3A80               	xorlw	128
  5531  0D7B  00CD               	movwf	??_hinten_ausrichten
  5532  0D7C  308B               	movlw	139
  5533  0D7D  024D               	subwf	??_hinten_ausrichten,w
  5534  0D7E  1D03               	skipz
  5535  0D7F  2D82               	goto	u5815
  5536  0D80  30B9               	movlw	185
  5537  0D81  0254               	subwf	_VAR_aus_zeit,w
  5538  0D82                     u5815:	
  5539  0D82  1C03               	skipc
  5540  0D83  2D0F               	goto	l5152
  5541  0D84                     l5166:	
  5542                           
  5543                           ;PGM_5.c: 992: }
  5544                           ;PGM_5.c: 993: VAR_aus_zeit = 0;
  5545  0D84  0020               	movlb	0	; select bank0
  5546  0D85  01D4               	clrf	_VAR_aus_zeit
  5547  0D86  01D5               	clrf	_VAR_aus_zeit+1
  5548                           
  5549                           ;PGM_5.c: 994: while ((A_D_Wert [7] > 77)&&(VAR_aus_zeit <= 3000)){
  5550  0D87  2DEC               	goto	l684
  5551  0D88                     l5168:	
  5552                           
  5553                           ;PGM_5.c: 995: Power_Ausrichten();
  5554  0D88  3180  2003  318D   	fcall	_Power_Ausrichten
  5555                           
  5556                           ;PGM_5.c: 996: LATD = (LATD & 0b11110000)|0b00001010;
  5557  0D8B  0022               	movlb	2	; select bank2
  5558  0D8C  080F               	movf	15,w	;volatile
  5559  0D8D  39F0               	andlw	240
  5560  0D8E  380A               	iorlw	10
  5561  0D8F  008F               	movwf	15	;volatile
  5562                           
  5563                           ;PGM_5.c: 997: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  5564  0D90  0020               	movlb	0	; select bank0
  5565  0D91  086A               	movf	_Ausrichten_Fahren,w
  5566  0D92  3191  218B  318D   	fcall	___lbtoft
  5567  0D95  0020               	movlb	0	; select bank0
  5568  0D96  0828               	movf	?___lbtoft,w
  5569  0D97  00B2               	movwf	___ftmul@f2
  5570  0D98  0829               	movf	?___lbtoft+1,w
  5571  0D99  00B3               	movwf	___ftmul@f2+1
  5572  0D9A  082A               	movf	?___lbtoft+2,w
  5573  0D9B  00B4               	movwf	___ftmul@f2+2
  5574  0D9C  3040               	movlw	64
  5575  0D9D  00AF               	movwf	___ftmul@f1
  5576  0D9E  309C               	movlw	156
  5577  0D9F  00B0               	movwf	___ftmul@f1+1
  5578  0DA0  3045               	movlw	69
  5579  0DA1  00B1               	movwf	___ftmul@f1+2
  5580  0DA2  3197  274C  318D   	fcall	___ftmul
  5581  0DA5  0020               	movlb	0	; select bank0
  5582  0DA6  082F               	movf	?___ftmul,w
  5583  0DA7  00BF               	movwf	___fttol@f1
  5584  0DA8  0830               	movf	?___ftmul+1,w
  5585  0DA9  00C0               	movwf	___fttol@f1+1
  5586  0DAA  0831               	movf	?___ftmul+2,w
  5587  0DAB  00C1               	movwf	___fttol@f1+2
  5588  0DAC  3196  2620  318D   	fcall	___fttol
  5589  0DAF  0020               	movlb	0	; select bank0
  5590  0DB0  083F               	movf	?___fttol,w
  5591  0DB1  00CD               	movwf	??_hinten_ausrichten
  5592  0DB2  0840               	movf	?___fttol+1,w
  5593  0DB3  00CE               	movwf	??_hinten_ausrichten+1
  5594  0DB4  0841               	movf	?___fttol+2,w
  5595  0DB5  00CF               	movwf	??_hinten_ausrichten+2
  5596  0DB6  0842               	movf	?___fttol+3,w
  5597  0DB7  00D0               	movwf	??_hinten_ausrichten+3
  5598                           
  5599                           ;PGM_5.c: 998: LATD = (LATD & 0b11110000);
  5600  0DB8  0022               	movlb	2	; select bank2
  5601  0DB9  080F               	movf	15,w	;volatile
  5602  0DBA  39F0               	andlw	240
  5603  0DBB  008F               	movwf	15	;volatile
  5604                           
  5605                           ;PGM_5.c: 999: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  5606  0DBC  0020               	movlb	0	; select bank0
  5607  0DBD  0869               	movf	_Ausrichten_Stopp,w
  5608  0DBE  3191  218B  318D   	fcall	___lbtoft
  5609  0DC1  0020               	movlb	0	; select bank0
  5610  0DC2  0828               	movf	?___lbtoft,w
  5611  0DC3  00B2               	movwf	___ftmul@f2
  5612  0DC4  0829               	movf	?___lbtoft+1,w
  5613  0DC5  00B3               	movwf	___ftmul@f2+1
  5614  0DC6  082A               	movf	?___lbtoft+2,w
  5615  0DC7  00B4               	movwf	___ftmul@f2+2
  5616  0DC8  3040               	movlw	64
  5617  0DC9  00AF               	movwf	___ftmul@f1
  5618  0DCA  309C               	movlw	156
  5619  0DCB  00B0               	movwf	___ftmul@f1+1
  5620  0DCC  3045               	movlw	69
  5621  0DCD  00B1               	movwf	___ftmul@f1+2
  5622  0DCE  3197  274C  318D   	fcall	___ftmul
  5623  0DD1  0020               	movlb	0	; select bank0
  5624  0DD2  082F               	movf	?___ftmul,w
  5625  0DD3  00BF               	movwf	___fttol@f1
  5626  0DD4  0830               	movf	?___ftmul+1,w
  5627  0DD5  00C0               	movwf	___fttol@f1+1
  5628  0DD6  0831               	movf	?___ftmul+2,w
  5629  0DD7  00C1               	movwf	___fttol@f1+2
  5630  0DD8  3196  2620  318D   	fcall	___fttol
  5631  0DDB  0020               	movlb	0	; select bank0
  5632  0DDC  083F               	movf	?___fttol,w
  5633  0DDD  00CD               	movwf	??_hinten_ausrichten
  5634  0DDE  0840               	movf	?___fttol+1,w
  5635  0DDF  00CE               	movwf	??_hinten_ausrichten+1
  5636  0DE0  0841               	movf	?___fttol+2,w
  5637  0DE1  00CF               	movwf	??_hinten_ausrichten+2
  5638  0DE2  0842               	movf	?___fttol+3,w
  5639  0DE3  00D0               	movwf	??_hinten_ausrichten+3
  5640                           
  5641                           ;PGM_5.c: 1000: opfer();
  5642  0DE4  3195  2599  318D   	fcall	_opfer
  5643                           
  5644                           ;PGM_5.c: 1001: VAR_aus_zeit ++ ;
  5645  0DE7  3001               	movlw	1
  5646  0DE8  0020               	movlb	0	; select bank0
  5647  0DE9  07D4               	addwf	_VAR_aus_zeit,f
  5648  0DEA  3000               	movlw	0
  5649  0DEB  3DD5               	addwfc	_VAR_aus_zeit+1,f
  5650  0DEC                     l684:	
  5651  0DEC  304E               	movlw	78
  5652  0DED  0021               	movlb	1	; select bank1
  5653  0DEE  0227               	subwf	(_A_D_Wert^(0+128)+7),w
  5654  0DEF  1C03               	skipc
  5655  0DF0  2DFD               	goto	l5182
  5656  0DF1  0020               	movlb	0	; select bank0
  5657  0DF2  0855               	movf	_VAR_aus_zeit+1,w
  5658  0DF3  3A80               	xorlw	128
  5659  0DF4  00CD               	movwf	??_hinten_ausrichten
  5660  0DF5  308B               	movlw	139
  5661  0DF6  024D               	subwf	??_hinten_ausrichten,w
  5662  0DF7  1D03               	skipz
  5663  0DF8  2DFB               	goto	u5835
  5664  0DF9  30B9               	movlw	185
  5665  0DFA  0254               	subwf	_VAR_aus_zeit,w
  5666  0DFB                     u5835:	
  5667  0DFB  1C03               	skipc
  5668  0DFC  2D88               	goto	l5168
  5669  0DFD                     l5182:	
  5670                           
  5671                           ;PGM_5.c: 1002: }
  5672                           ;PGM_5.c: 1003: VAR_aus_zeit = 0;
  5673  0DFD  0020               	movlb	0	; select bank0
  5674  0DFE  01D4               	clrf	_VAR_aus_zeit
  5675  0DFF  01D5               	clrf	_VAR_aus_zeit+1
  5676                           
  5677                           ;PGM_5.c: 1005: while (A_D_Wert [4] > (A_D_Wert [7] +2) && (VAR_aus_zeit <= 3000)){
  5678  0E00  2E65               	goto	l689
  5679  0E01                     l5184:	
  5680                           
  5681                           ;PGM_5.c: 1006: Power_Ausrichten();
  5682  0E01  3180  2003  318D   	fcall	_Power_Ausrichten
  5683                           
  5684                           ;PGM_5.c: 1007: LATD = (LATD & 0b11110000)|0b00001000;
  5685  0E04  0022               	movlb	2	; select bank2
  5686  0E05  080F               	movf	15,w	;volatile
  5687  0E06  39F0               	andlw	240
  5688  0E07  3808               	iorlw	8
  5689  0E08  008F               	movwf	15	;volatile
  5690                           
  5691                           ;PGM_5.c: 1008: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  5692  0E09  0020               	movlb	0	; select bank0
  5693  0E0A  086A               	movf	_Ausrichten_Fahren,w
  5694  0E0B  3191  218B  318D   	fcall	___lbtoft
  5695  0E0E  0020               	movlb	0	; select bank0
  5696  0E0F  0828               	movf	?___lbtoft,w
  5697  0E10  00B2               	movwf	___ftmul@f2
  5698  0E11  0829               	movf	?___lbtoft+1,w
  5699  0E12  00B3               	movwf	___ftmul@f2+1
  5700  0E13  082A               	movf	?___lbtoft+2,w
  5701  0E14  00B4               	movwf	___ftmul@f2+2
  5702  0E15  3040               	movlw	64
  5703  0E16  00AF               	movwf	___ftmul@f1
  5704  0E17  309C               	movlw	156
  5705  0E18  00B0               	movwf	___ftmul@f1+1
  5706  0E19  3045               	movlw	69
  5707  0E1A  00B1               	movwf	___ftmul@f1+2
  5708  0E1B  3197  274C  318D   	fcall	___ftmul
  5709  0E1E  0020               	movlb	0	; select bank0
  5710  0E1F  082F               	movf	?___ftmul,w
  5711  0E20  00BF               	movwf	___fttol@f1
  5712  0E21  0830               	movf	?___ftmul+1,w
  5713  0E22  00C0               	movwf	___fttol@f1+1
  5714  0E23  0831               	movf	?___ftmul+2,w
  5715  0E24  00C1               	movwf	___fttol@f1+2
  5716  0E25  3196  2620  318D   	fcall	___fttol
  5717  0E28  0020               	movlb	0	; select bank0
  5718  0E29  083F               	movf	?___fttol,w
  5719  0E2A  00CD               	movwf	??_hinten_ausrichten
  5720  0E2B  0840               	movf	?___fttol+1,w
  5721  0E2C  00CE               	movwf	??_hinten_ausrichten+1
  5722  0E2D  0841               	movf	?___fttol+2,w
  5723  0E2E  00CF               	movwf	??_hinten_ausrichten+2
  5724  0E2F  0842               	movf	?___fttol+3,w
  5725  0E30  00D0               	movwf	??_hinten_ausrichten+3
  5726                           
  5727                           ;PGM_5.c: 1009: LATD = (LATD & 0b11110000);
  5728  0E31  0022               	movlb	2	; select bank2
  5729  0E32  080F               	movf	15,w	;volatile
  5730  0E33  39F0               	andlw	240
  5731  0E34  008F               	movwf	15	;volatile
  5732                           
  5733                           ;PGM_5.c: 1010: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  5734  0E35  0020               	movlb	0	; select bank0
  5735  0E36  0869               	movf	_Ausrichten_Stopp,w
  5736  0E37  3191  218B  318D   	fcall	___lbtoft
  5737  0E3A  0020               	movlb	0	; select bank0
  5738  0E3B  0828               	movf	?___lbtoft,w
  5739  0E3C  00B2               	movwf	___ftmul@f2
  5740  0E3D  0829               	movf	?___lbtoft+1,w
  5741  0E3E  00B3               	movwf	___ftmul@f2+1
  5742  0E3F  082A               	movf	?___lbtoft+2,w
  5743  0E40  00B4               	movwf	___ftmul@f2+2
  5744  0E41  3040               	movlw	64
  5745  0E42  00AF               	movwf	___ftmul@f1
  5746  0E43  309C               	movlw	156
  5747  0E44  00B0               	movwf	___ftmul@f1+1
  5748  0E45  3045               	movlw	69
  5749  0E46  00B1               	movwf	___ftmul@f1+2
  5750  0E47  3197  274C  318D   	fcall	___ftmul
  5751  0E4A  0020               	movlb	0	; select bank0
  5752  0E4B  082F               	movf	?___ftmul,w
  5753  0E4C  00BF               	movwf	___fttol@f1
  5754  0E4D  0830               	movf	?___ftmul+1,w
  5755  0E4E  00C0               	movwf	___fttol@f1+1
  5756  0E4F  0831               	movf	?___ftmul+2,w
  5757  0E50  00C1               	movwf	___fttol@f1+2
  5758  0E51  3196  2620  318D   	fcall	___fttol
  5759  0E54  0020               	movlb	0	; select bank0
  5760  0E55  083F               	movf	?___fttol,w
  5761  0E56  00CD               	movwf	??_hinten_ausrichten
  5762  0E57  0840               	movf	?___fttol+1,w
  5763  0E58  00CE               	movwf	??_hinten_ausrichten+1
  5764  0E59  0841               	movf	?___fttol+2,w
  5765  0E5A  00CF               	movwf	??_hinten_ausrichten+2
  5766  0E5B  0842               	movf	?___fttol+3,w
  5767  0E5C  00D0               	movwf	??_hinten_ausrichten+3
  5768                           
  5769                           ;PGM_5.c: 1011: opfer();
  5770  0E5D  3195  2599  318D   	fcall	_opfer
  5771                           
  5772                           ;PGM_5.c: 1012: VAR_aus_zeit ++ ;
  5773  0E60  3001               	movlw	1
  5774  0E61  0020               	movlb	0	; select bank0
  5775  0E62  07D4               	addwf	_VAR_aus_zeit,f
  5776  0E63  3000               	movlw	0
  5777  0E64  3DD5               	addwfc	_VAR_aus_zeit+1,f
  5778  0E65                     l689:	
  5779  0E65  0021               	movlb	1	; select bank1
  5780  0E66  0827               	movf	(_A_D_Wert^(0+128)+7),w
  5781  0E67  3E02               	addlw	2
  5782  0E68  0020               	movlb	0	; select bank0
  5783  0E69  00CD               	movwf	??_hinten_ausrichten
  5784  0E6A  3000               	movlw	0
  5785  0E6B  1803               	skipnc
  5786  0E6C  3001               	movlw	1
  5787  0E6D  00CE               	movwf	??_hinten_ausrichten+1
  5788  0E6E  084E               	movf	??_hinten_ausrichten+1,w
  5789  0E6F  3A80               	xorlw	128
  5790  0E70  00CF               	movwf	??_hinten_ausrichten+2
  5791  0E71  3080               	movlw	128
  5792  0E72  024F               	subwf	??_hinten_ausrichten+2,w
  5793  0E73  1D03               	skipz
  5794  0E74  2E79               	goto	u5845
  5795  0E75  0021               	movlb	1	; select bank1
  5796  0E76  0824               	movf	(_A_D_Wert^(0+128)+4),w
  5797  0E77  0020               	movlb	0	; select bank0
  5798  0E78  024D               	subwf	??_hinten_ausrichten,w
  5799  0E79                     u5845:	
  5800  0E79  1803               	skipnc
  5801  0E7A  2E87               	goto	l5198
  5802  0E7B  0020               	movlb	0	; select bank0
  5803  0E7C  0855               	movf	_VAR_aus_zeit+1,w
  5804  0E7D  3A80               	xorlw	128
  5805  0E7E  00CD               	movwf	??_hinten_ausrichten
  5806  0E7F  308B               	movlw	139
  5807  0E80  024D               	subwf	??_hinten_ausrichten,w
  5808  0E81  1D03               	skipz
  5809  0E82  2E85               	goto	u5855
  5810  0E83  30B9               	movlw	185
  5811  0E84  0254               	subwf	_VAR_aus_zeit,w
  5812  0E85                     u5855:	
  5813  0E85  1C03               	skipc
  5814  0E86  2E01               	goto	l5184
  5815  0E87                     l5198:	
  5816                           
  5817                           ;PGM_5.c: 1013: }
  5818                           ;PGM_5.c: 1014: VAR_aus_zeit = 0;
  5819  0E87  0020               	movlb	0	; select bank0
  5820  0E88  01D4               	clrf	_VAR_aus_zeit
  5821  0E89  01D5               	clrf	_VAR_aus_zeit+1
  5822                           
  5823                           ;PGM_5.c: 1015: while(A_D_Wert [4] < (A_D_Wert [7] +2 )&& (VAR_aus_zeit <= 3000)){
  5824  0E8A  2EEF               	goto	l694
  5825  0E8B                     l5200:	
  5826                           
  5827                           ;PGM_5.c: 1016: Power_Ausrichten();
  5828  0E8B  3180  2003  318D   	fcall	_Power_Ausrichten
  5829                           
  5830                           ;PGM_5.c: 1017: LATD = (LATD & 0b11110000)|0b00000010;
  5831  0E8E  0022               	movlb	2	; select bank2
  5832  0E8F  080F               	movf	15,w	;volatile
  5833  0E90  39F0               	andlw	240
  5834  0E91  3802               	iorlw	2
  5835  0E92  008F               	movwf	15	;volatile
  5836                           
  5837                           ;PGM_5.c: 1018: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  5838  0E93  0020               	movlb	0	; select bank0
  5839  0E94  086A               	movf	_Ausrichten_Fahren,w
  5840  0E95  3191  218B  318D   	fcall	___lbtoft
  5841  0E98  0020               	movlb	0	; select bank0
  5842  0E99  0828               	movf	?___lbtoft,w
  5843  0E9A  00B2               	movwf	___ftmul@f2
  5844  0E9B  0829               	movf	?___lbtoft+1,w
  5845  0E9C  00B3               	movwf	___ftmul@f2+1
  5846  0E9D  082A               	movf	?___lbtoft+2,w
  5847  0E9E  00B4               	movwf	___ftmul@f2+2
  5848  0E9F  3040               	movlw	64
  5849  0EA0  00AF               	movwf	___ftmul@f1
  5850  0EA1  309C               	movlw	156
  5851  0EA2  00B0               	movwf	___ftmul@f1+1
  5852  0EA3  3045               	movlw	69
  5853  0EA4  00B1               	movwf	___ftmul@f1+2
  5854  0EA5  3197  274C  318D   	fcall	___ftmul
  5855  0EA8  0020               	movlb	0	; select bank0
  5856  0EA9  082F               	movf	?___ftmul,w
  5857  0EAA  00BF               	movwf	___fttol@f1
  5858  0EAB  0830               	movf	?___ftmul+1,w
  5859  0EAC  00C0               	movwf	___fttol@f1+1
  5860  0EAD  0831               	movf	?___ftmul+2,w
  5861  0EAE  00C1               	movwf	___fttol@f1+2
  5862  0EAF  3196  2620  318D   	fcall	___fttol
  5863  0EB2  0020               	movlb	0	; select bank0
  5864  0EB3  083F               	movf	?___fttol,w
  5865  0EB4  00CD               	movwf	??_hinten_ausrichten
  5866  0EB5  0840               	movf	?___fttol+1,w
  5867  0EB6  00CE               	movwf	??_hinten_ausrichten+1
  5868  0EB7  0841               	movf	?___fttol+2,w
  5869  0EB8  00CF               	movwf	??_hinten_ausrichten+2
  5870  0EB9  0842               	movf	?___fttol+3,w
  5871  0EBA  00D0               	movwf	??_hinten_ausrichten+3
  5872                           
  5873                           ;PGM_5.c: 1019: LATD = (LATD & 0b11110000);
  5874  0EBB  0022               	movlb	2	; select bank2
  5875  0EBC  080F               	movf	15,w	;volatile
  5876  0EBD  39F0               	andlw	240
  5877  0EBE  008F               	movwf	15	;volatile
  5878                           
  5879                           ;PGM_5.c: 1020: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  5880  0EBF  0020               	movlb	0	; select bank0
  5881  0EC0  0869               	movf	_Ausrichten_Stopp,w
  5882  0EC1  3191  218B  318D   	fcall	___lbtoft
  5883  0EC4  0020               	movlb	0	; select bank0
  5884  0EC5  0828               	movf	?___lbtoft,w
  5885  0EC6  00B2               	movwf	___ftmul@f2
  5886  0EC7  0829               	movf	?___lbtoft+1,w
  5887  0EC8  00B3               	movwf	___ftmul@f2+1
  5888  0EC9  082A               	movf	?___lbtoft+2,w
  5889  0ECA  00B4               	movwf	___ftmul@f2+2
  5890  0ECB  3040               	movlw	64
  5891  0ECC  00AF               	movwf	___ftmul@f1
  5892  0ECD  309C               	movlw	156
  5893  0ECE  00B0               	movwf	___ftmul@f1+1
  5894  0ECF  3045               	movlw	69
  5895  0ED0  00B1               	movwf	___ftmul@f1+2
  5896  0ED1  3197  274C  318D   	fcall	___ftmul
  5897  0ED4  0020               	movlb	0	; select bank0
  5898  0ED5  082F               	movf	?___ftmul,w
  5899  0ED6  00BF               	movwf	___fttol@f1
  5900  0ED7  0830               	movf	?___ftmul+1,w
  5901  0ED8  00C0               	movwf	___fttol@f1+1
  5902  0ED9  0831               	movf	?___ftmul+2,w
  5903  0EDA  00C1               	movwf	___fttol@f1+2
  5904  0EDB  3196  2620  318D   	fcall	___fttol
  5905  0EDE  0020               	movlb	0	; select bank0
  5906  0EDF  083F               	movf	?___fttol,w
  5907  0EE0  00CD               	movwf	??_hinten_ausrichten
  5908  0EE1  0840               	movf	?___fttol+1,w
  5909  0EE2  00CE               	movwf	??_hinten_ausrichten+1
  5910  0EE3  0841               	movf	?___fttol+2,w
  5911  0EE4  00CF               	movwf	??_hinten_ausrichten+2
  5912  0EE5  0842               	movf	?___fttol+3,w
  5913  0EE6  00D0               	movwf	??_hinten_ausrichten+3
  5914                           
  5915                           ;PGM_5.c: 1021: opfer();
  5916  0EE7  3195  2599  318D   	fcall	_opfer
  5917                           
  5918                           ;PGM_5.c: 1022: VAR_aus_zeit ++ ;
  5919  0EEA  3001               	movlw	1
  5920  0EEB  0020               	movlb	0	; select bank0
  5921  0EEC  07D4               	addwf	_VAR_aus_zeit,f
  5922  0EED  3000               	movlw	0
  5923  0EEE  3DD5               	addwfc	_VAR_aus_zeit+1,f
  5924  0EEF                     l694:	
  5925  0EEF  0021               	movlb	1	; select bank1
  5926  0EF0  0827               	movf	(_A_D_Wert^(0+128)+7),w
  5927  0EF1  3E02               	addlw	2
  5928  0EF2  0020               	movlb	0	; select bank0
  5929  0EF3  00CD               	movwf	??_hinten_ausrichten
  5930  0EF4  3000               	movlw	0
  5931  0EF5  1803               	skipnc
  5932  0EF6  3001               	movlw	1
  5933  0EF7  00CE               	movwf	??_hinten_ausrichten+1
  5934  0EF8  084E               	movf	??_hinten_ausrichten+1,w
  5935  0EF9  3A80               	xorlw	128
  5936  0EFA  3C80               	sublw	128
  5937  0EFB  1D03               	skipz
  5938  0EFC  2F00               	goto	u5865
  5939  0EFD  084D               	movf	??_hinten_ausrichten,w
  5940  0EFE  0021               	movlb	1	; select bank1
  5941  0EFF  0224               	subwf	(_A_D_Wert^(0+128)+4),w
  5942  0F00                     u5865:	
  5943  0F00  1803               	skipnc
  5944  0F01  2F0E               	goto	l5214
  5945  0F02  0020               	movlb	0	; select bank0
  5946  0F03  0855               	movf	_VAR_aus_zeit+1,w
  5947  0F04  3A80               	xorlw	128
  5948  0F05  00CD               	movwf	??_hinten_ausrichten
  5949  0F06  308B               	movlw	139
  5950  0F07  024D               	subwf	??_hinten_ausrichten,w
  5951  0F08  1D03               	skipz
  5952  0F09  2F0C               	goto	u5875
  5953  0F0A  30B9               	movlw	185
  5954  0F0B  0254               	subwf	_VAR_aus_zeit,w
  5955  0F0C                     u5875:	
  5956  0F0C  1C03               	skipc
  5957  0F0D  2E8B               	goto	l5200
  5958  0F0E                     l5214:	
  5959                           
  5960                           ;PGM_5.c: 1023: }
  5961                           ;PGM_5.c: 1024: VAR_aus_zeit = 0;
  5962  0F0E  0020               	movlb	0	; select bank0
  5963  0F0F  01D4               	clrf	_VAR_aus_zeit
  5964  0F10  01D5               	clrf	_VAR_aus_zeit+1
  5965                           
  5966                           ;PGM_5.c: 1026: while ((A_D_Wert [7] < 81)&&(VAR_aus_zeit <= 3000)){
  5967  0F11  2F76               	goto	l699
  5968  0F12                     l5216:	
  5969                           
  5970                           ;PGM_5.c: 1027: Power_Ausrichten();
  5971  0F12  3180  2003  318D   	fcall	_Power_Ausrichten
  5972                           
  5973                           ;PGM_5.c: 1028: LATD = (LATD & 0b11110000)|0b00000101;
  5974  0F15  0022               	movlb	2	; select bank2
  5975  0F16  080F               	movf	15,w	;volatile
  5976  0F17  39F0               	andlw	240
  5977  0F18  3805               	iorlw	5
  5978  0F19  008F               	movwf	15	;volatile
  5979                           
  5980                           ;PGM_5.c: 1029: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  5981  0F1A  0020               	movlb	0	; select bank0
  5982  0F1B  086A               	movf	_Ausrichten_Fahren,w
  5983  0F1C  3191  218B  318D   	fcall	___lbtoft
  5984  0F1F  0020               	movlb	0	; select bank0
  5985  0F20  0828               	movf	?___lbtoft,w
  5986  0F21  00B2               	movwf	___ftmul@f2
  5987  0F22  0829               	movf	?___lbtoft+1,w
  5988  0F23  00B3               	movwf	___ftmul@f2+1
  5989  0F24  082A               	movf	?___lbtoft+2,w
  5990  0F25  00B4               	movwf	___ftmul@f2+2
  5991  0F26  3040               	movlw	64
  5992  0F27  00AF               	movwf	___ftmul@f1
  5993  0F28  309C               	movlw	156
  5994  0F29  00B0               	movwf	___ftmul@f1+1
  5995  0F2A  3045               	movlw	69
  5996  0F2B  00B1               	movwf	___ftmul@f1+2
  5997  0F2C  3197  274C  318D   	fcall	___ftmul
  5998  0F2F  0020               	movlb	0	; select bank0
  5999  0F30  082F               	movf	?___ftmul,w
  6000  0F31  00BF               	movwf	___fttol@f1
  6001  0F32  0830               	movf	?___ftmul+1,w
  6002  0F33  00C0               	movwf	___fttol@f1+1
  6003  0F34  0831               	movf	?___ftmul+2,w
  6004  0F35  00C1               	movwf	___fttol@f1+2
  6005  0F36  3196  2620  318D   	fcall	___fttol
  6006  0F39  0020               	movlb	0	; select bank0
  6007  0F3A  083F               	movf	?___fttol,w
  6008  0F3B  00CD               	movwf	??_hinten_ausrichten
  6009  0F3C  0840               	movf	?___fttol+1,w
  6010  0F3D  00CE               	movwf	??_hinten_ausrichten+1
  6011  0F3E  0841               	movf	?___fttol+2,w
  6012  0F3F  00CF               	movwf	??_hinten_ausrichten+2
  6013  0F40  0842               	movf	?___fttol+3,w
  6014  0F41  00D0               	movwf	??_hinten_ausrichten+3
  6015                           
  6016                           ;PGM_5.c: 1030: LATD = (LATD & 0b11110000);
  6017  0F42  0022               	movlb	2	; select bank2
  6018  0F43  080F               	movf	15,w	;volatile
  6019  0F44  39F0               	andlw	240
  6020  0F45  008F               	movwf	15	;volatile
  6021                           
  6022                           ;PGM_5.c: 1031: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  6023  0F46  0020               	movlb	0	; select bank0
  6024  0F47  0869               	movf	_Ausrichten_Stopp,w
  6025  0F48  3191  218B  318D   	fcall	___lbtoft
  6026  0F4B  0020               	movlb	0	; select bank0
  6027  0F4C  0828               	movf	?___lbtoft,w
  6028  0F4D  00B2               	movwf	___ftmul@f2
  6029  0F4E  0829               	movf	?___lbtoft+1,w
  6030  0F4F  00B3               	movwf	___ftmul@f2+1
  6031  0F50  082A               	movf	?___lbtoft+2,w
  6032  0F51  00B4               	movwf	___ftmul@f2+2
  6033  0F52  3040               	movlw	64
  6034  0F53  00AF               	movwf	___ftmul@f1
  6035  0F54  309C               	movlw	156
  6036  0F55  00B0               	movwf	___ftmul@f1+1
  6037  0F56  3045               	movlw	69
  6038  0F57  00B1               	movwf	___ftmul@f1+2
  6039  0F58  3197  274C  318D   	fcall	___ftmul
  6040  0F5B  0020               	movlb	0	; select bank0
  6041  0F5C  082F               	movf	?___ftmul,w
  6042  0F5D  00BF               	movwf	___fttol@f1
  6043  0F5E  0830               	movf	?___ftmul+1,w
  6044  0F5F  00C0               	movwf	___fttol@f1+1
  6045  0F60  0831               	movf	?___ftmul+2,w
  6046  0F61  00C1               	movwf	___fttol@f1+2
  6047  0F62  3196  2620  318D   	fcall	___fttol
  6048  0F65  0020               	movlb	0	; select bank0
  6049  0F66  083F               	movf	?___fttol,w
  6050  0F67  00CD               	movwf	??_hinten_ausrichten
  6051  0F68  0840               	movf	?___fttol+1,w
  6052  0F69  00CE               	movwf	??_hinten_ausrichten+1
  6053  0F6A  0841               	movf	?___fttol+2,w
  6054  0F6B  00CF               	movwf	??_hinten_ausrichten+2
  6055  0F6C  0842               	movf	?___fttol+3,w
  6056  0F6D  00D0               	movwf	??_hinten_ausrichten+3
  6057                           
  6058                           ;PGM_5.c: 1032: opfer();
  6059  0F6E  3195  2599  318D   	fcall	_opfer
  6060                           
  6061                           ;PGM_5.c: 1033: VAR_aus_zeit ++ ;
  6062  0F71  3001               	movlw	1
  6063  0F72  0020               	movlb	0	; select bank0
  6064  0F73  07D4               	addwf	_VAR_aus_zeit,f
  6065  0F74  3000               	movlw	0
  6066  0F75  3DD5               	addwfc	_VAR_aus_zeit+1,f
  6067  0F76                     l699:	
  6068  0F76  3051               	movlw	81
  6069  0F77  0021               	movlb	1	; select bank1
  6070  0F78  0227               	subwf	(_A_D_Wert^(0+128)+7),w
  6071  0F79  1803               	skipnc
  6072  0F7A  2F87               	goto	l5230
  6073  0F7B  0020               	movlb	0	; select bank0
  6074  0F7C  0855               	movf	_VAR_aus_zeit+1,w
  6075  0F7D  3A80               	xorlw	128
  6076  0F7E  00CD               	movwf	??_hinten_ausrichten
  6077  0F7F  308B               	movlw	139
  6078  0F80  024D               	subwf	??_hinten_ausrichten,w
  6079  0F81  1D03               	skipz
  6080  0F82  2F85               	goto	u5895
  6081  0F83  30B9               	movlw	185
  6082  0F84  0254               	subwf	_VAR_aus_zeit,w
  6083  0F85                     u5895:	
  6084  0F85  1C03               	skipc
  6085  0F86  2F12               	goto	l5216
  6086  0F87                     l5230:	
  6087                           
  6088                           ;PGM_5.c: 1034: }
  6089                           ;PGM_5.c: 1035: VAR_aus_zeit = 0;
  6090  0F87  0020               	movlb	0	; select bank0
  6091  0F88  01D4               	clrf	_VAR_aus_zeit
  6092  0F89  01D5               	clrf	_VAR_aus_zeit+1
  6093  0F8A                     l704:	
  6094                           ;PGM_5.c: 1037: while ((A_D_Wert [7] > 77)&&(VAR_aus_zeit <= 3000)){
  6095                           
  6096  0F8A  304E               	movlw	78
  6097  0F8B  0021               	movlb	1	; select bank1
  6098  0F8C  0227               	subwf	(_A_D_Wert^(0+128)+7),w
  6099  0F8D  1C03               	skipc
  6100  0F8E  0008               	return
  6101  0F8F  0020               	movlb	0	; select bank0
  6102  0F90  0855               	movf	_VAR_aus_zeit+1,w
  6103  0F91  3A80               	xorlw	128
  6104  0F92  00CD               	movwf	??_hinten_ausrichten
  6105  0F93  308B               	movlw	139
  6106  0F94  024D               	subwf	??_hinten_ausrichten,w
  6107  0F95  1D03               	skipz
  6108  0F96  2F99               	goto	u5915
  6109  0F97  30B9               	movlw	185
  6110  0F98  0254               	subwf	_VAR_aus_zeit,w
  6111  0F99                     u5915:	
  6112  0F99  1803               	btfsc	3,0
  6113  0F9A  0008               	return
  6114                           
  6115                           ;PGM_5.c: 1038: Power_Ausrichten();
  6116  0F9B  3180  2003  318D   	fcall	_Power_Ausrichten
  6117                           
  6118                           ;PGM_5.c: 1039: LATD = (LATD & 0b11110000)|0b00001010;
  6119  0F9E  0022               	movlb	2	; select bank2
  6120  0F9F  080F               	movf	15,w	;volatile
  6121  0FA0  39F0               	andlw	240
  6122  0FA1  380A               	iorlw	10
  6123  0FA2  008F               	movwf	15	;volatile
  6124                           
  6125                           ;PGM_5.c: 1040: _delay((unsigned long)((Ausrichten_Fahren)*(20000000/4000.0)));
  6126  0FA3  0020               	movlb	0	; select bank0
  6127  0FA4  086A               	movf	_Ausrichten_Fahren,w
  6128  0FA5  3191  218B  318D   	fcall	___lbtoft
  6129  0FA8  0020               	movlb	0	; select bank0
  6130  0FA9  0828               	movf	?___lbtoft,w
  6131  0FAA  00B2               	movwf	___ftmul@f2
  6132  0FAB  0829               	movf	?___lbtoft+1,w
  6133  0FAC  00B3               	movwf	___ftmul@f2+1
  6134  0FAD  082A               	movf	?___lbtoft+2,w
  6135  0FAE  00B4               	movwf	___ftmul@f2+2
  6136  0FAF  3040               	movlw	64
  6137  0FB0  00AF               	movwf	___ftmul@f1
  6138  0FB1  309C               	movlw	156
  6139  0FB2  00B0               	movwf	___ftmul@f1+1
  6140  0FB3  3045               	movlw	69
  6141  0FB4  00B1               	movwf	___ftmul@f1+2
  6142  0FB5  3197  274C  318D   	fcall	___ftmul
  6143  0FB8  0020               	movlb	0	; select bank0
  6144  0FB9  082F               	movf	?___ftmul,w
  6145  0FBA  00BF               	movwf	___fttol@f1
  6146  0FBB  0830               	movf	?___ftmul+1,w
  6147  0FBC  00C0               	movwf	___fttol@f1+1
  6148  0FBD  0831               	movf	?___ftmul+2,w
  6149  0FBE  00C1               	movwf	___fttol@f1+2
  6150  0FBF  3196  2620  318D   	fcall	___fttol
  6151  0FC2  0020               	movlb	0	; select bank0
  6152  0FC3  083F               	movf	?___fttol,w
  6153  0FC4  00CD               	movwf	??_hinten_ausrichten
  6154  0FC5  0840               	movf	?___fttol+1,w
  6155  0FC6  00CE               	movwf	??_hinten_ausrichten+1
  6156  0FC7  0841               	movf	?___fttol+2,w
  6157  0FC8  00CF               	movwf	??_hinten_ausrichten+2
  6158  0FC9  0842               	movf	?___fttol+3,w
  6159  0FCA  00D0               	movwf	??_hinten_ausrichten+3
  6160                           
  6161                           ;PGM_5.c: 1041: LATD = (LATD & 0b11110000);
  6162  0FCB  0022               	movlb	2	; select bank2
  6163  0FCC  080F               	movf	15,w	;volatile
  6164  0FCD  39F0               	andlw	240
  6165  0FCE  008F               	movwf	15	;volatile
  6166                           
  6167                           ;PGM_5.c: 1042: _delay((unsigned long)((Ausrichten_Stopp)*(20000000/4000.0)));
  6168  0FCF  0020               	movlb	0	; select bank0
  6169  0FD0  0869               	movf	_Ausrichten_Stopp,w
  6170  0FD1  3191  218B  318D   	fcall	___lbtoft
  6171  0FD4  0020               	movlb	0	; select bank0
  6172  0FD5  0828               	movf	?___lbtoft,w
  6173  0FD6  00B2               	movwf	___ftmul@f2
  6174  0FD7  0829               	movf	?___lbtoft+1,w
  6175  0FD8  00B3               	movwf	___ftmul@f2+1
  6176  0FD9  082A               	movf	?___lbtoft+2,w
  6177  0FDA  00B4               	movwf	___ftmul@f2+2
  6178  0FDB  3040               	movlw	64
  6179  0FDC  00AF               	movwf	___ftmul@f1
  6180  0FDD  309C               	movlw	156
  6181  0FDE  00B0               	movwf	___ftmul@f1+1
  6182  0FDF  3045               	movlw	69
  6183  0FE0  00B1               	movwf	___ftmul@f1+2
  6184  0FE1  3197  274C  318D   	fcall	___ftmul
  6185  0FE4  0020               	movlb	0	; select bank0
  6186  0FE5  082F               	movf	?___ftmul,w
  6187  0FE6  00BF               	movwf	___fttol@f1
  6188  0FE7  0830               	movf	?___ftmul+1,w
  6189  0FE8  00C0               	movwf	___fttol@f1+1
  6190  0FE9  0831               	movf	?___ftmul+2,w
  6191  0FEA  00C1               	movwf	___fttol@f1+2
  6192  0FEB  3196  2620  318D   	fcall	___fttol
  6193  0FEE  0020               	movlb	0	; select bank0
  6194  0FEF  083F               	movf	?___fttol,w
  6195  0FF0  00CD               	movwf	??_hinten_ausrichten
  6196  0FF1  0840               	movf	?___fttol+1,w
  6197  0FF2  00CE               	movwf	??_hinten_ausrichten+1
  6198  0FF3  0841               	movf	?___fttol+2,w
  6199  0FF4  00CF               	movwf	??_hinten_ausrichten+2
  6200  0FF5  0842               	movf	?___fttol+3,w
  6201  0FF6  00D0               	movwf	??_hinten_ausrichten+3
  6202                           
  6203                           ;PGM_5.c: 1043: opfer();
  6204  0FF7  3195  2599  318D   	fcall	_opfer
  6205                           
  6206                           ;PGM_5.c: 1044: VAR_aus_zeit ++ ;
  6207  0FFA  3001               	movlw	1
  6208  0FFB  0020               	movlb	0	; select bank0
  6209  0FFC  07D4               	addwf	_VAR_aus_zeit,f
  6210  0FFD  3000               	movlw	0
  6211  0FFE  3DD5               	addwfc	_VAR_aus_zeit+1,f
  6212  0FFF  2F8A               	goto	l704
  6213  1000                     __end_of_hinten_ausrichten:	
  6214                           
  6215                           	psect	text14
  6216  118B                     __ptext14:	
  6217 ;; *************** function ___lbtoft *****************
  6218 ;; Defined at:
  6219 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbtoft.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;  c               1    wreg     unsigned char 
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;  c               1    4[COMMON] unsigned char 
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  3    8[BANK0 ] float 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2, status,0, pclath, cstack
  6228 ;; Tracked objects:
  6229 ;;		On entry : 0/0
  6230 ;;		On exit  : 0/0
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6233 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6237 ;;Total ram usage:        8 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:    4
  6240 ;; This function calls:
  6241 ;;		___ftpack
  6242 ;; This function is called by:
  6243 ;;		_vorne_ausrichten
  6244 ;;		_hinten_ausrichten
  6245 ;;		_links_ausrichten
  6246 ;;		_rechts_ausrichten
  6247 ;;		_hintenausrichtenopfer
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           
  6252                           ;psect for function ___lbtoft
  6253  118B                     ___lbtoft:	
  6254                           
  6255                           ;incstack = 0
  6256                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  6257                           ;___lbtoft@c stored from wreg
  6258  118B  00F7               	movwf	___lbtoft@c
  6259  118C  0877               	movf	___lbtoft@c,w
  6260  118D  0020               	movlb	0	; select bank0
  6261  118E  00AB               	movwf	??___lbtoft
  6262  118F  01AC               	clrf	??___lbtoft+1
  6263  1190  01AD               	clrf	??___lbtoft+2
  6264  1191  082B               	movf	??___lbtoft,w
  6265  1192  00A0               	movwf	___ftpack@arg
  6266  1193  082C               	movf	??___lbtoft+1,w
  6267  1194  00A1               	movwf	___ftpack@arg+1
  6268  1195  082D               	movf	??___lbtoft+2,w
  6269  1196  00A2               	movwf	___ftpack@arg+2
  6270  1197  308E               	movlw	142
  6271  1198  00AE               	movwf	??___lbtoft+3
  6272  1199  082E               	movf	??___lbtoft+3,w
  6273  119A  00A3               	movwf	___ftpack@exp
  6274  119B  01A4               	clrf	___ftpack@sign
  6275  119C  3193  237C         	fcall	___ftpack
  6276  119E  0020               	movlb	0	; select bank0
  6277  119F  0820               	movf	?___ftpack,w
  6278  11A0  00A8               	movwf	?___lbtoft
  6279  11A1  0821               	movf	?___ftpack+1,w
  6280  11A2  00A9               	movwf	?___lbtoft+1
  6281  11A3  0822               	movf	?___ftpack+2,w
  6282  11A4  00AA               	movwf	?___lbtoft+2
  6283  11A5  0008               	return
  6284  11A6                     __end_of___lbtoft:	
  6285                           
  6286                           	psect	text15
  6287  1620                     __ptext15:	
  6288 ;; *************** function ___fttol *****************
  6289 ;; Defined at:
  6290 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  f1              3   31[BANK0 ] float 
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  lval            4   40[BANK0 ] unsigned long 
  6295 ;;  exp1            1   44[BANK0 ] unsigned char 
  6296 ;;  sign1           1   39[BANK0 ] unsigned char 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  4   31[BANK0 ] long 
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6306 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;Total ram usage:       14 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    3
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_vorne_ausrichten
  6317 ;;		_hinten_ausrichten
  6318 ;;		_links_ausrichten
  6319 ;;		_rechts_ausrichten
  6320 ;;		_hintenausrichtenopfer
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function ___fttol
  6326  1620                     ___fttol:	
  6327                           
  6328                           ;incstack = 0
  6329                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6330  1620  0020               	movlb	0	; select bank0
  6331  1621  083F               	movf	___fttol@f1,w
  6332  1622  00C3               	movwf	??___fttol
  6333  1623  0840               	movf	___fttol@f1+1,w
  6334  1624  00C4               	movwf	??___fttol+1
  6335  1625  0841               	movf	___fttol@f1+2,w
  6336  1626  00C5               	movwf	??___fttol+2
  6337  1627  1003               	clrc
  6338  1628  0D44               	rlf	??___fttol+1,w
  6339  1629  0D45               	rlf	??___fttol+2,w
  6340  162A  00C6               	movwf	??___fttol+3
  6341  162B  0846               	movf	??___fttol+3,w
  6342  162C  00CC               	movwf	___fttol@exp1
  6343  162D  084C               	movf	___fttol@exp1,w
  6344  162E  1D03               	btfss	3,2
  6345  162F  2E39               	goto	l3152
  6346  1630  3000               	movlw	0
  6347  1631  00C2               	movwf	?___fttol+3
  6348  1632  3000               	movlw	0
  6349  1633  00C1               	movwf	?___fttol+2
  6350  1634  3000               	movlw	0
  6351  1635  00C0               	movwf	?___fttol+1
  6352  1636  3000               	movlw	0
  6353  1637  00BF               	movwf	?___fttol
  6354  1638  0008               	return
  6355  1639                     l3152:	
  6356  1639  083F               	movf	___fttol@f1,w
  6357  163A  00C3               	movwf	??___fttol
  6358  163B  0840               	movf	___fttol@f1+1,w
  6359  163C  00C4               	movwf	??___fttol+1
  6360  163D  0841               	movf	___fttol@f1+2,w
  6361  163E  00C5               	movwf	??___fttol+2
  6362  163F  3017               	movlw	23
  6363  1640                     u2955:	
  6364  1640  36C5               	lsrf	??___fttol+2,f
  6365  1641  0CC4               	rrf	??___fttol+1,f
  6366  1642  0CC3               	rrf	??___fttol,f
  6367  1643  0B89               	decfsz	9,f
  6368  1644  2E40               	goto	u2955
  6369  1645  0843               	movf	??___fttol,w
  6370  1646  00C6               	movwf	??___fttol+3
  6371  1647  0846               	movf	??___fttol+3,w
  6372  1648  00C7               	movwf	___fttol@sign1
  6373  1649  17C0               	bsf	___fttol@f1+1,7
  6374  164A  30FF               	movlw	255
  6375  164B  05BF               	andwf	___fttol@f1,f
  6376  164C  30FF               	movlw	255
  6377  164D  05C0               	andwf	___fttol@f1+1,f
  6378  164E  3000               	movlw	0
  6379  164F  05C1               	andwf	___fttol@f1+2,f
  6380  1650  083F               	movf	___fttol@f1,w
  6381  1651  00C8               	movwf	___fttol@lval
  6382  1652  0840               	movf	___fttol@f1+1,w
  6383  1653  00C9               	movwf	___fttol@lval+1
  6384  1654  0841               	movf	___fttol@f1+2,w
  6385  1655  00CA               	movwf	___fttol@lval+2
  6386  1656  01CB               	clrf	___fttol@lval+3
  6387  1657  308E               	movlw	142
  6388  1658  02CC               	subwf	___fttol@exp1,f
  6389  1659  1FCC               	btfss	___fttol@exp1,7
  6390  165A  2E77               	goto	l3172
  6391  165B  084C               	movf	___fttol@exp1,w
  6392  165C  3A80               	xorlw	128
  6393  165D  3E8F               	addlw	143
  6394  165E  1803               	skipnc
  6395  165F  2E69               	goto	l3170
  6396  1660  3000               	movlw	0
  6397  1661  00C2               	movwf	?___fttol+3
  6398  1662  3000               	movlw	0
  6399  1663  00C1               	movwf	?___fttol+2
  6400  1664  3000               	movlw	0
  6401  1665  00C0               	movwf	?___fttol+1
  6402  1666  3000               	movlw	0
  6403  1667  00BF               	movwf	?___fttol
  6404  1668  0008               	return
  6405  1669                     l3170:	
  6406  1669  3001               	movlw	1
  6407  166A                     u2985:	
  6408  166A  36CB               	lsrf	___fttol@lval+3,f
  6409  166B  0CCA               	rrf	___fttol@lval+2,f
  6410  166C  0CC9               	rrf	___fttol@lval+1,f
  6411  166D  0CC8               	rrf	___fttol@lval,f
  6412  166E  0B89               	decfsz	9,f
  6413  166F  2E6A               	goto	u2985
  6414  1670  3001               	movlw	1
  6415  1671  00C3               	movwf	??___fttol
  6416  1672  0843               	movf	??___fttol,w
  6417  1673  07CC               	addwf	___fttol@exp1,f
  6418  1674  1903               	btfsc	3,2
  6419  1675  2E90               	goto	l3180
  6420  1676  2E69               	goto	l3170
  6421  1677                     l3172:	
  6422  1677  3018               	movlw	24
  6423  1678  024C               	subwf	___fttol@exp1,w
  6424  1679  1C03               	skipc
  6425  167A  2E8D               	goto	l1074
  6426  167B  3000               	movlw	0
  6427  167C  00C2               	movwf	?___fttol+3
  6428  167D  3000               	movlw	0
  6429  167E  00C1               	movwf	?___fttol+2
  6430  167F  3000               	movlw	0
  6431  1680  00C0               	movwf	?___fttol+1
  6432  1681  3000               	movlw	0
  6433  1682  00BF               	movwf	?___fttol
  6434  1683  0008               	return
  6435  1684                     l3178:	
  6436  1684  3001               	movlw	1
  6437  1685                     u3015:	
  6438  1685  35C8               	lslf	___fttol@lval,f
  6439  1686  0DC9               	rlf	___fttol@lval+1,f
  6440  1687  0DCA               	rlf	___fttol@lval+2,f
  6441  1688  0DCB               	rlf	___fttol@lval+3,f
  6442  1689  0B89               	decfsz	9,f
  6443  168A  2E85               	goto	u3015
  6444  168B  3001               	movlw	1
  6445  168C  02CC               	subwf	___fttol@exp1,f
  6446  168D                     l1074:	
  6447  168D  084C               	movf	___fttol@exp1,w
  6448  168E  1D03               	btfss	3,2
  6449  168F  2E84               	goto	l3178
  6450  1690                     l3180:	
  6451  1690  0847               	movf	___fttol@sign1,w
  6452  1691  1903               	btfsc	3,2
  6453  1692  2E9E               	goto	l3184
  6454  1693  09C8               	comf	___fttol@lval,f
  6455  1694  09C9               	comf	___fttol@lval+1,f
  6456  1695  09CA               	comf	___fttol@lval+2,f
  6457  1696  09CB               	comf	___fttol@lval+3,f
  6458  1697  0AC8               	incf	___fttol@lval,f
  6459  1698  1903               	skipnz
  6460  1699  0AC9               	incf	___fttol@lval+1,f
  6461  169A  1903               	skipnz
  6462  169B  0ACA               	incf	___fttol@lval+2,f
  6463  169C  1903               	skipnz
  6464  169D  0ACB               	incf	___fttol@lval+3,f
  6465  169E                     l3184:	
  6466  169E  084B               	movf	___fttol@lval+3,w
  6467  169F  00C2               	movwf	?___fttol+3
  6468  16A0  084A               	movf	___fttol@lval+2,w
  6469  16A1  00C1               	movwf	?___fttol+2
  6470  16A2  0849               	movf	___fttol@lval+1,w
  6471  16A3  00C0               	movwf	?___fttol+1
  6472  16A4  0848               	movf	___fttol@lval,w
  6473  16A5  00BF               	movwf	?___fttol
  6474  16A6  0008               	return
  6475  16A7                     __end_of___fttol:	
  6476                           
  6477                           	psect	text16
  6478  174C                     __ptext16:	
  6479 ;; *************** function ___ftmul *****************
  6480 ;; Defined at:
  6481 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  f1              3   15[BANK0 ] float 
  6484 ;;  f2              3   18[BANK0 ] float 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
  6487 ;;  sign            1   30[BANK0 ] unsigned char 
  6488 ;;  cntr            1   29[BANK0 ] unsigned char 
  6489 ;;  exp             1   25[BANK0 ] unsigned char 
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  3   15[BANK0 ] float 
  6492 ;; Registers used:
  6493 ;;		wreg, status,2, status,0, pclath, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6499 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;Total ram usage:       16 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    4
  6506 ;; This function calls:
  6507 ;;		___ftpack
  6508 ;; This function is called by:
  6509 ;;		_vorne_ausrichten
  6510 ;;		_hinten_ausrichten
  6511 ;;		_links_ausrichten
  6512 ;;		_rechts_ausrichten
  6513 ;;		_hintenausrichtenopfer
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           
  6518                           ;psect for function ___ftmul
  6519  174C                     ___ftmul:	
  6520                           
  6521                           ;incstack = 0
  6522                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6523  174C  0020               	movlb	0	; select bank0
  6524  174D  082F               	movf	___ftmul@f1,w
  6525  174E  00B5               	movwf	??___ftmul
  6526  174F  0830               	movf	___ftmul@f1+1,w
  6527  1750  00B6               	movwf	??___ftmul+1
  6528  1751  0831               	movf	___ftmul@f1+2,w
  6529  1752  00B7               	movwf	??___ftmul+2
  6530  1753  1003               	clrc
  6531  1754  0D36               	rlf	??___ftmul+1,w
  6532  1755  0D37               	rlf	??___ftmul+2,w
  6533  1756  00B8               	movwf	??___ftmul+3
  6534  1757  0838               	movf	??___ftmul+3,w
  6535  1758  00B9               	movwf	___ftmul@exp
  6536  1759  0839               	movf	___ftmul@exp,w
  6537  175A  1D03               	btfss	3,2
  6538  175B  2F63               	goto	l4792
  6539  175C  3000               	movlw	0
  6540  175D  00AF               	movwf	?___ftmul
  6541  175E  3000               	movlw	0
  6542  175F  00B0               	movwf	?___ftmul+1
  6543  1760  3000               	movlw	0
  6544  1761  00B1               	movwf	?___ftmul+2
  6545  1762  0008               	return
  6546  1763                     l4792:	
  6547  1763  0832               	movf	___ftmul@f2,w
  6548  1764  00B5               	movwf	??___ftmul
  6549  1765  0833               	movf	___ftmul@f2+1,w
  6550  1766  00B6               	movwf	??___ftmul+1
  6551  1767  0834               	movf	___ftmul@f2+2,w
  6552  1768  00B7               	movwf	??___ftmul+2
  6553  1769  1003               	clrc
  6554  176A  0D36               	rlf	??___ftmul+1,w
  6555  176B  0D37               	rlf	??___ftmul+2,w
  6556  176C  00B8               	movwf	??___ftmul+3
  6557  176D  0838               	movf	??___ftmul+3,w
  6558  176E  00BE               	movwf	___ftmul@sign
  6559  176F  083E               	movf	___ftmul@sign,w
  6560  1770  1D03               	btfss	3,2
  6561  1771  2F79               	goto	l4798
  6562  1772  3000               	movlw	0
  6563  1773  00AF               	movwf	?___ftmul
  6564  1774  3000               	movlw	0
  6565  1775  00B0               	movwf	?___ftmul+1
  6566  1776  3000               	movlw	0
  6567  1777  00B1               	movwf	?___ftmul+2
  6568  1778  0008               	return
  6569  1779                     l4798:	
  6570  1779  083E               	movf	___ftmul@sign,w
  6571  177A  3E7B               	addlw	123
  6572  177B  00B5               	movwf	??___ftmul
  6573  177C  0835               	movf	??___ftmul,w
  6574  177D  07B9               	addwf	___ftmul@exp,f
  6575  177E  082F               	movf	___ftmul@f1,w
  6576  177F  00B5               	movwf	??___ftmul
  6577  1780  0830               	movf	___ftmul@f1+1,w
  6578  1781  00B6               	movwf	??___ftmul+1
  6579  1782  0831               	movf	___ftmul@f1+2,w
  6580  1783  00B7               	movwf	??___ftmul+2
  6581  1784  3010               	movlw	16
  6582  1785                     u5265:	
  6583  1785  36B7               	lsrf	??___ftmul+2,f
  6584  1786  0CB6               	rrf	??___ftmul+1,f
  6585  1787  0CB5               	rrf	??___ftmul,f
  6586  1788  0B89               	decfsz	9,f
  6587  1789  2F85               	goto	u5265
  6588  178A  0835               	movf	??___ftmul,w
  6589  178B  00B8               	movwf	??___ftmul+3
  6590  178C  0838               	movf	??___ftmul+3,w
  6591  178D  00BE               	movwf	___ftmul@sign
  6592  178E  0832               	movf	___ftmul@f2,w
  6593  178F  00B5               	movwf	??___ftmul
  6594  1790  0833               	movf	___ftmul@f2+1,w
  6595  1791  00B6               	movwf	??___ftmul+1
  6596  1792  0834               	movf	___ftmul@f2+2,w
  6597  1793  00B7               	movwf	??___ftmul+2
  6598  1794  3010               	movlw	16
  6599  1795                     u5275:	
  6600  1795  36B7               	lsrf	??___ftmul+2,f
  6601  1796  0CB6               	rrf	??___ftmul+1,f
  6602  1797  0CB5               	rrf	??___ftmul,f
  6603  1798  0B89               	decfsz	9,f
  6604  1799  2F95               	goto	u5275
  6605  179A  0835               	movf	??___ftmul,w
  6606  179B  00B8               	movwf	??___ftmul+3
  6607  179C  0838               	movf	??___ftmul+3,w
  6608  179D  06BE               	xorwf	___ftmul@sign,f
  6609  179E  3080               	movlw	128
  6610  179F  00B5               	movwf	??___ftmul
  6611  17A0  0835               	movf	??___ftmul,w
  6612  17A1  05BE               	andwf	___ftmul@sign,f
  6613  17A2  17B0               	bsf	___ftmul@f1+1,7
  6614  17A3  17B3               	bsf	___ftmul@f2+1,7
  6615  17A4  30FF               	movlw	255
  6616  17A5  05B2               	andwf	___ftmul@f2,f
  6617  17A6  30FF               	movlw	255
  6618  17A7  05B3               	andwf	___ftmul@f2+1,f
  6619  17A8  3000               	movlw	0
  6620  17A9  05B4               	andwf	___ftmul@f2+2,f
  6621  17AA  3000               	movlw	0
  6622  17AB  00BA               	movwf	___ftmul@f3_as_product
  6623  17AC  3000               	movlw	0
  6624  17AD  00BB               	movwf	___ftmul@f3_as_product+1
  6625  17AE  3000               	movlw	0
  6626  17AF  00BC               	movwf	___ftmul@f3_as_product+2
  6627  17B0  3007               	movlw	7
  6628  17B1  00B5               	movwf	??___ftmul
  6629  17B2  0835               	movf	??___ftmul,w
  6630  17B3  00BD               	movwf	___ftmul@cntr
  6631  17B4                     l4810:	
  6632  17B4  1C2F               	btfss	___ftmul@f1,0
  6633  17B5  2FBC               	goto	l4814
  6634  17B6  0832               	movf	___ftmul@f2,w
  6635  17B7  07BA               	addwf	___ftmul@f3_as_product,f
  6636  17B8  0833               	movf	___ftmul@f2+1,w
  6637  17B9  3DBB               	addwfc	___ftmul@f3_as_product+1,f
  6638  17BA  0834               	movf	___ftmul@f2+2,w
  6639  17BB  3DBC               	addwfc	___ftmul@f3_as_product+2,f
  6640  17BC                     l4814:	
  6641  17BC  3001               	movlw	1
  6642  17BD                     u5295:	
  6643  17BD  36B1               	lsrf	___ftmul@f1+2,f
  6644  17BE  0CB0               	rrf	___ftmul@f1+1,f
  6645  17BF  0CAF               	rrf	___ftmul@f1,f
  6646  17C0  0B89               	decfsz	9,f
  6647  17C1  2FBD               	goto	u5295
  6648  17C2  3001               	movlw	1
  6649  17C3                     u5305:	
  6650  17C3  35B2               	lslf	___ftmul@f2,f
  6651  17C4  0DB3               	rlf	___ftmul@f2+1,f
  6652  17C5  0DB4               	rlf	___ftmul@f2+2,f
  6653  17C6  0B89               	decfsz	9,f
  6654  17C7  2FC3               	goto	u5305
  6655  17C8  3001               	movlw	1
  6656  17C9  02BD               	subwf	___ftmul@cntr,f
  6657  17CA  1D03               	btfss	3,2
  6658  17CB  2FB4               	goto	l4810
  6659  17CC  3009               	movlw	9
  6660  17CD  00B5               	movwf	??___ftmul
  6661  17CE  0835               	movf	??___ftmul,w
  6662  17CF  00BD               	movwf	___ftmul@cntr
  6663  17D0                     l4822:	
  6664  17D0  1C2F               	btfss	___ftmul@f1,0
  6665  17D1  2FD8               	goto	l4826
  6666  17D2  0832               	movf	___ftmul@f2,w
  6667  17D3  07BA               	addwf	___ftmul@f3_as_product,f
  6668  17D4  0833               	movf	___ftmul@f2+1,w
  6669  17D5  3DBB               	addwfc	___ftmul@f3_as_product+1,f
  6670  17D6  0834               	movf	___ftmul@f2+2,w
  6671  17D7  3DBC               	addwfc	___ftmul@f3_as_product+2,f
  6672  17D8                     l4826:	
  6673  17D8  3001               	movlw	1
  6674  17D9                     u5335:	
  6675  17D9  36B1               	lsrf	___ftmul@f1+2,f
  6676  17DA  0CB0               	rrf	___ftmul@f1+1,f
  6677  17DB  0CAF               	rrf	___ftmul@f1,f
  6678  17DC  0B89               	decfsz	9,f
  6679  17DD  2FD9               	goto	u5335
  6680  17DE  3001               	movlw	1
  6681  17DF                     u5345:	
  6682  17DF  36BC               	lsrf	___ftmul@f3_as_product+2,f
  6683  17E0  0CBB               	rrf	___ftmul@f3_as_product+1,f
  6684  17E1  0CBA               	rrf	___ftmul@f3_as_product,f
  6685  17E2  0B89               	decfsz	9,f
  6686  17E3  2FDF               	goto	u5345
  6687  17E4  3001               	movlw	1
  6688  17E5  02BD               	subwf	___ftmul@cntr,f
  6689  17E6  1D03               	btfss	3,2
  6690  17E7  2FD0               	goto	l4822
  6691  17E8  083A               	movf	___ftmul@f3_as_product,w
  6692  17E9  00A0               	movwf	___ftpack@arg
  6693  17EA  083B               	movf	___ftmul@f3_as_product+1,w
  6694  17EB  00A1               	movwf	___ftpack@arg+1
  6695  17EC  083C               	movf	___ftmul@f3_as_product+2,w
  6696  17ED  00A2               	movwf	___ftpack@arg+2
  6697  17EE  0839               	movf	___ftmul@exp,w
  6698  17EF  00B5               	movwf	??___ftmul
  6699  17F0  0835               	movf	??___ftmul,w
  6700  17F1  00A3               	movwf	___ftpack@exp
  6701  17F2  083E               	movf	___ftmul@sign,w
  6702  17F3  00B6               	movwf	??___ftmul+1
  6703  17F4  0836               	movf	??___ftmul+1,w
  6704  17F5  00A4               	movwf	___ftpack@sign
  6705  17F6  3193  237C         	fcall	___ftpack
  6706  17F8  0020               	movlb	0	; select bank0
  6707  17F9  0820               	movf	?___ftpack,w
  6708  17FA  00AF               	movwf	?___ftmul
  6709  17FB  0821               	movf	?___ftpack+1,w
  6710  17FC  00B0               	movwf	?___ftmul+1
  6711  17FD  0822               	movf	?___ftpack+2,w
  6712  17FE  00B1               	movwf	?___ftmul+2
  6713  17FF  0008               	return
  6714  1800                     __end_of___ftmul:	
  6715                           
  6716                           	psect	text17
  6717  137C                     __ptext17:	
  6718 ;; *************** function ___ftpack *****************
  6719 ;; Defined at:
  6720 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;  arg             3    0[BANK0 ] unsigned um
  6723 ;;  exp             1    3[BANK0 ] unsigned char 
  6724 ;;  sign            1    4[BANK0 ] unsigned char 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;		None
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  3    0[BANK0 ] float 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6736 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;Total ram usage:        8 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    3
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		___ftmul
  6747 ;;		___lbtoft
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           
  6752                           ;psect for function ___ftpack
  6753  137C                     ___ftpack:	
  6754                           
  6755                           ;incstack = 0
  6756                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6757  137C  0020               	movlb	0	; select bank0
  6758  137D  0823               	movf	___ftpack@exp,w
  6759  137E  1903               	btfsc	3,2
  6760  137F  2B85               	goto	l4660
  6761  1380  0822               	movf	___ftpack@arg+2,w
  6762  1381  0421               	iorwf	___ftpack@arg+1,w
  6763  1382  0420               	iorwf	___ftpack@arg,w
  6764  1383  1D03               	skipz
  6765  1384  2B96               	goto	l4666
  6766  1385                     l4660:	
  6767  1385  3000               	movlw	0
  6768  1386  00A0               	movwf	?___ftpack
  6769  1387  3000               	movlw	0
  6770  1388  00A1               	movwf	?___ftpack+1
  6771  1389  3000               	movlw	0
  6772  138A  00A2               	movwf	?___ftpack+2
  6773  138B  0008               	return
  6774  138C                     l4664:	
  6775  138C  3001               	movlw	1
  6776  138D  00A5               	movwf	??___ftpack
  6777  138E  0825               	movf	??___ftpack,w
  6778  138F  07A3               	addwf	___ftpack@exp,f
  6779  1390  3001               	movlw	1
  6780  1391                     u4935:	
  6781  1391  36A2               	lsrf	___ftpack@arg+2,f
  6782  1392  0CA1               	rrf	___ftpack@arg+1,f
  6783  1393  0CA0               	rrf	___ftpack@arg,f
  6784  1394  0B89               	decfsz	9,f
  6785  1395  2B91               	goto	u4935
  6786  1396                     l4666:	
  6787  1396  30FE               	movlw	254
  6788  1397  0522               	andwf	___ftpack@arg+2,w
  6789  1398  1903               	btfsc	3,2
  6790  1399  2BAF               	goto	l983
  6791  139A  2B8C               	goto	l4664
  6792  139B                     l4668:	
  6793  139B  3001               	movlw	1
  6794  139C  00A5               	movwf	??___ftpack
  6795  139D  0825               	movf	??___ftpack,w
  6796  139E  07A3               	addwf	___ftpack@exp,f
  6797  139F  3001               	movlw	1
  6798  13A0  07A0               	addwf	___ftpack@arg,f
  6799  13A1  3000               	movlw	0
  6800  13A2  1803               	skipnc
  6801  13A3  3001               	movlw	1
  6802  13A4  07A1               	addwf	___ftpack@arg+1,f
  6803  13A5  3000               	movlw	0
  6804  13A6  1803               	skipnc
  6805  13A7  3001               	movlw	1
  6806  13A8  07A2               	addwf	___ftpack@arg+2,f
  6807  13A9  3001               	movlw	1
  6808  13AA                     u4955:	
  6809  13AA  36A2               	lsrf	___ftpack@arg+2,f
  6810  13AB  0CA1               	rrf	___ftpack@arg+1,f
  6811  13AC  0CA0               	rrf	___ftpack@arg,f
  6812  13AD  0B89               	decfsz	9,f
  6813  13AE  2BAA               	goto	u4955
  6814  13AF                     l983:	
  6815  13AF  30FF               	movlw	255
  6816  13B0  0522               	andwf	___ftpack@arg+2,w
  6817  13B1  1903               	btfsc	3,2
  6818  13B2  2BBC               	goto	l4676
  6819  13B3  2B9B               	goto	l4668
  6820  13B4                     l4674:	
  6821  13B4  3001               	movlw	1
  6822  13B5  02A3               	subwf	___ftpack@exp,f
  6823  13B6  3001               	movlw	1
  6824  13B7                     u4975:	
  6825  13B7  35A0               	lslf	___ftpack@arg,f
  6826  13B8  0DA1               	rlf	___ftpack@arg+1,f
  6827  13B9  0DA2               	rlf	___ftpack@arg+2,f
  6828  13BA  0B89               	decfsz	9,f
  6829  13BB  2BB7               	goto	u4975
  6830  13BC                     l4676:	
  6831  13BC  1BA1               	btfsc	___ftpack@arg+1,7
  6832  13BD  2BC2               	goto	l990
  6833  13BE  3002               	movlw	2
  6834  13BF  0223               	subwf	___ftpack@exp,w
  6835  13C0  1803               	skipnc
  6836  13C1  2BB4               	goto	l4674
  6837  13C2                     l990:	
  6838  13C2  1823               	btfsc	___ftpack@exp,0
  6839  13C3  2BCA               	goto	l991
  6840  13C4  30FF               	movlw	255
  6841  13C5  05A0               	andwf	___ftpack@arg,f
  6842  13C6  307F               	movlw	127
  6843  13C7  05A1               	andwf	___ftpack@arg+1,f
  6844  13C8  30FF               	movlw	255
  6845  13C9  05A2               	andwf	___ftpack@arg+2,f
  6846  13CA                     l991:	
  6847  13CA  1003               	clrc
  6848  13CB  0CA3               	rrf	___ftpack@exp,f
  6849  13CC  0823               	movf	___ftpack@exp,w
  6850  13CD  00A5               	movwf	??___ftpack
  6851  13CE  01A6               	clrf	??___ftpack+1
  6852  13CF  01A7               	clrf	??___ftpack+2
  6853  13D0  3010               	movlw	16
  6854  13D1                     u5015:	
  6855  13D1  35A5               	lslf	??___ftpack,f
  6856  13D2  0DA6               	rlf	??___ftpack+1,f
  6857  13D3  0DA7               	rlf	??___ftpack+2,f
  6858  13D4  0B89               	decfsz	9,f
  6859  13D5  2BD1               	goto	u5015
  6860  13D6  0825               	movf	??___ftpack,w
  6861  13D7  04A0               	iorwf	___ftpack@arg,f
  6862  13D8  0826               	movf	??___ftpack+1,w
  6863  13D9  04A1               	iorwf	___ftpack@arg+1,f
  6864  13DA  0827               	movf	??___ftpack+2,w
  6865  13DB  04A2               	iorwf	___ftpack@arg+2,f
  6866  13DC  0824               	movf	___ftpack@sign,w
  6867  13DD  1903               	btfsc	3,2
  6868  13DE  0008               	return
  6869  13DF  17A2               	bsf	___ftpack@arg+2,7
  6870  13E0  0008               	return
  6871  13E1                     __end_of___ftpack:	
  6872                           
  6873                           	psect	text18
  6874  0003                     __ptext18:	
  6875 ;; *************** function _Power_Ausrichten *****************
  6876 ;; Defined at:
  6877 ;;		line 859 in file "PGM_5.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;		None
  6880 ;; Auto vars:     Size  Location     Type
  6881 ;;		None
  6882 ;; Return value:  Size  Location     Type
  6883 ;;                  1    wreg      void 
  6884 ;; Registers used:
  6885 ;;		None
  6886 ;; Tracked objects:
  6887 ;;		On entry : 0/0
  6888 ;;		On exit  : 0/0
  6889 ;;		Unchanged: 0/0
  6890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;Total ram usage:        0 bytes
  6896 ;; Hardware stack levels used:    1
  6897 ;; Hardware stack levels required when called:    3
  6898 ;; This function calls:
  6899 ;;		Nothing
  6900 ;; This function is called by:
  6901 ;;		_vorne_ausrichten
  6902 ;;		_hinten_ausrichten
  6903 ;;		_links_ausrichten
  6904 ;;		_rechts_ausrichten
  6905 ;;		_hintenausrichtenopfer
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           
  6910                           ;psect for function _Power_Ausrichten
  6911  0003                     _Power_Ausrichten:	
  6912                           
  6913                           ;incstack = 0
  6914                           ; Regs used in _Power_Ausrichten: []
  6915  0003  0008               	return
  6916  0004                     __end_of_Power_Ausrichten:	
  6917                           
  6918                           	psect	text19
  6919  131D                     __ptext19:	
  6920 ;; *************** function _init *****************
  6921 ;; Defined at:
  6922 ;;		line 8 in file "Init.h"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      void 
  6929 ;; Registers used:
  6930 ;;		wreg, status,2
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;Total ram usage:        0 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    3
  6943 ;; This function calls:
  6944 ;;		Nothing
  6945 ;; This function is called by:
  6946 ;;		_main
  6947 ;; This function uses a non-reentrant model
  6948 ;;
  6949                           
  6950                           
  6951                           ;psect for function _init
  6952  131D                     _init:	
  6953                           
  6954                           ;Init.h: 10: PORTA = 0; PORTB = 0; PORTC = 0; PORTD = 0; PORTE = 0;
  6955                           
  6956                           ;incstack = 0
  6957                           ; Regs used in _init: [wreg+status,2]
  6958  131D  0020               	movlb	0	; select bank0
  6959  131E  018C               	clrf	12	;volatile
  6960  131F  018D               	clrf	13	;volatile
  6961  1320  018E               	clrf	14	;volatile
  6962  1321  018F               	clrf	15	;volatile
  6963  1322  0190               	clrf	16	;volatile
  6964                           
  6965                           ;Init.h: 11: LATA = 0; LATB = 0; LATC = 0; LATD = 0; LATE = 0;
  6966  1323  0022               	movlb	2	; select bank2
  6967  1324  018C               	clrf	12	;volatile
  6968  1325  018D               	clrf	13	;volatile
  6969  1326  018E               	clrf	14	;volatile
  6970  1327  018F               	clrf	15	;volatile
  6971  1328  0190               	clrf	16	;volatile
  6972                           
  6973                           ;Init.h: 13: TRISA = 0b11101111;
  6974  1329  30EF               	movlw	239
  6975  132A  0021               	movlb	1	; select bank1
  6976  132B  008C               	movwf	12	;volatile
  6977                           
  6978                           ;Init.h: 14: ANSELA= 0b00101111;
  6979  132C  302F               	movlw	47
  6980  132D  0023               	movlb	3	; select bank3
  6981  132E  008C               	movwf	12	;volatile
  6982                           
  6983                           ;Init.h: 16: TRISB = 0b11100101;
  6984  132F  30E5               	movlw	229
  6985  1330  0021               	movlb	1	; select bank1
  6986  1331  008D               	movwf	13	;volatile
  6987                           
  6988                           ;Init.h: 17: ANSELB= 0b00000000;
  6989  1332  0023               	movlb	3	; select bank3
  6990  1333  018D               	clrf	13	;volatile
  6991                           
  6992                           ;Init.h: 18: WPUB = 0b00100001;
  6993  1334  3021               	movlw	33
  6994  1335  0024               	movlb	4	; select bank4
  6995  1336  008D               	movwf	13	;volatile
  6996                           
  6997                           ;Init.h: 19: IOCBP = 0b00000001;
  6998  1337  3001               	movlw	1
  6999  1338  0027               	movlb	7	; select bank7
  7000  1339  0094               	movwf	20	;volatile
  7001                           
  7002                           ;Init.h: 20: IOCBN = 0b00100000;
  7003  133A  3020               	movlw	32
  7004  133B  0095               	movwf	21	;volatile
  7005                           
  7006                           ;Init.h: 21: IOCBF = 0b00000000;
  7007  133C  0196               	clrf	22	;volatile
  7008                           
  7009                           ;Init.h: 23: TRISC = 0b11111001;
  7010  133D  30F9               	movlw	249
  7011  133E  0021               	movlb	1	; select bank1
  7012  133F  008E               	movwf	14	;volatile
  7013                           
  7014                           ;Init.h: 24: ANSELC= 0b11100000;
  7015  1340  30E0               	movlw	224
  7016  1341  0023               	movlb	3	; select bank3
  7017  1342  008E               	movwf	14	;volatile
  7018                           
  7019                           ;Init.h: 25: TRISD = 0b11010000;
  7020  1343  30D0               	movlw	208
  7021  1344  0021               	movlb	1	; select bank1
  7022  1345  008F               	movwf	15	;volatile
  7023                           
  7024                           ;Init.h: 26: ANSELD = 0b11000000;
  7025  1346  30C0               	movlw	192
  7026  1347  0023               	movlb	3	; select bank3
  7027  1348  008F               	movwf	15	;volatile
  7028                           
  7029                           ;Init.h: 27: TRISE = 0b00001111;
  7030  1349  300F               	movlw	15
  7031  134A  0021               	movlb	1	; select bank1
  7032  134B  0090               	movwf	16	;volatile
  7033                           
  7034                           ;Init.h: 28: ANSELE = 0b00000111;
  7035  134C  3007               	movlw	7
  7036  134D  0023               	movlb	3	; select bank3
  7037  134E  0090               	movwf	16	;volatile
  7038                           
  7039                           ;Init.h: 30: ADCON0 = 0b00000001;
  7040  134F  3001               	movlw	1
  7041  1350  0021               	movlb	1	; select bank1
  7042  1351  009D               	movwf	29	;volatile
  7043                           
  7044                           ;Init.h: 31: ADCON1 = 0b00100000;
  7045  1352  3020               	movlw	32
  7046  1353  009E               	movwf	30	;volatile
  7047                           
  7048                           ;Init.h: 32: OPTION_REG = 0b00000011;
  7049  1354  3003               	movlw	3
  7050  1355  0095               	movwf	21	;volatile
  7051                           
  7052                           ;Init.h: 33: INTCON = 0b01101000;
  7053  1356  3068               	movlw	104
  7054  1357  008B               	movwf	11	;volatile
  7055                           
  7056                           ;Init.h: 34: PIE1 = 0b00000000;
  7057  1358  0191               	clrf	17	;volatile
  7058                           
  7059                           ;Init.h: 35: PIR1 = 0b00000000;
  7060  1359  0020               	movlb	0	; select bank0
  7061  135A  0191               	clrf	17	;volatile
  7062                           
  7063                           ;Init.h: 36: PIE2 = 0b00000000;
  7064  135B  0021               	movlb	1	; select bank1
  7065  135C  0192               	clrf	18	;volatile
  7066                           
  7067                           ;Init.h: 37: PIR2 = 0b00000000;
  7068  135D  0020               	movlb	0	; select bank0
  7069  135E  0192               	clrf	18	;volatile
  7070                           
  7071                           ;Init.h: 38: T1GCON = 0b00000000;
  7072  135F  0199               	clrf	25	;volatile
  7073                           
  7074                           ;Init.h: 41: T1CON = 0b00000001;
  7075  1360  3001               	movlw	1
  7076  1361  0098               	movwf	24	;volatile
  7077                           
  7078                           ;Init.h: 42: TMR0 = 0;
  7079  1362  0195               	clrf	21	;volatile
  7080                           
  7081                           ;Init.h: 43: SSPSTAT = 0b10000000;
  7082  1363  3080               	movlw	128
  7083  1364  0024               	movlb	4	; select bank4
  7084  1365  0094               	movwf	20	;volatile
  7085                           
  7086                           ;Init.h: 45: SSPADD = 4;
  7087  1366  3004               	movlw	4
  7088  1367  0092               	movwf	18	;volatile
  7089                           
  7090                           ;Init.h: 46: SSPCON1 = 0b00101000;
  7091  1368  3028               	movlw	40
  7092  1369  0095               	movwf	21	;volatile
  7093                           
  7094                           ;Init.h: 47: SSPIF = 0;
  7095  136A  0020               	movlb	0	; select bank0
  7096  136B  1191               	bcf	17,3	;volatile
  7097                           
  7098                           ;Init.h: 48: BCLIF = 0;
  7099  136C  1192               	bcf	18,3	;volatile
  7100                           
  7101                           ;Init.h: 50: PR2 = 255;
  7102  136D  30FF               	movlw	255
  7103  136E  009B               	movwf	27	;volatile
  7104                           
  7105                           ;Init.h: 51: CCPR1L = 255;
  7106  136F  30FF               	movlw	255
  7107  1370  0025               	movlb	5	; select bank5
  7108  1371  0091               	movwf	17	;volatile
  7109                           
  7110                           ;Init.h: 52: CCP1CON = 0b00001100;
  7111  1372  300C               	movlw	12
  7112  1373  0093               	movwf	19	;volatile
  7113                           
  7114                           ;Init.h: 53: CCPR2L = 255;
  7115  1374  30FF               	movlw	255
  7116  1375  0098               	movwf	24	;volatile
  7117                           
  7118                           ;Init.h: 54: CCP2CON = 0b00001100;
  7119  1376  300C               	movlw	12
  7120  1377  009A               	movwf	26	;volatile
  7121                           
  7122                           ;Init.h: 55: T2CON = 0b00000111;
  7123  1378  3007               	movlw	7
  7124  1379  0020               	movlb	0	; select bank0
  7125  137A  009C               	movwf	28	;volatile
  7126  137B  0008               	return
  7127  137C                     __end_of_init:	
  7128                           
  7129                           	psect	text20
  7130  12BE                     __ptext20:	
  7131 ;; *************** function _im_Kreis_faren *****************
  7132 ;; Defined at:
  7133 ;;		line 827 in file "PGM_5.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;		None
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;		None
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  1    wreg      void 
  7140 ;; Registers used:
  7141 ;;		wreg, status,2, status,0, pclath, cstack
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;Total ram usage:        2 bytes
  7152 ;; Hardware stack levels used:    1
  7153 ;; Hardware stack levels required when called:    5
  7154 ;; This function calls:
  7155 ;;		_links90grad
  7156 ;; This function is called by:
  7157 ;;		_main
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161                           
  7162                           ;psect for function _im_Kreis_faren
  7163  12BE                     _im_Kreis_faren:	
  7164                           
  7165                           ;PGM_5.c: 828: if (VAR_im_Kreis_faren > 6){
  7166                           
  7167                           ;incstack = 0
  7168                           ; Regs used in _im_Kreis_faren: [wreg+status,2+status,0+pclath+cstack]
  7169  12BE  3007               	movlw	7
  7170  12BF  0021               	movlb	1	; select bank1
  7171  12C0  0254               	subwf	_VAR_im_Kreis_faren^(0+128),w
  7172  12C1  1C03               	skipc
  7173  12C2  0008               	return
  7174                           
  7175                           ;PGM_5.c: 829: VAR_links_ist_nichts ++ ;
  7176  12C3  3001               	movlw	1
  7177  12C4  0020               	movlb	0	; select bank0
  7178  12C5  00A3               	movwf	??_im_Kreis_faren
  7179  12C6  0823               	movf	??_im_Kreis_faren,w
  7180  12C7  0021               	movlb	1	; select bank1
  7181  12C8  07D3               	addwf	_VAR_links_ist_nichts^(0+128),f
  7182                           
  7183                           ;PGM_5.c: 830: if (A_D_Wert [1] > wand ){
  7184  12C9  0821               	movf	(_A_D_Wert^(0+128)+1),w
  7185  12CA  0279               	subwf	_wand,w
  7186  12CB  1803               	skipnc
  7187  12CC  2AE2               	goto	l5492
  7188                           
  7189                           ;PGM_5.c: 831: links90grad();
  7190  12CD  3191  21A6  3192   	fcall	_links90grad
  7191  12D0                     l612:	
  7192                           ;PGM_5.c: 832: while(!Flag_Strecke_erreicht){
  7193                           
  7194  12D0  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7195  12D1  2AD0               	goto	l612
  7196                           
  7197                           ;PGM_5.c: 833: }
  7198                           ;PGM_5.c: 834: LATD = (LATD & 0b11110000);
  7199  12D2  0022               	movlb	2	; select bank2
  7200  12D3  080F               	movf	15,w	;volatile
  7201  12D4  39F0               	andlw	240
  7202  12D5  008F               	movwf	15	;volatile
  7203                           
  7204                           ;PGM_5.c: 835: links90grad();
  7205  12D6  3191  21A6  3192   	fcall	_links90grad
  7206  12D9                     l615:	
  7207                           ;PGM_5.c: 836: while(!Flag_Strecke_erreicht){
  7208                           
  7209  12D9  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7210  12DA  2AD9               	goto	l615
  7211                           
  7212                           ;PGM_5.c: 837: }
  7213                           ;PGM_5.c: 838: LATD = (LATD & 0b11110000);
  7214  12DB  0022               	movlb	2	; select bank2
  7215  12DC  080F               	movf	15,w	;volatile
  7216  12DD  39F0               	andlw	240
  7217  12DE  008F               	movwf	15	;volatile
  7218                           
  7219                           ;PGM_5.c: 839: VAR_im_Kreis_faren = 0 ;
  7220  12DF  0021               	movlb	1	; select bank1
  7221  12E0  01D4               	clrf	_VAR_im_Kreis_faren^(0+128)
  7222                           
  7223                           ;PGM_5.c: 840: VAR_links_ist_nichts = 0 ;
  7224  12E1  01D3               	clrf	_VAR_links_ist_nichts^(0+128)
  7225  12E2                     l5492:	
  7226                           
  7227                           ;PGM_5.c: 841: }
  7228                           ;PGM_5.c: 842: if (VAR_links_ist_nichts > 4){
  7229  12E2  3005               	movlw	5
  7230  12E3  0253               	subwf	_VAR_links_ist_nichts^(0+128),w
  7231  12E4  1C03               	skipc
  7232  12E5  0008               	return
  7233                           
  7234                           ;PGM_5.c: 843: LATD = (LATD & 0b11110000);
  7235  12E6  0022               	movlb	2	; select bank2
  7236  12E7  080F               	movf	15,w	;volatile
  7237  12E8  39F0               	andlw	240
  7238  12E9  008F               	movwf	15	;volatile
  7239                           
  7240                           ;PGM_5.c: 844: _delay((unsigned long)((1000)*(20000000/4000.0)));
  7241  12EA  301A               	movlw	26
  7242  12EB  0020               	movlb	0	; select bank0
  7243  12EC  00A4               	movwf	??_im_Kreis_faren+1
  7244  12ED  305E               	movlw	94
  7245  12EE  00A3               	movwf	??_im_Kreis_faren
  7246  12EF  306E               	movlw	110
  7247  12F0                     u7207:	
  7248  12F0  0B89               	decfsz	9,f
  7249  12F1  2AF0               	goto	u7207
  7250  12F2  0BA3               	decfsz	??_im_Kreis_faren,f
  7251  12F3  2AF0               	goto	u7207
  7252  12F4  0BA4               	decfsz	??_im_Kreis_faren+1,f
  7253  12F5  2AF0               	goto	u7207
  7254  12F6  0000               	nop
  7255                           
  7256                           ;PGM_5.c: 845: VAR_links_ist_nichts = 0 ;
  7257  12F7  0021               	movlb	1	; select bank1
  7258  12F8  01D3               	clrf	_VAR_links_ist_nichts^(0+128)
  7259  12F9                     l5500:	
  7260                           ;PGM_5.c: 846: while (A_D_Wert [0] < wand || A_D_Wert [2] < wand ){
  7261                           
  7262  12F9  0879               	movf	_wand,w
  7263  12FA  0021               	movlb	1	; select bank1
  7264  12FB  0220               	subwf	_A_D_Wert^(0+128),w
  7265  12FC  1803               	btfsc	3,0
  7266  12FD  2B04               	goto	l5502
  7267  12FE                     l5498:	
  7268                           
  7269                           ;PGM_5.c: 847: LATD = (LATD & 0b11110000)|0b00001010 ;
  7270  12FE  0022               	movlb	2	; select bank2
  7271  12FF  080F               	movf	15,w	;volatile
  7272  1300  39F0               	andlw	240
  7273  1301  380A               	iorlw	10
  7274  1302  008F               	movwf	15	;volatile
  7275  1303  2AF9               	goto	l5500
  7276  1304                     l5502:	
  7277  1304  0879               	movf	_wand,w
  7278  1305  0222               	subwf	(_A_D_Wert^(0+128)+2),w
  7279  1306  1C03               	skipc
  7280  1307  2AFE               	goto	l5498
  7281                           
  7282                           ;PGM_5.c: 848: }
  7283                           ;PGM_5.c: 849: LATD = (LATD & 0b11110000);
  7284  1308  0022               	movlb	2	; select bank2
  7285  1309  080F               	movf	15,w	;volatile
  7286  130A  39F0               	andlw	240
  7287  130B  008F               	movwf	15	;volatile
  7288                           
  7289                           ;PGM_5.c: 850: if (A_D_Wert [3] > wand){
  7290  130C  0021               	movlb	1	; select bank1
  7291  130D  0823               	movf	(_A_D_Wert^(0+128)+3),w
  7292  130E  0279               	subwf	_wand,w
  7293  130F  1803               	skipnc
  7294  1310  2B1A               	goto	l5512
  7295                           
  7296                           ;PGM_5.c: 851: links90grad();
  7297  1311  3191  21A6  3192   	fcall	_links90grad
  7298  1314                     l623:	
  7299                           ;PGM_5.c: 852: while (!Flag_Strecke_erreicht){}
  7300                           
  7301  1314  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7302  1315  2B14               	goto	l623
  7303                           
  7304                           ;PGM_5.c: 853: LATD = (LATD & 0b11110000) ;
  7305  1316  0022               	movlb	2	; select bank2
  7306  1317  080F               	movf	15,w	;volatile
  7307  1318  39F0               	andlw	240
  7308  1319  008F               	movwf	15	;volatile
  7309  131A                     l5512:	
  7310                           
  7311                           ;PGM_5.c: 854: }
  7312                           ;PGM_5.c: 855: VAR_im_Kreis_faren = 0 ;
  7313  131A  0021               	movlb	1	; select bank1
  7314  131B  01D4               	clrf	_VAR_im_Kreis_faren^(0+128)
  7315  131C  0008               	return
  7316  131D                     __end_of_im_Kreis_faren:	
  7317                           
  7318                           	psect	text21
  7319  0849                     __ptext21:	
  7320 ;; *************** function _anderwandlang *****************
  7321 ;; Defined at:
  7322 ;;		line 674 in file "PGM_5.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;		None
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;		None
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  1    wreg      void 
  7329 ;; Registers used:
  7330 ;;		wreg, status,2, status,0, pclath, cstack
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7339 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7340 ;;Total ram usage:        3 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:    6
  7343 ;; This function calls:
  7344 ;;		_opfer
  7345 ;; This function is called by:
  7346 ;;		_main
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           
  7351                           ;psect for function _anderwandlang
  7352  0849                     _anderwandlang:	
  7353                           
  7354                           ;PGM_5.c: 678: if (A_D_Wert [2] >= zunah) {
  7355                           
  7356                           ;incstack = 0
  7357                           ; Regs used in _anderwandlang: [wreg+status,2+status,0+pclath+cstack]
  7358  0849  0020               	movlb	0	; select bank0
  7359  084A  0865               	movf	_zunah,w
  7360  084B  0021               	movlb	1	; select bank1
  7361  084C  0222               	subwf	(_A_D_Wert^(0+128)+2),w
  7362  084D  1C03               	skipc
  7363  084E  286C               	goto	l5424
  7364                           
  7365                           ;PGM_5.c: 679: LATD = (LATD & 0b11110000)|0b00001000;
  7366  084F  0022               	movlb	2	; select bank2
  7367  0850  080F               	movf	15,w	;volatile
  7368  0851  39F0               	andlw	240
  7369  0852  3808               	iorlw	8
  7370  0853  008F               	movwf	15	;volatile
  7371                           
  7372                           ;PGM_5.c: 680: _delay((unsigned long)((7)*(20000000/4000.0)));
  7373  0854  302E               	movlw	46
  7374  0855  0020               	movlb	0	; select bank0
  7375  0856  00A5               	movwf	??_anderwandlang
  7376  0857  3073               	movlw	115
  7377  0858                     u7217:	
  7378  0858  0B89               	decfsz	9,f
  7379  0859  2858               	goto	u7217
  7380  085A  0BA5               	decfsz	??_anderwandlang,f
  7381  085B  2858               	goto	u7217
  7382                           
  7383                           ;PGM_5.c: 681: LATD = (LATD & 0b11110000)|0b00001010;
  7384  085C  0022               	movlb	2	; select bank2
  7385  085D  080F               	movf	15,w	;volatile
  7386  085E  39F0               	andlw	240
  7387  085F  380A               	iorlw	10
  7388  0860  008F               	movwf	15	;volatile
  7389                           
  7390                           ;PGM_5.c: 682: _delay((unsigned long)((13)*(20000000/4000.0)));
  7391  0861  3055               	movlw	85
  7392  0862  0020               	movlb	0	; select bank0
  7393  0863  00A5               	movwf	??_anderwandlang
  7394  0864  3069               	movlw	105
  7395  0865                     u7227:	
  7396  0865  0B89               	decfsz	9,f
  7397  0866  2865               	goto	u7227
  7398  0867  0BA5               	decfsz	??_anderwandlang,f
  7399  0868  2865               	goto	u7227
  7400                           
  7401                           ;PGM_5.c: 683: opfer();
  7402  0869  3195  2599  3188   	fcall	_opfer
  7403  086C                     l5424:	
  7404                           
  7405                           ;PGM_5.c: 684: }
  7406                           ;PGM_5.c: 685: if (A_D_Wert [2] <= zuweit) {
  7407  086C  0021               	movlb	1	; select bank1
  7408  086D  0822               	movf	(_A_D_Wert^(0+128)+2),w
  7409  086E  0020               	movlb	0	; select bank0
  7410  086F  0266               	subwf	_zuweit,w
  7411  0870  1C03               	skipc
  7412  0871  288F               	goto	l5434
  7413                           
  7414                           ;PGM_5.c: 686: LATD = (LATD & 0b11110000)|0b00000010;
  7415  0872  0022               	movlb	2	; select bank2
  7416  0873  080F               	movf	15,w	;volatile
  7417  0874  39F0               	andlw	240
  7418  0875  3802               	iorlw	2
  7419  0876  008F               	movwf	15	;volatile
  7420                           
  7421                           ;PGM_5.c: 687: _delay((unsigned long)((7)*(20000000/4000.0)));
  7422  0877  302E               	movlw	46
  7423  0878  0020               	movlb	0	; select bank0
  7424  0879  00A5               	movwf	??_anderwandlang
  7425  087A  3073               	movlw	115
  7426  087B                     u7237:	
  7427  087B  0B89               	decfsz	9,f
  7428  087C  287B               	goto	u7237
  7429  087D  0BA5               	decfsz	??_anderwandlang,f
  7430  087E  287B               	goto	u7237
  7431                           
  7432                           ;PGM_5.c: 688: LATD = (LATD & 0b11110000)|0b00001010;
  7433  087F  0022               	movlb	2	; select bank2
  7434  0880  080F               	movf	15,w	;volatile
  7435  0881  39F0               	andlw	240
  7436  0882  380A               	iorlw	10
  7437  0883  008F               	movwf	15	;volatile
  7438                           
  7439                           ;PGM_5.c: 689: _delay((unsigned long)((13)*(20000000/4000.0)));
  7440  0884  3055               	movlw	85
  7441  0885  0020               	movlb	0	; select bank0
  7442  0886  00A5               	movwf	??_anderwandlang
  7443  0887  3069               	movlw	105
  7444  0888                     u7247:	
  7445  0888  0B89               	decfsz	9,f
  7446  0889  2888               	goto	u7247
  7447  088A  0BA5               	decfsz	??_anderwandlang,f
  7448  088B  2888               	goto	u7247
  7449                           
  7450                           ;PGM_5.c: 690: opfer();
  7451  088C  3195  2599  3188   	fcall	_opfer
  7452  088F                     l5434:	
  7453                           
  7454                           ;PGM_5.c: 691: }
  7455                           ;PGM_5.c: 692: if (A_D_Wert [2] < zunah) {
  7456  088F  0020               	movlb	0	; select bank0
  7457  0890  0865               	movf	_zunah,w
  7458  0891  0021               	movlb	1	; select bank1
  7459  0892  0222               	subwf	(_A_D_Wert^(0+128)+2),w
  7460  0893  1803               	skipnc
  7461  0894  0008               	return
  7462                           
  7463                           ;PGM_5.c: 693: if (A_D_Wert [2] > zuweit) {
  7464  0895  0822               	movf	(_A_D_Wert^(0+128)+2),w
  7465  0896  0020               	movlb	0	; select bank0
  7466  0897  0266               	subwf	_zuweit,w
  7467  0898  1803               	skipnc
  7468  0899  0008               	return
  7469                           
  7470                           ;PGM_5.c: 695: if (A_D_Wert [2] > (A_D_Wert [5] -2)) {
  7471  089A  0021               	movlb	1	; select bank1
  7472  089B  0825               	movf	(_A_D_Wert^(0+128)+5),w
  7473  089C  3EFE               	addlw	254
  7474  089D  0020               	movlb	0	; select bank0
  7475  089E  00A5               	movwf	??_anderwandlang
  7476  089F  30FF               	movlw	255
  7477  08A0  1803               	skipnc
  7478  08A1  3000               	movlw	0
  7479  08A2  00A6               	movwf	??_anderwandlang+1
  7480  08A3  0826               	movf	??_anderwandlang+1,w
  7481  08A4  3A80               	xorlw	128
  7482  08A5  00A7               	movwf	??_anderwandlang+2
  7483  08A6  3080               	movlw	128
  7484  08A7  0227               	subwf	??_anderwandlang+2,w
  7485  08A8  1D03               	skipz
  7486  08A9  28AE               	goto	u6235
  7487  08AA  0021               	movlb	1	; select bank1
  7488  08AB  0822               	movf	(_A_D_Wert^(0+128)+2),w
  7489  08AC  0020               	movlb	0	; select bank0
  7490  08AD  0225               	subwf	??_anderwandlang,w
  7491  08AE                     u6235:	
  7492  08AE  1803               	skipnc
  7493  08AF  28CD               	goto	l5448
  7494                           
  7495                           ;PGM_5.c: 696: LATD = (LATD & 0b11110000)|0b00001000;
  7496  08B0  0022               	movlb	2	; select bank2
  7497  08B1  080F               	movf	15,w	;volatile
  7498  08B2  39F0               	andlw	240
  7499  08B3  3808               	iorlw	8
  7500  08B4  008F               	movwf	15	;volatile
  7501                           
  7502                           ;PGM_5.c: 697: _delay((unsigned long)((7)*(20000000/4000.0)));
  7503  08B5  302E               	movlw	46
  7504  08B6  0020               	movlb	0	; select bank0
  7505  08B7  00A5               	movwf	??_anderwandlang
  7506  08B8  3073               	movlw	115
  7507  08B9                     u7257:	
  7508  08B9  0B89               	decfsz	9,f
  7509  08BA  28B9               	goto	u7257
  7510  08BB  0BA5               	decfsz	??_anderwandlang,f
  7511  08BC  28B9               	goto	u7257
  7512                           
  7513                           ;PGM_5.c: 698: LATD = (LATD & 0b11110000)|0b00001010;
  7514  08BD  0022               	movlb	2	; select bank2
  7515  08BE  080F               	movf	15,w	;volatile
  7516  08BF  39F0               	andlw	240
  7517  08C0  380A               	iorlw	10
  7518  08C1  008F               	movwf	15	;volatile
  7519                           
  7520                           ;PGM_5.c: 699: _delay((unsigned long)((13)*(20000000/4000.0)));
  7521  08C2  3055               	movlw	85
  7522  08C3  0020               	movlb	0	; select bank0
  7523  08C4  00A5               	movwf	??_anderwandlang
  7524  08C5  3069               	movlw	105
  7525  08C6                     u7267:	
  7526  08C6  0B89               	decfsz	9,f
  7527  08C7  28C6               	goto	u7267
  7528  08C8  0BA5               	decfsz	??_anderwandlang,f
  7529  08C9  28C6               	goto	u7267
  7530                           
  7531                           ;PGM_5.c: 700: opfer();
  7532  08CA  3195  2599         	fcall	_opfer
  7533                           
  7534                           ;PGM_5.c: 701: }
  7535  08CC  0008               	return
  7536  08CD                     l5448:	
  7537                           
  7538                           ;PGM_5.c: 702: else {
  7539                           ;PGM_5.c: 703: if (A_D_Wert [2] < (A_D_Wert [5] +2)) {
  7540  08CD  0021               	movlb	1	; select bank1
  7541  08CE  0825               	movf	(_A_D_Wert^(0+128)+5),w
  7542  08CF  3E02               	addlw	2
  7543  08D0  0020               	movlb	0	; select bank0
  7544  08D1  00A5               	movwf	??_anderwandlang
  7545  08D2  3000               	movlw	0
  7546  08D3  1803               	skipnc
  7547  08D4  3001               	movlw	1
  7548  08D5  00A6               	movwf	??_anderwandlang+1
  7549  08D6  0826               	movf	??_anderwandlang+1,w
  7550  08D7  3A80               	xorlw	128
  7551  08D8  3C80               	sublw	128
  7552  08D9  1D03               	skipz
  7553  08DA  28DE               	goto	u6245
  7554  08DB  0825               	movf	??_anderwandlang,w
  7555  08DC  0021               	movlb	1	; select bank1
  7556  08DD  0222               	subwf	(_A_D_Wert^(0+128)+2),w
  7557  08DE                     u6245:	
  7558  08DE  1803               	skipnc
  7559  08DF  28FD               	goto	l5458
  7560                           
  7561                           ;PGM_5.c: 704: LATD = (LATD & 0b11110000)|0b00000010;
  7562  08E0  0022               	movlb	2	; select bank2
  7563  08E1  080F               	movf	15,w	;volatile
  7564  08E2  39F0               	andlw	240
  7565  08E3  3802               	iorlw	2
  7566  08E4  008F               	movwf	15	;volatile
  7567                           
  7568                           ;PGM_5.c: 705: _delay((unsigned long)((7)*(20000000/4000.0)));
  7569  08E5  302E               	movlw	46
  7570  08E6  0020               	movlb	0	; select bank0
  7571  08E7  00A5               	movwf	??_anderwandlang
  7572  08E8  3073               	movlw	115
  7573  08E9                     u7277:	
  7574  08E9  0B89               	decfsz	9,f
  7575  08EA  28E9               	goto	u7277
  7576  08EB  0BA5               	decfsz	??_anderwandlang,f
  7577  08EC  28E9               	goto	u7277
  7578                           
  7579                           ;PGM_5.c: 706: LATD = (LATD & 0b11110000)|0b00001010;
  7580  08ED  0022               	movlb	2	; select bank2
  7581  08EE  080F               	movf	15,w	;volatile
  7582  08EF  39F0               	andlw	240
  7583  08F0  380A               	iorlw	10
  7584  08F1  008F               	movwf	15	;volatile
  7585                           
  7586                           ;PGM_5.c: 707: _delay((unsigned long)((13)*(20000000/4000.0)));
  7587  08F2  3055               	movlw	85
  7588  08F3  0020               	movlb	0	; select bank0
  7589  08F4  00A5               	movwf	??_anderwandlang
  7590  08F5  3069               	movlw	105
  7591  08F6                     u7287:	
  7592  08F6  0B89               	decfsz	9,f
  7593  08F7  28F6               	goto	u7287
  7594  08F8  0BA5               	decfsz	??_anderwandlang,f
  7595  08F9  28F6               	goto	u7287
  7596                           
  7597                           ;PGM_5.c: 708: opfer();
  7598  08FA  3195  2599         	fcall	_opfer
  7599                           
  7600                           ;PGM_5.c: 709: }
  7601  08FC  0008               	return
  7602  08FD                     l5458:	
  7603                           
  7604                           ;PGM_5.c: 710: else{
  7605                           ;PGM_5.c: 711: LATD = (LATD & 0b11110000)|0b00001010;
  7606  08FD  0022               	movlb	2	; select bank2
  7607  08FE  080F               	movf	15,w	;volatile
  7608  08FF  39F0               	andlw	240
  7609  0900  380A               	iorlw	10
  7610  0901  008F               	movwf	15	;volatile
  7611                           
  7612                           ;PGM_5.c: 712: _delay((unsigned long)((20)*(20000000/4000.0)));
  7613  0902  3082               	movlw	130
  7614  0903  0020               	movlb	0	; select bank0
  7615  0904  00A5               	movwf	??_anderwandlang
  7616  0905  30DD               	movlw	221
  7617  0906                     u7297:	
  7618  0906  0B89               	decfsz	9,f
  7619  0907  2906               	goto	u7297
  7620  0908  0BA5               	decfsz	??_anderwandlang,f
  7621  0909  2906               	goto	u7297
  7622  090A  3200               	nop2
  7623                           
  7624                           ;PGM_5.c: 713: opfer();
  7625  090B  3195  2599         	fcall	_opfer
  7626  090D  0008               	return
  7627  090E                     __end_of_anderwandlang:	
  7628                           
  7629                           	psect	text22
  7630  1599                     __ptext22:	
  7631 ;; *************** function _opfer *****************
  7632 ;; Defined at:
  7633 ;;		line 559 in file "PGM_5.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;		None
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;		None
  7638 ;; Return value:  Size  Location     Type
  7639 ;;                  1    wreg      void 
  7640 ;; Registers used:
  7641 ;;		wreg, status,2, status,0, pclath, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;Total ram usage:        2 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    5
  7654 ;; This function calls:
  7655 ;;		_Strecke_fahren
  7656 ;;		_kit_abwerfen
  7657 ;;		_links90grad
  7658 ;;		_rechts90grad
  7659 ;; This function is called by:
  7660 ;;		_main
  7661 ;;		_von_sensor_VR_bis_mitte
  7662 ;;		_von_mitte_bis_wieder_wand
  7663 ;;		_von_mitte_bis_wieder_wand_in_schwarzeplatte
  7664 ;;		_anderwandlang
  7665 ;;		_schwarzeplatte
  7666 ;;		_vorne_ausrichten
  7667 ;;		_hinten_ausrichten
  7668 ;;		_links_ausrichten
  7669 ;;		_rechts_ausrichten
  7670 ;;		_cm_fahren
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           
  7675                           ;psect for function _opfer
  7676  1599                     _opfer:	
  7677                           
  7678                           ;PGM_5.c: 560: while(0){
  7679                           
  7680                           ;incstack = 0
  7681                           ; Regs used in _opfer: [wreg+status,2+status,0+pclath+cstack]
  7682  1599  0008               	return
  7683  159A                     l507:	
  7684                           ;PGM_5.c: 569: while(!Flag_Strecke_erreicht);
  7685                           
  7686                           ;PGM_5.c: 568: rechts90grad();
  7687                           
  7688                           ;PGM_5.c: 567: LATD = (LATD & 0b11110000);
  7689                           
  7690                           ;PGM_5.c: 566: Flag_T_links = 0;
  7691                           
  7692                           ;PGM_5.c: 565: LATD = (LATD & 0b11110000);
  7693                           
  7694                           ;PGM_5.c: 564: Flag_LED = 0;
  7695                           
  7696                           ;PGM_5.c: 563: if (VAR_zeit_opfer > 300){
  7697                           
  7698                           ;PGM_5.c: 562: if (A_D_Wert [1] > wand){
  7699                           
  7700                           ;PGM_5.c: 561: if(Flag_T_links == 1){
  7701                           
  7702  159A  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7703  159B  2D9A               	goto	l507
  7704                           
  7705                           ;PGM_5.c: 570: LATD = (LATD & 0b11110000);
  7706  159C  0022               	movlb	2	; select bank2
  7707  159D  080F               	movf	15,w	;volatile
  7708  159E  39F0               	andlw	240
  7709  159F  008F               	movwf	15	;volatile
  7710                           
  7711                           ;PGM_5.c: 571: kit_abwerfen();
  7712  15A0  3194  24AF  3195   	fcall	_kit_abwerfen
  7713                           
  7714                           ;PGM_5.c: 572: LATD = (LATD & 0b11110000);
  7715  15A3  0022               	movlb	2	; select bank2
  7716  15A4  080F               	movf	15,w	;volatile
  7717  15A5  39F0               	andlw	240
  7718  15A6  008F               	movwf	15	;volatile
  7719                           
  7720                           ;PGM_5.c: 573: links90grad();
  7721  15A7  3191  21A6  3195   	fcall	_links90grad
  7722  15AA                     l510:	
  7723                           ;PGM_5.c: 574: while(!Flag_Strecke_erreicht);
  7724                           
  7725  15AA  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7726  15AB  2DAA               	goto	l510
  7727                           
  7728                           ;PGM_5.c: 575: LATD = (LATD & 0b11110000);
  7729  15AC  0022               	movlb	2	; select bank2
  7730  15AD  080F               	movf	15,w	;volatile
  7731  15AE  39F0               	andlw	240
  7732  15AF  008F               	movwf	15	;volatile
  7733                           
  7734                           ;PGM_5.c: 576: _delay((unsigned long)((5000)*(20000000/4000.0)));
  7735  15B0  307F               	movlw	127
  7736  15B1  0020               	movlb	0	; select bank0
  7737  15B2  00A4               	movwf	??_opfer+1
  7738  15B3  30D4               	movlw	212
  7739  15B4  00A3               	movwf	??_opfer
  7740  15B5  3031               	movlw	49
  7741  15B6                     u7307:	
  7742  15B6  0B89               	decfsz	9,f
  7743  15B7  2DB6               	goto	u7307
  7744  15B8  0BA3               	decfsz	??_opfer,f
  7745  15B9  2DB6               	goto	u7307
  7746  15BA  0BA4               	decfsz	??_opfer+1,f
  7747  15BB  2DB6               	goto	u7307
  7748  15BC  3200               	nop2
  7749                           
  7750                           ;PGM_5.c: 577: Flag_LED = 0;
  7751  15BD  1271               	bcf	_Flag_LED/(0+8),_Flag_LED& (0+7)
  7752                           
  7753                           ;PGM_5.c: 578: VAR_zeit_opfer = 0;
  7754  15BE  0021               	movlb	1	; select bank1
  7755  15BF  01C9               	clrf	_VAR_zeit_opfer^(0+128)
  7756  15C0  01CA               	clrf	(_VAR_zeit_opfer+1)^(0+128)
  7757                           
  7758                           ;PGM_5.c: 579: Strecke_fahren(15, LATD = (LATD & 0b11110000)|0b00001010);
  7759  15C1  0022               	movlb	2	; select bank2
  7760  15C2  080F               	movf	15,w	;volatile
  7761  15C3  39F0               	andlw	240
  7762  15C4  380A               	iorlw	10
  7763  15C5  008F               	movwf	15	;volatile
  7764  15C6  0020               	movlb	0	; select bank0
  7765  15C7  00A3               	movwf	??_opfer
  7766  15C8  0823               	movf	??_opfer,w
  7767  15C9  00F7               	movwf	Strecke_fahren@Direction
  7768  15CA  300F               	movlw	15
  7769  15CB  3191  2179  3195   	fcall	_Strecke_fahren
  7770  15CE                     l513:	
  7771                           ;PGM_5.c: 580: while(!Flag_Strecke_erreicht);
  7772                           
  7773  15CE  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7774  15CF  2DCE               	goto	l513
  7775                           
  7776                           ;PGM_5.c: 581: LATD = (LATD & 0b11110000);
  7777  15D0  0022               	movlb	2	; select bank2
  7778  15D1  080F               	movf	15,w	;volatile
  7779  15D2  39F0               	andlw	240
  7780  15D3  008F               	movwf	15	;volatile
  7781                           
  7782                           ;PGM_5.c: 619: }
  7783                           ;PGM_5.c: 620: }
  7784                           ;PGM_5.c: 621: if(Flag_T_rechts == 1){
  7785                           
  7786                           ;PGM_5.c: 588: else{
  7787                           ;PGM_5.c: 618: Flag_T_links = 0;
  7788                           
  7789                           ;PGM_5.c: 586: }
  7790                           ;PGM_5.c: 587: }
  7791                           
  7792                           ;PGM_5.c: 584: else{
  7793                           ;PGM_5.c: 585: Flag_T_links = 0;
  7794                           
  7795                           ;PGM_5.c: 583: }
  7796  15D4  1DF0               	btfss	_Flag_T_rechts/(0+8),_Flag_T_rechts& (0+7)
  7797  15D5  0008               	return
  7798                           
  7799                           ;PGM_5.c: 622: if(A_D_Wert [2] > wand){
  7800  15D6  0021               	movlb	1	; select bank1
  7801  15D7  0822               	movf	(_A_D_Wert^(0+128)+2),w
  7802  15D8  0279               	subwf	_wand,w
  7803  15D9  1803               	skipnc
  7804  15DA  2E1E               	goto	l519
  7805                           
  7806                           ;PGM_5.c: 623: if (VAR_zeit_opfer > 300){
  7807  15DB  084A               	movf	(_VAR_zeit_opfer+1)^(0+128),w
  7808  15DC  3A80               	xorlw	128
  7809  15DD  0020               	movlb	0	; select bank0
  7810  15DE  00A3               	movwf	??_opfer
  7811  15DF  3081               	movlw	129
  7812  15E0  0223               	subwf	??_opfer,w
  7813  15E1  1D03               	skipz
  7814  15E2  2DE6               	goto	u5115
  7815  15E3  302D               	movlw	45
  7816  15E4  0021               	movlb	1	; select bank1
  7817  15E5  0249               	subwf	_VAR_zeit_opfer^(0+128),w
  7818  15E6                     u5115:	
  7819  15E6  1C03               	skipc
  7820  15E7  2E1C               	goto	l520
  7821                           
  7822                           ;PGM_5.c: 624: Flag_LED =0;
  7823  15E8  1271               	bcf	_Flag_LED/(0+8),_Flag_LED& (0+7)
  7824                           
  7825                           ;PGM_5.c: 625: LATD = (LATD & 0b11110000);
  7826  15E9  0022               	movlb	2	; select bank2
  7827  15EA  080F               	movf	15,w	;volatile
  7828  15EB  39F0               	andlw	240
  7829  15EC  008F               	movwf	15	;volatile
  7830                           
  7831                           ;PGM_5.c: 626: Flag_T_rechts = 0;
  7832  15ED  11F0               	bcf	_Flag_T_rechts/(0+8),_Flag_T_rechts& (0+7)
  7833                           
  7834                           ;PGM_5.c: 627: LATD = (LATD & 0b11110000);
  7835  15EE  080F               	movf	15,w	;volatile
  7836  15EF  39F0               	andlw	240
  7837  15F0  008F               	movwf	15	;volatile
  7838                           
  7839                           ;PGM_5.c: 628: links90grad();
  7840  15F1  3191  21A6  3195   	fcall	_links90grad
  7841  15F4                     l521:	
  7842                           ;PGM_5.c: 629: while(!Flag_Strecke_erreicht);
  7843                           
  7844  15F4  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7845  15F5  2DF4               	goto	l521
  7846                           
  7847                           ;PGM_5.c: 630: LATD = (LATD & 0b11110000);
  7848  15F6  0022               	movlb	2	; select bank2
  7849  15F7  080F               	movf	15,w	;volatile
  7850  15F8  39F0               	andlw	240
  7851  15F9  008F               	movwf	15	;volatile
  7852                           
  7853                           ;PGM_5.c: 631: kit_abwerfen();
  7854  15FA  3194  24AF  3195   	fcall	_kit_abwerfen
  7855                           
  7856                           ;PGM_5.c: 632: LATD = (LATD & 0b11110000);
  7857  15FD  0022               	movlb	2	; select bank2
  7858  15FE  080F               	movf	15,w	;volatile
  7859  15FF  39F0               	andlw	240
  7860  1600  008F               	movwf	15	;volatile
  7861                           
  7862                           ;PGM_5.c: 633: rechts90grad();
  7863  1601  3191  21E3  3195   	fcall	_rechts90grad
  7864  1604                     l524:	
  7865                           ;PGM_5.c: 634: while(!Flag_Strecke_erreicht);
  7866                           
  7867  1604  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7868  1605  2E04               	goto	l524
  7869                           
  7870                           ;PGM_5.c: 635: LATD = (LATD & 0b11110000);
  7871  1606  0022               	movlb	2	; select bank2
  7872  1607  080F               	movf	15,w	;volatile
  7873  1608  39F0               	andlw	240
  7874  1609  008F               	movwf	15	;volatile
  7875                           
  7876                           ;PGM_5.c: 636: _delay((unsigned long)((5000)*(20000000/4000.0)));
  7877  160A  307F               	movlw	127
  7878  160B  0020               	movlb	0	; select bank0
  7879  160C  00A4               	movwf	??_opfer+1
  7880  160D  30D4               	movlw	212
  7881  160E  00A3               	movwf	??_opfer
  7882  160F  3031               	movlw	49
  7883  1610                     u7317:	
  7884  1610  0B89               	decfsz	9,f
  7885  1611  2E10               	goto	u7317
  7886  1612  0BA3               	decfsz	??_opfer,f
  7887  1613  2E10               	goto	u7317
  7888  1614  0BA4               	decfsz	??_opfer+1,f
  7889  1615  2E10               	goto	u7317
  7890  1616  3200               	nop2
  7891                           
  7892                           ;PGM_5.c: 637: Flag_LED = 0;
  7893  1617  1271               	bcf	_Flag_LED/(0+8),_Flag_LED& (0+7)
  7894                           
  7895                           ;PGM_5.c: 638: VAR_zeit_opfer = 0;
  7896  1618  0021               	movlb	1	; select bank1
  7897  1619  01C9               	clrf	_VAR_zeit_opfer^(0+128)
  7898  161A  01CA               	clrf	(_VAR_zeit_opfer+1)^(0+128)
  7899                           
  7900                           ;PGM_5.c: 639: }
  7901  161B  0008               	return
  7902  161C                     l520:	
  7903                           
  7904                           ;PGM_5.c: 640: else{
  7905                           ;PGM_5.c: 641: Flag_T_rechts = 0;
  7906  161C  11F0               	bcf	_Flag_T_rechts/(0+8),_Flag_T_rechts& (0+7)
  7907                           
  7908                           ;PGM_5.c: 642: }
  7909                           ;PGM_5.c: 643: }
  7910  161D  0008               	return
  7911  161E                     l519:	
  7912                           
  7913                           ;PGM_5.c: 644: else{
  7914                           ;PGM_5.c: 645: Flag_T_rechts = 0;
  7915  161E  11F0               	bcf	_Flag_T_rechts/(0+8),_Flag_T_rechts& (0+7)
  7916  161F  0008               	return
  7917  1620                     __end_of_opfer:	
  7918                           
  7919                           	psect	text23
  7920  11E3                     __ptext23:	
  7921 ;; *************** function _rechts90grad *****************
  7922 ;; Defined at:
  7923 ;;		line 420 in file "PGM_5.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;		None
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;		None
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  1    wreg      void 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0, pclath, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7939 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;Total ram usage:        1 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    4
  7944 ;; This function calls:
  7945 ;;		_Strecke_fahren
  7946 ;; This function is called by:
  7947 ;;		_main
  7948 ;;		_opfer
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           
  7953                           ;psect for function _rechts90grad
  7954  11E3                     _rechts90grad:	
  7955                           
  7956                           ;PGM_5.c: 421: Strecke_fahren(grad_90_1, LATD = (LATD & 0b11110000)|0b00000110);
  7957                           
  7958                           ;incstack = 0
  7959                           ; Regs used in _rechts90grad: [wreg+status,2+status,0+pclath+cstack]
  7960  11E3  0022               	movlb	2	; select bank2
  7961  11E4  080F               	movf	15,w	;volatile
  7962  11E5  39F0               	andlw	240
  7963  11E6  3806               	iorlw	6
  7964  11E7  008F               	movwf	15	;volatile
  7965  11E8  0020               	movlb	0	; select bank0
  7966  11E9  00A2               	movwf	??_rechts90grad
  7967  11EA  0822               	movf	??_rechts90grad,w
  7968  11EB  00F7               	movwf	Strecke_fahren@Direction
  7969  11EC  086E               	movf	_grad_90_1,w
  7970  11ED  3191  2179  3191   	fcall	_Strecke_fahren
  7971  11F0                     l443:	
  7972                           ;PGM_5.c: 422: while (!Flag_Strecke_erreicht){
  7973                           
  7974  11F0  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7975  11F1  29F0               	goto	l443
  7976                           
  7977                           ;PGM_5.c: 424: }
  7978                           ;PGM_5.c: 425: LATD = (LATD & 0b11110000);
  7979  11F2  0022               	movlb	2	; select bank2
  7980  11F3  080F               	movf	15,w	;volatile
  7981  11F4  39F0               	andlw	240
  7982  11F5  008F               	movwf	15	;volatile
  7983                           
  7984                           ;PGM_5.c: 426: Strecke_fahren(grad_90_2, LATD = (LATD & 0b11110000)|0b00000110);
  7985  11F6  080F               	movf	15,w	;volatile
  7986  11F7  39F0               	andlw	240
  7987  11F8  3806               	iorlw	6
  7988  11F9  008F               	movwf	15	;volatile
  7989  11FA  0020               	movlb	0	; select bank0
  7990  11FB  00A2               	movwf	??_rechts90grad
  7991  11FC  0822               	movf	??_rechts90grad,w
  7992  11FD  00F7               	movwf	Strecke_fahren@Direction
  7993  11FE  086D               	movf	_grad_90_2,w
  7994  11FF  3191  2179  3191   	fcall	_Strecke_fahren
  7995  1202                     l4640:	
  7996                           ;PGM_5.c: 427: while (!Flag_Strecke_erreicht){
  7997                           
  7998  1202  18F0               	btfsc	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  7999  1203  0008               	return
  8000                           
  8001                           ;PGM_5.c: 428: LATD = (LATD & 0b11110000);
  8002  1204  0022               	movlb	2	; select bank2
  8003  1205  080F               	movf	15,w	;volatile
  8004  1206  39F0               	andlw	240
  8005  1207  008F               	movwf	15	;volatile
  8006                           
  8007                           ;PGM_5.c: 429: _delay((unsigned long)((10)*(20000000/4000.0)));
  8008  1208  3041               	movlw	65
  8009  1209  0020               	movlb	0	; select bank0
  8010  120A  00A2               	movwf	??_rechts90grad
  8011  120B  30EE               	movlw	238
  8012  120C                     u7327:	
  8013  120C  0B89               	decfsz	9,f
  8014  120D  2A0C               	goto	u7327
  8015  120E  0BA2               	decfsz	??_rechts90grad,f
  8016  120F  2A0C               	goto	u7327
  8017  1210  0000               	nop
  8018                           
  8019                           ;PGM_5.c: 430: LATD = (LATD & 0b11110000)|0b00000110;
  8020  1211  0022               	movlb	2	; select bank2
  8021  1212  080F               	movf	15,w	;volatile
  8022  1213  39F0               	andlw	240
  8023  1214  3806               	iorlw	6
  8024  1215  008F               	movwf	15	;volatile
  8025                           
  8026                           ;PGM_5.c: 431: _delay((unsigned long)((10)*(20000000/4000.0)));
  8027  1216  3041               	movlw	65
  8028  1217  0020               	movlb	0	; select bank0
  8029  1218  00A2               	movwf	??_rechts90grad
  8030  1219  30EE               	movlw	238
  8031  121A                     u7337:	
  8032  121A  0B89               	decfsz	9,f
  8033  121B  2A1A               	goto	u7337
  8034  121C  0BA2               	decfsz	??_rechts90grad,f
  8035  121D  2A1A               	goto	u7337
  8036  121E  0000               	nop
  8037  121F  2A02               	goto	l4640
  8038  1220                     __end_of_rechts90grad:	
  8039                           
  8040                           	psect	text24
  8041  11A6                     __ptext24:	
  8042 ;; *************** function _links90grad *****************
  8043 ;; Defined at:
  8044 ;;		line 435 in file "PGM_5.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;		None
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;		None
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      void 
  8051 ;; Registers used:
  8052 ;;		wreg, status,2, status,0, pclath, cstack
  8053 ;; Tracked objects:
  8054 ;;		On entry : 0/0
  8055 ;;		On exit  : 0/0
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;Total ram usage:        1 bytes
  8063 ;; Hardware stack levels used:    1
  8064 ;; Hardware stack levels required when called:    4
  8065 ;; This function calls:
  8066 ;;		_Strecke_fahren
  8067 ;; This function is called by:
  8068 ;;		_main
  8069 ;;		_opfer
  8070 ;;		_schwarzeplatte
  8071 ;;		_im_Kreis_faren
  8072 ;; This function uses a non-reentrant model
  8073 ;;
  8074                           
  8075                           
  8076                           ;psect for function _links90grad
  8077  11A6                     _links90grad:	
  8078                           
  8079                           ;PGM_5.c: 436: Strecke_fahren(grad_90links_1, LATD = (LATD & 0b11110000)|0b00001001);
  8080                           
  8081                           ;incstack = 0
  8082                           ; Regs used in _links90grad: [wreg+status,2+status,0+pclath+cstack]
  8083  11A6  0022               	movlb	2	; select bank2
  8084  11A7  080F               	movf	15,w	;volatile
  8085  11A8  39F0               	andlw	240
  8086  11A9  3809               	iorlw	9
  8087  11AA  008F               	movwf	15	;volatile
  8088  11AB  0020               	movlb	0	; select bank0
  8089  11AC  00A2               	movwf	??_links90grad
  8090  11AD  0822               	movf	??_links90grad,w
  8091  11AE  00F7               	movwf	Strecke_fahren@Direction
  8092  11AF  086C               	movf	_grad_90links_1,w
  8093  11B0  3191  2179  3191   	fcall	_Strecke_fahren
  8094  11B3                     l452:	
  8095                           ;PGM_5.c: 437: while (!Flag_Strecke_erreicht){
  8096                           
  8097  11B3  1CF0               	btfss	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  8098  11B4  29B3               	goto	l452
  8099                           
  8100                           ;PGM_5.c: 439: }
  8101                           ;PGM_5.c: 440: LATD = (LATD & 0b11110000);
  8102  11B5  0022               	movlb	2	; select bank2
  8103  11B6  080F               	movf	15,w	;volatile
  8104  11B7  39F0               	andlw	240
  8105  11B8  008F               	movwf	15	;volatile
  8106                           
  8107                           ;PGM_5.c: 441: Strecke_fahren(grad_90links_2, LATD = (LATD & 0b11110000)|0b00001001);
  8108  11B9  080F               	movf	15,w	;volatile
  8109  11BA  39F0               	andlw	240
  8110  11BB  3809               	iorlw	9
  8111  11BC  008F               	movwf	15	;volatile
  8112  11BD  0020               	movlb	0	; select bank0
  8113  11BE  00A2               	movwf	??_links90grad
  8114  11BF  0822               	movf	??_links90grad,w
  8115  11C0  00F7               	movwf	Strecke_fahren@Direction
  8116  11C1  086B               	movf	_grad_90links_2,w
  8117  11C2  3191  2179  3191   	fcall	_Strecke_fahren
  8118  11C5                     l4654:	
  8119                           ;PGM_5.c: 442: while (!Flag_Strecke_erreicht){
  8120                           
  8121  11C5  18F0               	btfsc	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  8122  11C6  0008               	return
  8123                           
  8124                           ;PGM_5.c: 443: LATD = (LATD & 0b11110000);
  8125  11C7  0022               	movlb	2	; select bank2
  8126  11C8  080F               	movf	15,w	;volatile
  8127  11C9  39F0               	andlw	240
  8128  11CA  008F               	movwf	15	;volatile
  8129                           
  8130                           ;PGM_5.c: 444: _delay((unsigned long)((10)*(20000000/4000.0)));
  8131  11CB  3041               	movlw	65
  8132  11CC  0020               	movlb	0	; select bank0
  8133  11CD  00A2               	movwf	??_links90grad
  8134  11CE  30EE               	movlw	238
  8135  11CF                     u7347:	
  8136  11CF  0B89               	decfsz	9,f
  8137  11D0  29CF               	goto	u7347
  8138  11D1  0BA2               	decfsz	??_links90grad,f
  8139  11D2  29CF               	goto	u7347
  8140  11D3  0000               	nop
  8141                           
  8142                           ;PGM_5.c: 445: LATD = (LATD & 0b11110000)|0b00001001;
  8143  11D4  0022               	movlb	2	; select bank2
  8144  11D5  080F               	movf	15,w	;volatile
  8145  11D6  39F0               	andlw	240
  8146  11D7  3809               	iorlw	9
  8147  11D8  008F               	movwf	15	;volatile
  8148                           
  8149                           ;PGM_5.c: 446: _delay((unsigned long)((10)*(20000000/4000.0)));
  8150  11D9  3041               	movlw	65
  8151  11DA  0020               	movlb	0	; select bank0
  8152  11DB  00A2               	movwf	??_links90grad
  8153  11DC  30EE               	movlw	238
  8154  11DD                     u7357:	
  8155  11DD  0B89               	decfsz	9,f
  8156  11DE  29DD               	goto	u7357
  8157  11DF  0BA2               	decfsz	??_links90grad,f
  8158  11E0  29DD               	goto	u7357
  8159  11E1  0000               	nop
  8160  11E2  29C5               	goto	l4654
  8161  11E3                     __end_of_links90grad:	
  8162                           
  8163                           	psect	text25
  8164  1179                     __ptext25:	
  8165 ;; *************** function _Strecke_fahren *****************
  8166 ;; Defined at:
  8167 ;;		line 1149 in file "PGM_5.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  Length          1    wreg     unsigned char 
  8170 ;;  Direction       1    4[COMMON] unsigned char 
  8171 ;; Auto vars:     Size  Location     Type
  8172 ;;  Length          1    5[COMMON] unsigned char 
  8173 ;; Return value:  Size  Location     Type
  8174 ;;                  1    wreg      void 
  8175 ;; Registers used:
  8176 ;;		wreg, status,2
  8177 ;; Tracked objects:
  8178 ;;		On entry : 0/0
  8179 ;;		On exit  : 0/0
  8180 ;;		Unchanged: 0/0
  8181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8182 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;Total ram usage:        4 bytes
  8187 ;; Hardware stack levels used:    1
  8188 ;; Hardware stack levels required when called:    3
  8189 ;; This function calls:
  8190 ;;		Nothing
  8191 ;; This function is called by:
  8192 ;;		_main
  8193 ;;		_von_sensor_VR_bis_mitte
  8194 ;;		_von_mitte_bis_wieder_wand_in_schwarzeplatte
  8195 ;;		_rechts90grad
  8196 ;;		_links90grad
  8197 ;;		_opfer
  8198 ;;		_schwarzeplatte
  8199 ;;		_cm_fahren
  8200 ;; This function uses a non-reentrant model
  8201 ;;
  8202                           
  8203                           
  8204                           ;psect for function _Strecke_fahren
  8205  1179                     _Strecke_fahren:	
  8206                           
  8207                           ;incstack = 0
  8208                           ; Regs used in _Strecke_fahren: [wreg+status,2]
  8209                           ;Strecke_fahren@Length stored from wreg
  8210  1179  00F8               	movwf	Strecke_fahren@Length
  8211                           
  8212                           ;PGM_5.c: 1150: IOCIE = 0;
  8213  117A  118B               	bcf	11,3	;volatile
  8214                           
  8215                           ;PGM_5.c: 1152: Encoder = 0;
  8216  117B  0020               	movlb	0	; select bank0
  8217  117C  01D6               	clrf	_Encoder
  8218                           
  8219                           ;PGM_5.c: 1154: Strecke = Length;
  8220  117D  0878               	movf	Strecke_fahren@Length,w
  8221  117E  00A0               	movwf	??_Strecke_fahren
  8222  117F  01A1               	clrf	??_Strecke_fahren+1
  8223  1180  0820               	movf	??_Strecke_fahren,w
  8224  1181  0021               	movlb	1	; select bank1
  8225  1182  00BF               	movwf	_Strecke^(0+128)
  8226  1183  0020               	movlb	0	; select bank0
  8227  1184  0821               	movf	??_Strecke_fahren+1,w
  8228  1185  0021               	movlb	1	; select bank1
  8229  1186  00C0               	movwf	(_Strecke+1)^(0+128)
  8230                           
  8231                           ;PGM_5.c: 1155: Flag_Strecke_erreicht = 0;
  8232  1187  10F0               	bcf	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  8233                           
  8234                           ;PGM_5.c: 1156: Flag_Strecke_messen = 1;
  8235  1188  1470               	bsf	_Flag_Strecke_messen/(0+8),_Flag_Strecke_messen& (0+7)
  8236                           
  8237                           ;PGM_5.c: 1157: IOCIE = 1;
  8238  1189  158B               	bsf	11,3	;volatile
  8239  118A  0008               	return
  8240  118B                     __end_of_Strecke_fahren:	
  8241                           
  8242                           	psect	text26
  8243  14AF                     __ptext26:	
  8244 ;; *************** function _kit_abwerfen *****************
  8245 ;; Defined at:
  8246 ;;		line 650 in file "PGM_5.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;  i               1    2[BANK0 ] unsigned char 
  8251 ;;  i               1    1[BANK0 ] unsigned char 
  8252 ;;  i               1    0[BANK0 ] unsigned char 
  8253 ;; Return value:  Size  Location     Type
  8254 ;;                  1    wreg      void 
  8255 ;; Registers used:
  8256 ;;		wreg, status,2, status,0
  8257 ;; Tracked objects:
  8258 ;;		On entry : 0/0
  8259 ;;		On exit  : 0/0
  8260 ;;		Unchanged: 0/0
  8261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Totals:         2       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;Total ram usage:        5 bytes
  8267 ;; Hardware stack levels used:    1
  8268 ;; Hardware stack levels required when called:    3
  8269 ;; This function calls:
  8270 ;;		Nothing
  8271 ;; This function is called by:
  8272 ;;		_main
  8273 ;;		_opfer
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           
  8278                           ;psect for function _kit_abwerfen
  8279  14AF                     _kit_abwerfen:	
  8280                           
  8281                           ;PGM_5.c: 651: GIE = 0;
  8282                           
  8283                           ;incstack = 0
  8284                           ; Regs used in _kit_abwerfen: [wreg+status,2+status,0]
  8285  14AF  138B               	bcf	11,7	;volatile
  8286                           
  8287                           ;PGM_5.c: 652: for(char i=0; i<6; i++){
  8288  14B0  0020               	movlb	0	; select bank0
  8289  14B1  01A0               	clrf	kit_abwerfen@i
  8290  14B2  3006               	movlw	6
  8291  14B3  0220               	subwf	kit_abwerfen@i,w
  8292  14B4  1803               	btfsc	3,0
  8293  14B5  2CD0               	goto	l4598
  8294  14B6                     l533:	
  8295                           
  8296                           ;PGM_5.c: 653: RB1 = 1;
  8297  14B6  148D               	bsf	13,1	;volatile
  8298                           
  8299                           ;PGM_5.c: 654: _delay((unsigned long)((2390)*(20000000/4000000.0)));
  8300  14B7  3010               	movlw	16
  8301  14B8  00F7               	movwf	??_kit_abwerfen
  8302  14B9  3084               	movlw	132
  8303  14BA                     u7367:	
  8304  14BA  0B89               	decfsz	9,f
  8305  14BB  2CBA               	goto	u7367
  8306  14BC  0BF7               	decfsz	??_kit_abwerfen,f
  8307  14BD  2CBA               	goto	u7367
  8308                           
  8309                           ;PGM_5.c: 655: RB1 = 0;
  8310  14BE  0020               	movlb	0	; select bank0
  8311  14BF  108D               	bcf	13,1	;volatile
  8312                           
  8313                           ;PGM_5.c: 656: _delay((unsigned long)((20)*(20000000/4000.0)));
  8314  14C0  3082               	movlw	130
  8315  14C1  00F7               	movwf	??_kit_abwerfen
  8316  14C2  30DE               	movlw	222
  8317  14C3                     u7377:	
  8318  14C3  0B89               	decfsz	9,f
  8319  14C4  2CC3               	goto	u7377
  8320  14C5  0BF7               	decfsz	??_kit_abwerfen,f
  8321  14C6  2CC3               	goto	u7377
  8322  14C7  3001               	movlw	1
  8323  14C8  00F7               	movwf	??_kit_abwerfen
  8324  14C9  0877               	movf	??_kit_abwerfen,w
  8325  14CA  0020               	movlb	0	; select bank0
  8326  14CB  07A0               	addwf	kit_abwerfen@i,f
  8327  14CC  3006               	movlw	6
  8328  14CD  0220               	subwf	kit_abwerfen@i,w
  8329  14CE  1C03               	skipc
  8330  14CF  2CB6               	goto	l533
  8331  14D0                     l4598:	
  8332                           
  8333                           ;PGM_5.c: 657: }
  8334                           ;PGM_5.c: 658: _delay((unsigned long)((200)*(20000000/4000.0)));
  8335  14D0  3006               	movlw	6
  8336  14D1  00F8               	movwf	??_kit_abwerfen+1
  8337  14D2  3013               	movlw	19
  8338  14D3  00F7               	movwf	??_kit_abwerfen
  8339  14D4  30AE               	movlw	174
  8340  14D5                     u7387:	
  8341  14D5  0B89               	decfsz	9,f
  8342  14D6  2CD5               	goto	u7387
  8343  14D7  0BF7               	decfsz	??_kit_abwerfen,f
  8344  14D8  2CD5               	goto	u7387
  8345  14D9  0BF8               	decfsz	??_kit_abwerfen+1,f
  8346  14DA  2CD5               	goto	u7387
  8347                           
  8348                           ;PGM_5.c: 659: for(char i=0; i<6; i++){
  8349  14DB  0020               	movlb	0	; select bank0
  8350  14DC  01A1               	clrf	kit_abwerfen@i_278
  8351  14DD  3006               	movlw	6
  8352  14DE  0221               	subwf	kit_abwerfen@i_278,w
  8353  14DF  1803               	btfsc	3,0
  8354  14E0  2CFC               	goto	l4614
  8355  14E1                     l535:	
  8356                           
  8357                           ;PGM_5.c: 660: RB1 = 1;
  8358  14E1  148D               	bsf	13,1	;volatile
  8359                           
  8360                           ;PGM_5.c: 661: _delay((unsigned long)((2110)*(20000000/4000000.0)));
  8361  14E2  300E               	movlw	14
  8362  14E3  00F7               	movwf	??_kit_abwerfen
  8363  14E4  30B2               	movlw	178
  8364  14E5                     u7397:	
  8365  14E5  0B89               	decfsz	9,f
  8366  14E6  2CE5               	goto	u7397
  8367  14E7  0BF7               	decfsz	??_kit_abwerfen,f
  8368  14E8  2CE5               	goto	u7397
  8369  14E9  3200               	nop2
  8370                           
  8371                           ;PGM_5.c: 662: RB1 = 0;
  8372  14EA  0020               	movlb	0	; select bank0
  8373  14EB  108D               	bcf	13,1	;volatile
  8374                           
  8375                           ;PGM_5.c: 663: _delay((unsigned long)((20)*(20000000/4000.0)));
  8376  14EC  3082               	movlw	130
  8377  14ED  00F7               	movwf	??_kit_abwerfen
  8378  14EE  30DE               	movlw	222
  8379  14EF                     u7407:	
  8380  14EF  0B89               	decfsz	9,f
  8381  14F0  2CEF               	goto	u7407
  8382  14F1  0BF7               	decfsz	??_kit_abwerfen,f
  8383  14F2  2CEF               	goto	u7407
  8384  14F3  3001               	movlw	1
  8385  14F4  00F7               	movwf	??_kit_abwerfen
  8386  14F5  0877               	movf	??_kit_abwerfen,w
  8387  14F6  0020               	movlb	0	; select bank0
  8388  14F7  07A1               	addwf	kit_abwerfen@i_278,f
  8389  14F8  3006               	movlw	6
  8390  14F9  0221               	subwf	kit_abwerfen@i_278,w
  8391  14FA  1C03               	skipc
  8392  14FB  2CE1               	goto	l535
  8393  14FC                     l4614:	
  8394                           
  8395                           ;PGM_5.c: 664: }
  8396                           ;PGM_5.c: 665: for(char i=0; i<6; i++){
  8397  14FC  01A2               	clrf	kit_abwerfen@i_279
  8398  14FD  3006               	movlw	6
  8399  14FE  0222               	subwf	kit_abwerfen@i_279,w
  8400  14FF  1803               	btfsc	3,0
  8401  1500  2D1B               	goto	l538
  8402  1501                     l537:	
  8403                           
  8404                           ;PGM_5.c: 666: RB1 = 1;
  8405  1501  148D               	bsf	13,1	;volatile
  8406                           
  8407                           ;PGM_5.c: 667: _delay((unsigned long)((2390)*(20000000/4000000.0)));
  8408  1502  3010               	movlw	16
  8409  1503  00F7               	movwf	??_kit_abwerfen
  8410  1504  3084               	movlw	132
  8411  1505                     u7417:	
  8412  1505  0B89               	decfsz	9,f
  8413  1506  2D05               	goto	u7417
  8414  1507  0BF7               	decfsz	??_kit_abwerfen,f
  8415  1508  2D05               	goto	u7417
  8416                           
  8417                           ;PGM_5.c: 668: RB1 = 0;
  8418  1509  0020               	movlb	0	; select bank0
  8419  150A  108D               	bcf	13,1	;volatile
  8420                           
  8421                           ;PGM_5.c: 669: _delay((unsigned long)((20)*(20000000/4000.0)));
  8422  150B  3082               	movlw	130
  8423  150C  00F7               	movwf	??_kit_abwerfen
  8424  150D  30DE               	movlw	222
  8425  150E                     u7427:	
  8426  150E  0B89               	decfsz	9,f
  8427  150F  2D0E               	goto	u7427
  8428  1510  0BF7               	decfsz	??_kit_abwerfen,f
  8429  1511  2D0E               	goto	u7427
  8430  1512  3001               	movlw	1
  8431  1513  00F7               	movwf	??_kit_abwerfen
  8432  1514  0877               	movf	??_kit_abwerfen,w
  8433  1515  0020               	movlb	0	; select bank0
  8434  1516  07A2               	addwf	kit_abwerfen@i_279,f
  8435  1517  3006               	movlw	6
  8436  1518  0222               	subwf	kit_abwerfen@i_279,w
  8437  1519  1C03               	skipc
  8438  151A  2D01               	goto	l537
  8439  151B                     l538:	
  8440                           
  8441                           ;PGM_5.c: 670: }
  8442                           ;PGM_5.c: 671: GIE = 1;
  8443  151B  178B               	bsf	11,7	;volatile
  8444  151C  0008               	return
  8445  151D                     __end_of_kit_abwerfen:	
  8446                           
  8447                           	psect	text27
  8448  0804                     __ptext27:	
  8449 ;; *************** function _Werte_auf_LCD_anzeigen *****************
  8450 ;; Defined at:
  8451 ;;		line 546 in file "PGM_5.c"
  8452 ;; Parameters:    Size  Location     Type
  8453 ;;		None
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;  i               1    5[COMMON] unsigned char 
  8456 ;; Return value:  Size  Location     Type
  8457 ;;                  1    wreg      void 
  8458 ;; Registers used:
  8459 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8466 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8467 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8469 ;;Total ram usage:        2 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:    3
  8472 ;; This function calls:
  8473 ;;		Nothing
  8474 ;; This function is called by:
  8475 ;;		_main
  8476 ;;		_Letter_kal
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           
  8481                           ;psect for function _Werte_auf_LCD_anzeigen
  8482  0804                     _Werte_auf_LCD_anzeigen:	
  8483                           
  8484                           ;PGM_5.c: 547: for(char i = 0; i < 11; i++) {
  8485                           
  8486                           ;incstack = 0
  8487                           ; Regs used in _Werte_auf_LCD_anzeigen: [wreg+fsr1l+fsr1h+status,2+status,0]
  8488  0804  01F8               	clrf	Werte_auf_LCD_anzeigen@i
  8489  0805  300B               	movlw	11
  8490  0806  0278               	subwf	Werte_auf_LCD_anzeigen@i,w
  8491  0807  1803               	btfsc	3,0
  8492  0808  281E               	goto	l3954
  8493  0809                     l3948:	
  8494                           
  8495                           ;PGM_5.c: 548: Datum_S[i] = A_D_Wert[i];
  8496  0809  0878               	movf	Werte_auf_LCD_anzeigen@i,w
  8497  080A  3EA0               	addlw	(low (_A_D_Wert| 0))& (0+255)
  8498  080B  0086               	movwf	6
  8499  080C  0187               	clrf	7
  8500  080D  0801               	movf	1,w
  8501  080E  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8502  080F  0878               	movf	Werte_auf_LCD_anzeigen@i,w
  8503  0810  3E20               	addlw	(low (_Datum_S| (0+256)))& (0+255)
  8504  0811  0086               	movwf	6
  8505  0812  3001               	movlw	1	; select bank2/3
  8506  0813  0087               	movwf	7
  8507  0814  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8508  0815  0081               	movwf	1
  8509  0816  3001               	movlw	1
  8510  0817  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8511  0818  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8512  0819  07F8               	addwf	Werte_auf_LCD_anzeigen@i,f
  8513  081A  300B               	movlw	11
  8514  081B  0278               	subwf	Werte_auf_LCD_anzeigen@i,w
  8515  081C  1C03               	skipc
  8516  081D  2809               	goto	l3948
  8517  081E                     l3954:	
  8518                           
  8519                           ;PGM_5.c: 549: }
  8520                           ;PGM_5.c: 550: Datum_S[12] = Encoder;
  8521  081E  0020               	movlb	0	; select bank0
  8522  081F  0856               	movf	_Encoder,w
  8523  0820  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8524  0821  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8525  0822  0022               	movlb	2	; select bank2
  8526  0823  00AC               	movwf	(_Datum_S^(0+256)+12)
  8527                           
  8528                           ;PGM_5.c: 551: Datum_S[13] = 13;
  8529  0824  300D               	movlw	13
  8530  0825  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8531  0826  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8532  0827  00AD               	movwf	(_Datum_S^(0+256)+13)
  8533                           
  8534                           ;PGM_5.c: 552: Datum_S[14] = 14;
  8535  0828  300E               	movlw	14
  8536  0829  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8537  082A  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8538  082B  00AE               	movwf	(_Datum_S^(0+256)+14)
  8539                           
  8540                           ;PGM_5.c: 553: Datum_S[15] = Temperatur_HI_rechts;
  8541  082C  0020               	movlb	0	; select bank0
  8542  082D  085E               	movf	_Temperatur_HI_rechts,w
  8543  082E  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8544  082F  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8545  0830  0022               	movlb	2	; select bank2
  8546  0831  00AF               	movwf	(_Datum_S^(0+256)+15)
  8547                           
  8548                           ;PGM_5.c: 554: Datum_S[16] = Temperatur_LO_rechts;
  8549  0832  0020               	movlb	0	; select bank0
  8550  0833  0860               	movf	_Temperatur_LO_rechts,w
  8551  0834  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8552  0835  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8553  0836  0022               	movlb	2	; select bank2
  8554  0837  00B0               	movwf	(_Datum_S^(0+256)+16)
  8555                           
  8556                           ;PGM_5.c: 555: Datum_S[17] = Temperatur_HI_links;
  8557  0838  0020               	movlb	0	; select bank0
  8558  0839  085D               	movf	_Temperatur_HI_links,w
  8559  083A  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8560  083B  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8561  083C  0022               	movlb	2	; select bank2
  8562  083D  00B1               	movwf	(_Datum_S^(0+256)+17)
  8563                           
  8564                           ;PGM_5.c: 556: Datum_S[18] = Temperatur_LO_links;
  8565  083E  0020               	movlb	0	; select bank0
  8566  083F  085F               	movf	_Temperatur_LO_links,w
  8567  0840  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8568  0841  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8569  0842  0022               	movlb	2	; select bank2
  8570  0843  00B2               	movwf	(_Datum_S^(0+256)+18)
  8571                           
  8572                           ;PGM_5.c: 557: Datum_S[19] = 33;
  8573  0844  3021               	movlw	33
  8574  0845  00F7               	movwf	??_Werte_auf_LCD_anzeigen
  8575  0846  0877               	movf	??_Werte_auf_LCD_anzeigen,w
  8576  0847  00B3               	movwf	(_Datum_S^(0+256)+19)
  8577  0848  0008               	return
  8578  0849                     __end_of_Werte_auf_LCD_anzeigen:	
  8579                           
  8580                           	psect	intentry
  8581  0004                     __pintentry:	
  8582 ;; *************** function _Interrupt *****************
  8583 ;; Defined at:
  8584 ;;		line 1162 in file "PGM_5.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;		None
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;		None
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  1    wreg      void 
  8591 ;; Registers used:
  8592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;Total ram usage:        2 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    2
  8605 ;; This function calls:
  8606 ;;		_MLX_read
  8607 ;; This function is called by:
  8608 ;;		Interrupt level 1
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612  0004                     _Interrupt:	
  8613                           
  8614                           ;incstack = 0
  8615  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8616                           
  8617                           ; Regs used in _Interrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8618  0005  3180               	pagesel	$
  8619  0006  0020               	movlb	0	; select bank0
  8620  0007  087F               	movf	127,w
  8621  0008  00F6               	movwf	??_Interrupt+1
  8622                           
  8623                           ;PGM_5.c: 1167: if (TMR0IF) {
  8624  0009  1D0B               	btfss	11,2	;volatile
  8625  000A  290B               	goto	i1l4504
  8626                           
  8627                           ;PGM_5.c: 1169: A_D_Wert [Channel_Index] = ADRESH;
  8628  000B  0021               	movlb	1	; select bank1
  8629  000C  081C               	movf	28,w	;volatile
  8630  000D  00F5               	movwf	??_Interrupt
  8631  000E  0020               	movlb	0	; select bank0
  8632  000F  085C               	movf	_Channel_Index,w
  8633  0010  3EA0               	addlw	(low (_A_D_Wert| 0))& (0+255)
  8634  0011  0086               	movwf	6
  8635  0012  0187               	clrf	7
  8636  0013  0875               	movf	??_Interrupt,w
  8637  0014  0081               	movwf	1
  8638                           
  8639                           ;PGM_5.c: 1171: Channel_Index++;
  8640  0015  3001               	movlw	1
  8641  0016  00F5               	movwf	??_Interrupt
  8642  0017  0875               	movf	??_Interrupt,w
  8643  0018  07DC               	addwf	_Channel_Index,f
  8644                           
  8645                           ;PGM_5.c: 1173: if (Channel_Index == 11) Channel_Index = 0;
  8646  0019  300B               	movlw	11
  8647  001A  065C               	xorwf	_Channel_Index,w
  8648  001B  1903               	btfsc	3,2
  8649  001C  01DC               	clrf	_Channel_Index
  8650                           
  8651                           ;PGM_5.c: 1174: ADCON0 = 0b10000001 | (Channel[Channel_Index] << 2);
  8652  001D  085C               	movf	_Channel_Index,w
  8653  001E  3E34               	addlw	(low (_Channel| (0+256)))& (0+255)
  8654  001F  0086               	movwf	6
  8655  0020  3001               	movlw	1	; select bank2/3
  8656  0021  0087               	movwf	7
  8657  0022  0801               	movf	1,w
  8658  0023  00F5               	movwf	??_Interrupt
  8659  0024  3001               	movlw	1
  8660  0025                     u453_25:	
  8661  0025  35F5               	lslf	??_Interrupt,f
  8662  0026  3EFF               	addlw	-1
  8663  0027  1D03               	skipz
  8664  0028  2825               	goto	u453_25
  8665  0029  3575               	lslf	??_Interrupt,w
  8666  002A  3881               	iorlw	129
  8667  002B  0021               	movlb	1	; select bank1
  8668  002C  009D               	movwf	29	;volatile
  8669                           
  8670                           ;PGM_5.c: 1178: Tick++;
  8671  002D  3001               	movlw	1
  8672  002E  07CD               	addwf	_Tick^(0+128),f
  8673  002F  3000               	movlw	0
  8674  0030  3DCE               	addwfc	(_Tick+1)^(0+128),f
  8675                           
  8676                           ;PGM_5.c: 1179: if(Flag_LED == 1) {
  8677  0031  1E71               	btfss	_Flag_LED/(0+8),_Flag_LED& (0+7)
  8678  0032  2845               	goto	i1l777
  8679                           
  8680                           ;PGM_5.c: 1180: if (Tick >= 300) {
  8681  0033  084E               	movf	(_Tick+1)^(0+128),w
  8682  0034  3A80               	xorlw	128
  8683  0035  00F5               	movwf	??_Interrupt
  8684  0036  3081               	movlw	129
  8685  0037  0275               	subwf	??_Interrupt,w
  8686  0038  1D03               	skipz
  8687  0039  283C               	goto	u455_25
  8688  003A  302C               	movlw	44
  8689  003B  024D               	subwf	_Tick^(0+128),w
  8690  003C                     u455_25:	
  8691  003C  1C03               	skipc
  8692  003D  2847               	goto	i1l4374
  8693                           
  8694                           ;PGM_5.c: 1181: Tick = 0;
  8695  003E  0021               	movlb	1	; select bank1
  8696  003F  01CD               	clrf	_Tick^(0+128)
  8697  0040  01CE               	clrf	(_Tick+1)^(0+128)
  8698                           
  8699                           ;PGM_5.c: 1182: LATA4 = !LATA4;
  8700  0041  3010               	movlw	16
  8701  0042  0022               	movlb	2	; select bank2
  8702  0043  068C               	xorwf	12,f
  8703                           
  8704                           ;PGM_5.c: 1183: }
  8705                           ;PGM_5.c: 1184: }
  8706  0044  2847               	goto	i1l4374
  8707  0045                     i1l777:	
  8708                           
  8709                           ;PGM_5.c: 1185: else {
  8710                           ;PGM_5.c: 1186: LATA4 = 1;
  8711  0045  0022               	movlb	2	; select bank2
  8712  0046  160C               	bsf	12,4	;volatile
  8713  0047                     i1l4374:	
  8714                           
  8715                           ;PGM_5.c: 1187: }
  8716                           ;PGM_5.c: 1201: m++;
  8717  0047  3001               	movlw	1
  8718  0048  00F5               	movwf	??_Interrupt
  8719  0049  0875               	movf	??_Interrupt,w
  8720  004A  0020               	movlb	0	; select bank0
  8721  004B  07D8               	addwf	_m,f
  8722                           
  8723                           ;PGM_5.c: 1202: if (m == 12) {
  8724  004C  300C               	movlw	12
  8725  004D  0658               	xorwf	_m,w
  8726  004E  1D03               	btfss	3,2
  8727  004F  2884               	goto	i1l4418
  8728                           
  8729                           ;PGM_5.c: 1204: m = 0;
  8730  0050  01D8               	clrf	_m
  8731                           
  8732                           ;PGM_5.c: 1205: n_US++;
  8733  0051  3001               	movlw	1
  8734  0052  00F5               	movwf	??_Interrupt
  8735  0053  0875               	movf	??_Interrupt,w
  8736  0054  0021               	movlb	1	; select bank1
  8737  0055  07DB               	addwf	_n_US^(0+128),f
  8738                           
  8739                           ;PGM_5.c: 1206: if (n_US == 4) {
  8740  0056  3004               	movlw	4
  8741  0057  065B               	xorwf	_n_US^(0+128),w
  8742  0058  1D03               	btfss	3,2
  8743  0059  2867               	goto	i1l4394
  8744                           
  8745                           ;PGM_5.c: 1207: n_US = 0;
  8746  005A  01DB               	clrf	_n_US^(0+128)
  8747                           
  8748                           ;PGM_5.c: 1208: LATD5 = 1;
  8749  005B  0022               	movlb	2	; select bank2
  8750  005C  168F               	bsf	15,5	;volatile
  8751                           
  8752                           ;PGM_5.c: 1209: _delay((unsigned long)((10)*(20000000/4000000.0)));
  8753  005D  3010               	movlw	16
  8754  005E                     u743_27:	
  8755  005E  0B89               	decfsz	9,f
  8756  005F  285E               	goto	u743_27
  8757  0060  3200               	nop2
  8758                           
  8759                           ;PGM_5.c: 1210: LATD5 = 0;
  8760  0061  0022               	movlb	2	; select bank2
  8761  0062  128F               	bcf	15,5	;volatile
  8762                           
  8763                           ;PGM_5.c: 1211: TMR1 = 0;
  8764  0063  0020               	movlb	0	; select bank0
  8765  0064  0196               	clrf	22	;volatile
  8766  0065  0197               	clrf	23	;volatile
  8767                           
  8768                           ;PGM_5.c: 1212: TMR1IF = 0;
  8769  0066  1011               	bcf	17,0	;volatile
  8770  0067                     i1l4394:	
  8771                           
  8772                           ;PGM_5.c: 1213: }
  8773                           ;PGM_5.c: 1214: n++;
  8774  0067  3001               	movlw	1
  8775  0068  00F5               	movwf	??_Interrupt
  8776  0069  0875               	movf	??_Interrupt,w
  8777  006A  0020               	movlb	0	; select bank0
  8778  006B  07D7               	addwf	_n,f
  8779                           
  8780                           ;PGM_5.c: 1215: if (n == 2) n = 0;
  8781  006C  3002               	movlw	2
  8782  006D  0657               	xorwf	_n,w
  8783  006E  1903               	btfsc	3,2
  8784  006F  01D7               	clrf	_n
  8785                           
  8786                           ;PGM_5.c: 1217: MLX_read ();
  8787  0070  3195  251D  3180   	fcall	_MLX_read
  8788                           
  8789                           ;PGM_5.c: 1218: if (Temperatur_HI_links >= Waerme_links) Flag_T_links = 1;
  8790  0073  0020               	movlb	0	; select bank0
  8791  0074  0864               	movf	_Waerme_links,w
  8792  0075  025D               	subwf	_Temperatur_HI_links,w
  8793  0076  1803               	btfsc	3,0
  8794  0077  1670               	bsf	_Flag_T_links/(0+8),_Flag_T_links& (0+7)
  8795                           
  8796                           ;PGM_5.c: 1219: if (Temperatur_HI_rechts >= Waerme_rechts) Flag_T_rechts = 1;
  8797  0078  0863               	movf	_Waerme_rechts,w
  8798  0079  025E               	subwf	_Temperatur_HI_rechts,w
  8799  007A  1803               	btfsc	3,0
  8800  007B  15F0               	bsf	_Flag_T_rechts/(0+8),_Flag_T_rechts& (0+7)
  8801                           
  8802                           ;PGM_5.c: 1220: if (Temperatur_HI_links < Waerme_links) Flag_T_links = 0;
  8803  007C  0864               	movf	_Waerme_links,w
  8804  007D  025D               	subwf	_Temperatur_HI_links,w
  8805  007E  1C03               	btfss	3,0
  8806  007F  1270               	bcf	_Flag_T_links/(0+8),_Flag_T_links& (0+7)
  8807                           
  8808                           ;PGM_5.c: 1221: if (Temperatur_HI_rechts < Waerme_rechts) Flag_T_rechts = 0;
  8809  0080  0863               	movf	_Waerme_rechts,w
  8810  0081  025E               	subwf	_Temperatur_HI_rechts,w
  8811  0082  1C03               	btfss	3,0
  8812  0083  11F0               	bcf	_Flag_T_rechts/(0+8),_Flag_T_rechts& (0+7)
  8813  0084                     i1l4418:	
  8814                           
  8815                           ;PGM_5.c: 1223: }
  8816                           ;PGM_5.c: 1224: if (m == 4) {
  8817  0084  3004               	movlw	4
  8818  0085  0658               	xorwf	_m,w
  8819  0086  1D03               	btfss	3,2
  8820  0087  28AE               	goto	i1l4444
  8821                           
  8822                           ;PGM_5.c: 1225: if (n == 0) {
  8823  0088  0857               	movf	_n,w
  8824  0089  1D03               	btfss	3,2
  8825  008A  28AE               	goto	i1l4444
  8826                           
  8827                           ;PGM_5.c: 1226: SSPADD = 4;
  8828  008B  3004               	movlw	4
  8829  008C  0024               	movlb	4	; select bank4
  8830  008D  0092               	movwf	18	;volatile
  8831                           
  8832                           ;PGM_5.c: 1227: I2C_Count = 0;
  8833  008E  0020               	movlb	0	; select bank0
  8834  008F  01DA               	clrf	_I2C_Count
  8835                           
  8836                           ;PGM_5.c: 1228: I2C_Write = 1;
  8837  0090  17F1               	bsf	_I2C_Write/(0+8),_I2C_Write& (0+7)
  8838                           
  8839                           ;PGM_5.c: 1229: I2C_Read = 0;
  8840  0091  1371               	bcf	_I2C_Read/(0+8),_I2C_Read& (0+7)
  8841                           
  8842                           ;PGM_5.c: 1230: I2C_Add = PIC_Slave;
  8843  0092  3001               	movlw	low (_PIC_Slave| (0+32768))
  8844  0093  0084               	movwf	4
  8845  0094  3098               	movlw	high (_PIC_Slave| (0+32768))
  8846  0095  0085               	movwf	5
  8847  0096  0800               	movf	0,w	;code access
  8848  0097  00F5               	movwf	??_Interrupt
  8849  0098  0875               	movf	??_Interrupt,w
  8850  0099  00E1               	movwf	_I2C_Add
  8851                           
  8852                           ;PGM_5.c: 1231: I2C_Index_w = Count++;
  8853  009A  0859               	movf	_Count,w
  8854  009B  00F5               	movwf	??_Interrupt
  8855  009C  0875               	movf	??_Interrupt,w
  8856  009D  00DB               	movwf	_I2C_Index_w
  8857  009E  3001               	movlw	1
  8858  009F  00F5               	movwf	??_Interrupt
  8859  00A0  0875               	movf	??_Interrupt,w
  8860  00A1  07D9               	addwf	_Count,f
  8861                           
  8862                           ;PGM_5.c: 1232: Register_S = I2C_Index_w;
  8863  00A2  085B               	movf	_I2C_Index_w,w
  8864  00A3  00F5               	movwf	??_Interrupt
  8865  00A4  0875               	movf	??_Interrupt,w
  8866  00A5  0021               	movlb	1	; select bank1
  8867  00A6  00DC               	movwf	_Register_S^(0+128)
  8868                           
  8869                           ;PGM_5.c: 1233: if (Count == 20) Count = 0;
  8870  00A7  3014               	movlw	20
  8871  00A8  0020               	movlb	0	; select bank0
  8872  00A9  0659               	xorwf	_Count,w
  8873  00AA  1903               	btfsc	3,2
  8874  00AB  01D9               	clrf	_Count
  8875                           
  8876                           ;PGM_5.c: 1235: SEN = 1;
  8877  00AC  0024               	movlb	4	; select bank4
  8878  00AD  1416               	bsf	22,0	;volatile
  8879  00AE                     i1l4444:	
  8880                           
  8881                           ;PGM_5.c: 1237: }
  8882                           ;PGM_5.c: 1238: }
  8883                           ;PGM_5.c: 1239: if (m == 4) {
  8884  00AE  3004               	movlw	4
  8885  00AF  0020               	movlb	0	; select bank0
  8886  00B0  0658               	xorwf	_m,w
  8887  00B1  1D03               	btfss	3,2
  8888  00B2  28C9               	goto	i1l4462
  8889                           
  8890                           ;PGM_5.c: 1240: if (n == 1) {
  8891  00B3  0357               	decf	_n,w
  8892  00B4  1D03               	btfss	3,2
  8893  00B5  28C9               	goto	i1l4462
  8894                           
  8895                           ;PGM_5.c: 1241: SSPADD = 4;
  8896  00B6  3004               	movlw	4
  8897  00B7  0024               	movlb	4	; select bank4
  8898  00B8  0092               	movwf	18	;volatile
  8899                           
  8900                           ;PGM_5.c: 1242: I2C_Count = 0;
  8901  00B9  0020               	movlb	0	; select bank0
  8902  00BA  01DA               	clrf	_I2C_Count
  8903                           
  8904                           ;PGM_5.c: 1243: I2C_Write = 0;
  8905  00BB  13F1               	bcf	_I2C_Write/(0+8),_I2C_Write& (0+7)
  8906                           
  8907                           ;PGM_5.c: 1244: I2C_Read = 1;
  8908  00BC  1771               	bsf	_I2C_Read/(0+8),_I2C_Read& (0+7)
  8909                           
  8910                           ;PGM_5.c: 1245: I2C_Add = PIC_Slave;
  8911  00BD  3001               	movlw	low (_PIC_Slave| (0+32768))
  8912  00BE  0084               	movwf	4
  8913  00BF  3098               	movlw	high (_PIC_Slave| (0+32768))
  8914  00C0  0085               	movwf	5
  8915  00C1  0800               	movf	0,w	;code access
  8916  00C2  00F5               	movwf	??_Interrupt
  8917  00C3  0875               	movf	??_Interrupt,w
  8918  00C4  00E1               	movwf	_I2C_Add
  8919                           
  8920                           ;PGM_5.c: 1246: I2C_Index_R = 0;
  8921  00C5  0021               	movlb	1	; select bank1
  8922  00C6  01DF               	clrf	_I2C_Index_R^(0+128)
  8923                           
  8924                           ;PGM_5.c: 1248: SEN = 1;
  8925  00C7  0024               	movlb	4	; select bank4
  8926  00C8  1416               	bsf	22,0	;volatile
  8927  00C9                     i1l4462:	
  8928                           
  8929                           ;PGM_5.c: 1250: }
  8930                           ;PGM_5.c: 1251: }
  8931                           ;PGM_5.c: 1252: if (m == 8) {
  8932  00C9  3008               	movlw	8
  8933  00CA  0020               	movlb	0	; select bank0
  8934  00CB  0658               	xorwf	_m,w
  8935  00CC  1D03               	btfss	3,2
  8936  00CD  28EC               	goto	i1l4482
  8937                           
  8938                           ;PGM_5.c: 1253: if (n == 0) {
  8939  00CE  0857               	movf	_n,w
  8940  00CF  1D03               	btfss	3,2
  8941  00D0  28EC               	goto	i1l4482
  8942                           
  8943                           ;PGM_5.c: 1254: SSPADD = 4;
  8944  00D1  3004               	movlw	4
  8945  00D2  0024               	movlb	4	; select bank4
  8946  00D3  0092               	movwf	18	;volatile
  8947                           
  8948                           ;PGM_5.c: 1255: I2C_Count = 0;
  8949  00D4  0020               	movlb	0	; select bank0
  8950  00D5  01DA               	clrf	_I2C_Count
  8951                           
  8952                           ;PGM_5.c: 1256: I2C_Write = 1;
  8953  00D6  17F1               	bsf	_I2C_Write/(0+8),_I2C_Write& (0+7)
  8954                           
  8955                           ;PGM_5.c: 1257: I2C_Read = 0;
  8956  00D7  1371               	bcf	_I2C_Read/(0+8),_I2C_Read& (0+7)
  8957                           
  8958                           ;PGM_5.c: 1258: I2C_Add = PIC_Letter_1;
  8959  00D8  3000               	movlw	low (_PIC_Letter_1| (0+32768))
  8960  00D9  0084               	movwf	4
  8961  00DA  3098               	movlw	high (_PIC_Letter_1| (0+32768))
  8962  00DB  0085               	movwf	5
  8963  00DC  0800               	movf	0,w	;code access
  8964  00DD  00F5               	movwf	??_Interrupt
  8965  00DE  0875               	movf	??_Interrupt,w
  8966  00DF  00E1               	movwf	_I2C_Add
  8967                           
  8968                           ;PGM_5.c: 1260: Register_S = Datum1_an_Letter;
  8969  00E0  0021               	movlb	1	; select bank1
  8970  00E1  085E               	movf	_Datum1_an_Letter^(0+128),w
  8971  00E2  00F5               	movwf	??_Interrupt
  8972  00E3  0875               	movf	??_Interrupt,w
  8973  00E4  00DC               	movwf	_Register_S^(0+128)
  8974                           
  8975                           ;PGM_5.c: 1261: I2C_Index_w = 15;
  8976  00E5  300F               	movlw	15
  8977  00E6  00F5               	movwf	??_Interrupt
  8978  00E7  0875               	movf	??_Interrupt,w
  8979  00E8  0020               	movlb	0	; select bank0
  8980  00E9  00DB               	movwf	_I2C_Index_w
  8981                           
  8982                           ;PGM_5.c: 1263: SEN = 1;
  8983  00EA  0024               	movlb	4	; select bank4
  8984  00EB  1416               	bsf	22,0	;volatile
  8985  00EC                     i1l4482:	
  8986                           
  8987                           ;PGM_5.c: 1265: }
  8988                           ;PGM_5.c: 1266: }
  8989                           ;PGM_5.c: 1269: if (m == 8) {
  8990  00EC  3008               	movlw	8
  8991  00ED  0020               	movlb	0	; select bank0
  8992  00EE  0658               	xorwf	_m,w
  8993  00EF  1D03               	btfss	3,2
  8994  00F0  2908               	goto	i1l4500
  8995                           
  8996                           ;PGM_5.c: 1270: if (n == 1) {
  8997  00F1  0357               	decf	_n,w
  8998  00F2  1D03               	btfss	3,2
  8999  00F3  2908               	goto	i1l4500
  9000                           
  9001                           ;PGM_5.c: 1271: SSPADD = 4;
  9002  00F4  3004               	movlw	4
  9003  00F5  0024               	movlb	4	; select bank4
  9004  00F6  0092               	movwf	18	;volatile
  9005                           
  9006                           ;PGM_5.c: 1272: I2C_Count = 0;
  9007  00F7  0020               	movlb	0	; select bank0
  9008  00F8  01DA               	clrf	_I2C_Count
  9009                           
  9010                           ;PGM_5.c: 1273: I2C_Write = 0;
  9011  00F9  13F1               	bcf	_I2C_Write/(0+8),_I2C_Write& (0+7)
  9012                           
  9013                           ;PGM_5.c: 1274: I2C_Read = 1;
  9014  00FA  1771               	bsf	_I2C_Read/(0+8),_I2C_Read& (0+7)
  9015                           
  9016                           ;PGM_5.c: 1275: I2C_Add = PIC_Letter_1;
  9017  00FB  3000               	movlw	low (_PIC_Letter_1| (0+32768))
  9018  00FC  0084               	movwf	4
  9019  00FD  3098               	movlw	high (_PIC_Letter_1| (0+32768))
  9020  00FE  0085               	movwf	5
  9021  00FF  0800               	movf	0,w	;code access
  9022  0100  00F5               	movwf	??_Interrupt
  9023  0101  0875               	movf	??_Interrupt,w
  9024  0102  00E1               	movwf	_I2C_Add
  9025                           
  9026                           ;PGM_5.c: 1276: I2C_Index_R = 1;
  9027  0103  0021               	movlb	1	; select bank1
  9028  0104  01DF               	clrf	_I2C_Index_R^(0+128)
  9029  0105  0ADF               	incf	_I2C_Index_R^(0+128),f
  9030                           
  9031                           ;PGM_5.c: 1279: SEN = 1;
  9032  0106  0024               	movlb	4	; select bank4
  9033  0107  1416               	bsf	22,0	;volatile
  9034  0108                     i1l4500:	
  9035                           
  9036                           ;PGM_5.c: 1281: }
  9037                           ;PGM_5.c: 1282: }
  9038                           ;PGM_5.c: 1284: TMR0IF = 0;
  9039  0108  110B               	bcf	11,2	;volatile
  9040                           
  9041                           ;PGM_5.c: 1288: GO_nDONE = 1;
  9042  0109  0021               	movlb	1	; select bank1
  9043  010A  149D               	bsf	29,1	;volatile
  9044  010B                     i1l4504:	
  9045                           
  9046                           ;PGM_5.c: 1292: }
  9047                           ;PGM_5.c: 1294: if (SSPIF) {
  9048  010B  0020               	movlb	0	; select bank0
  9049  010C  1D91               	btfss	17,3	;volatile
  9050  010D  2972               	goto	i1l796
  9051                           
  9052                           ;PGM_5.c: 1295: SSPIF = 0;
  9053  010E  1191               	bcf	17,3	;volatile
  9054                           
  9055                           ;PGM_5.c: 1296: if (I2C_Write) {
  9056  010F  1BF1               	btfsc	_I2C_Write/(0+8),_I2C_Write& (0+7)
  9057  0110  292F               	goto	i1l4526
  9058  0111  293D               	goto	i1l797
  9059  0112                     i1l4510:	
  9060                           ;PGM_5.c: 1299: case 0:
  9061                           
  9062                           ;PGM_5.c: 1297: switch (I2C_Count) {
  9063                           
  9064                           
  9065                           ;PGM_5.c: 1300: SSPBUF = (I2C_Add << 1) & 0b11111110;
  9066  0112  3561               	lslf	_I2C_Add,w
  9067  0113  39FE               	andlw	254
  9068  0114  291E               	goto	L2
  9069  0115                     i1l4512:	
  9070                           ;PGM_5.c: 1305: case 1:
  9071                           
  9072                           ;PGM_5.c: 1303: break;
  9073                           
  9074                           ;PGM_5.c: 1302: I2C_Count++;
  9075                           
  9076                           
  9077                           ;PGM_5.c: 1306: SSPBUF = Register_S;
  9078  0115  0021               	movlb	1	; select bank1
  9079  0116  085C               	movf	_Register_S^(0+128),w
  9080  0117  291E               	goto	L2
  9081  0118                     i1l4516:	
  9082                           ;PGM_5.c: 1310: case 2:
  9083                           
  9084                           ;PGM_5.c: 1308: break;
  9085                           
  9086                           ;PGM_5.c: 1307: I2C_Count++;
  9087                           
  9088                           
  9089                           ;PGM_5.c: 1311: SSPBUF = Datum_S[I2C_Index_w];
  9090  0118  085B               	movf	_I2C_Index_w,w
  9091  0119  3E20               	addlw	(low (_Datum_S| (0+256)))& (0+255)
  9092  011A  0086               	movwf	6
  9093  011B  3001               	movlw	1	; select bank2/3
  9094  011C  0087               	movwf	7
  9095  011D  0801               	movf	1,w
  9096  011E                     L2:	
  9097  011E  0024               	movlb	4	; select bank4
  9098  011F  0091               	movwf	17	;volatile
  9099                           
  9100                           ;PGM_5.c: 1312: I2C_Count++;
  9101  0120  3001               	movlw	1
  9102  0121  00F5               	movwf	??_Interrupt
  9103  0122  0875               	movf	??_Interrupt,w
  9104  0123  0020               	movlb	0	; select bank0
  9105  0124  07DA               	addwf	_I2C_Count,f
  9106                           
  9107                           ;PGM_5.c: 1313: break;
  9108  0125  293D               	goto	i1l797
  9109  0126                     i1l803:	
  9110                           ;PGM_5.c: 1315: case 3:
  9111                           
  9112                           
  9113                           ;PGM_5.c: 1316: PEN = 1;
  9114  0126  0024               	movlb	4	; select bank4
  9115  0127  1516               	bsf	22,2	;volatile
  9116                           
  9117                           ;PGM_5.c: 1317: I2C_Count++;
  9118  0128  3001               	movlw	1
  9119  0129  00F5               	movwf	??_Interrupt
  9120  012A  0875               	movf	??_Interrupt,w
  9121  012B  0020               	movlb	0	; select bank0
  9122  012C  07DA               	addwf	_I2C_Count,f
  9123                           
  9124                           ;PGM_5.c: 1318: I2C_Write = 0;
  9125  012D  13F1               	bcf	_I2C_Write/(0+8),_I2C_Write& (0+7)
  9126                           
  9127                           ;PGM_5.c: 1323: }
  9128                           
  9129                           ;PGM_5.c: 1322: break;
  9130                           
  9131                           ;PGM_5.c: 1321: default:
  9132                           
  9133                           ;PGM_5.c: 1319: break;
  9134  012E  293D               	goto	i1l797
  9135  012F                     i1l4526:	
  9136  012F  085A               	movf	_I2C_Count,w
  9137                           
  9138                           ; Switch size 1, requested type "space"
  9139                           ; Number of cases is 4, Range of values is 0 to 3
  9140                           ; switch strategies available:
  9141                           ; Name         Instructions Cycles
  9142                           ; simple_byte           13     7 (average)
  9143                           ; direct_byte           14     6 (fixed)
  9144                           ; jumptable            260     6 (fixed)
  9145                           ;	Chosen strategy is simple_byte
  9146  0130  3A00               	xorlw	0	; case 0
  9147  0131  1903               	skipnz
  9148  0132  2912               	goto	i1l4510
  9149  0133  3A01               	xorlw	1	; case 1
  9150  0134  1903               	skipnz
  9151  0135  2915               	goto	i1l4512
  9152  0136  3A03               	xorlw	3	; case 2
  9153  0137  1903               	skipnz
  9154  0138  2918               	goto	i1l4516
  9155  0139  3A01               	xorlw	1	; case 3
  9156  013A  1903               	skipnz
  9157  013B  2926               	goto	i1l803
  9158  013C  293D               	goto	i1l797
  9159  013D                     i1l797:	
  9160                           
  9161                           ;PGM_5.c: 1324: }
  9162                           ;PGM_5.c: 1326: if (I2C_Read) {
  9163  013D  1B71               	btfsc	_I2C_Read/(0+8),_I2C_Read& (0+7)
  9164  013E  2964               	goto	i1l4548
  9165  013F  2972               	goto	i1l796
  9166  0140                     i1l4530:	
  9167                           ;PGM_5.c: 1329: case 0:
  9168                           
  9169                           ;PGM_5.c: 1327: switch (I2C_Count) {
  9170                           
  9171                           
  9172                           ;PGM_5.c: 1330: SSPBUF = (I2C_Add << 1) | 0b00000001;
  9173  0140  1403               	setc
  9174  0141  0D61               	rlf	_I2C_Add,w
  9175  0142  0024               	movlb	4	; select bank4
  9176  0143  0091               	movwf	17	;volatile
  9177  0144  2955               	goto	i1l4540
  9178  0145                     i1l809:	
  9179                           ;PGM_5.c: 1334: case 1:
  9180                           
  9181                           ;PGM_5.c: 1332: break;
  9182                           
  9183                           ;PGM_5.c: 1331: I2C_Count++;
  9184                           
  9185                           
  9186                           ;PGM_5.c: 1335: RCEN = 1;
  9187  0145  0024               	movlb	4	; select bank4
  9188  0146  1596               	bsf	22,3	;volatile
  9189  0147  2955               	goto	i1l4540
  9190  0148                     i1l4534:	
  9191                           ;PGM_5.c: 1339: case 2:
  9192                           
  9193                           ;PGM_5.c: 1337: break;
  9194                           
  9195                           ;PGM_5.c: 1336: I2C_Count++;
  9196                           
  9197                           
  9198                           ;PGM_5.c: 1340: Datum_R[I2C_Index_R] = SSPBUF;
  9199  0148  0024               	movlb	4	; select bank4
  9200  0149  0811               	movf	17,w	;volatile
  9201  014A  00F5               	movwf	??_Interrupt
  9202  014B  0021               	movlb	1	; select bank1
  9203  014C  085F               	movf	_I2C_Index_R^(0+128),w
  9204  014D  3EBC               	addlw	(low (_Datum_R| 0))& (0+255)
  9205  014E  0086               	movwf	6
  9206  014F  0187               	clrf	7
  9207  0150  0875               	movf	??_Interrupt,w
  9208  0151  0081               	movwf	1
  9209                           
  9210                           ;PGM_5.c: 1341: ACKDT = 1;
  9211  0152  0024               	movlb	4	; select bank4
  9212  0153  1696               	bsf	22,5	;volatile
  9213                           
  9214                           ;PGM_5.c: 1342: ACKEN = 1;
  9215  0154  1616               	bsf	22,4	;volatile
  9216  0155                     i1l4540:	
  9217                           
  9218                           ;PGM_5.c: 1343: I2C_Count++;
  9219  0155  3001               	movlw	1
  9220  0156  00F5               	movwf	??_Interrupt
  9221  0157  0875               	movf	??_Interrupt,w
  9222  0158  0020               	movlb	0	; select bank0
  9223  0159  07DA               	addwf	_I2C_Count,f
  9224                           
  9225                           ;PGM_5.c: 1344: break;
  9226  015A  2972               	goto	i1l796
  9227  015B                     i1l811:	
  9228                           ;PGM_5.c: 1346: case 3:
  9229                           
  9230                           
  9231                           ;PGM_5.c: 1347: PEN = 1;
  9232  015B  0024               	movlb	4	; select bank4
  9233  015C  1516               	bsf	22,2	;volatile
  9234                           
  9235                           ;PGM_5.c: 1348: I2C_Count++;
  9236  015D  3001               	movlw	1
  9237  015E  00F5               	movwf	??_Interrupt
  9238  015F  0875               	movf	??_Interrupt,w
  9239  0160  0020               	movlb	0	; select bank0
  9240  0161  07DA               	addwf	_I2C_Count,f
  9241                           
  9242                           ;PGM_5.c: 1349: I2C_Read = 0;
  9243  0162  1371               	bcf	_I2C_Read/(0+8),_I2C_Read& (0+7)
  9244                           
  9245                           ;PGM_5.c: 1354: }
  9246                           
  9247                           ;PGM_5.c: 1353: break;
  9248                           
  9249                           ;PGM_5.c: 1352: default:
  9250                           
  9251                           ;PGM_5.c: 1350: break;
  9252  0163  2972               	goto	i1l796
  9253  0164                     i1l4548:	
  9254  0164  085A               	movf	_I2C_Count,w
  9255                           
  9256                           ; Switch size 1, requested type "space"
  9257                           ; Number of cases is 4, Range of values is 0 to 3
  9258                           ; switch strategies available:
  9259                           ; Name         Instructions Cycles
  9260                           ; simple_byte           13     7 (average)
  9261                           ; direct_byte           14     6 (fixed)
  9262                           ; jumptable            260     6 (fixed)
  9263                           ;	Chosen strategy is simple_byte
  9264  0165  3A00               	xorlw	0	; case 0
  9265  0166  1903               	skipnz
  9266  0167  2940               	goto	i1l4530
  9267  0168  3A01               	xorlw	1	; case 1
  9268  0169  1903               	skipnz
  9269  016A  2945               	goto	i1l809
  9270  016B  3A03               	xorlw	3	; case 2
  9271  016C  1903               	skipnz
  9272  016D  2948               	goto	i1l4534
  9273  016E  3A01               	xorlw	1	; case 3
  9274  016F  1903               	skipnz
  9275  0170  295B               	goto	i1l811
  9276  0171  2972               	goto	i1l796
  9277  0172                     i1l796:	
  9278                           
  9279                           ;PGM_5.c: 1355: }
  9280                           ;PGM_5.c: 1358: }
  9281                           ;PGM_5.c: 1361: if (IOCIF) {
  9282  0172  1C0B               	btfss	11,0	;volatile
  9283  0173  299A               	goto	i1l818
  9284                           
  9285                           ;PGM_5.c: 1366: if (IOCBF0) {
  9286  0174  0027               	movlb	7	; select bank7
  9287  0175  1C16               	btfss	22,0	;volatile
  9288  0176  2983               	goto	i1l4558
  9289                           
  9290                           ;PGM_5.c: 1367: Encoder++;
  9291  0177  3001               	movlw	1
  9292  0178  00F5               	movwf	??_Interrupt
  9293  0179  0875               	movf	??_Interrupt,w
  9294  017A  0020               	movlb	0	; select bank0
  9295  017B  07D6               	addwf	_Encoder,f
  9296                           
  9297                           ;PGM_5.c: 1368: VAR_zeit_opfer++;
  9298  017C  3001               	movlw	1
  9299  017D  0021               	movlb	1	; select bank1
  9300  017E  07C9               	addwf	_VAR_zeit_opfer^(0+128),f
  9301  017F  3000               	movlw	0
  9302  0180  3DCA               	addwfc	(_VAR_zeit_opfer+1)^(0+128),f
  9303                           
  9304                           ;PGM_5.c: 1373: IOCBF0 = 0;
  9305  0181  0027               	movlb	7	; select bank7
  9306  0182  1016               	bcf	22,0	;volatile
  9307  0183                     i1l4558:	
  9308                           
  9309                           ;PGM_5.c: 1374: }
  9310                           ;PGM_5.c: 1376: if (Flag_Strecke_messen) {
  9311  0183  1C70               	btfss	_Flag_Strecke_messen/(0+8),_Flag_Strecke_messen& (0+7)
  9312  0184  2990               	goto	i1l4564
  9313                           
  9314                           ;PGM_5.c: 1377: if (Encoder >= Strecke) {
  9315  0185  0021               	movlb	1	; select bank1
  9316  0186  0840               	movf	(_Strecke+1)^(0+128),w
  9317  0187  3A80               	xorlw	128
  9318  0188  3C80               	sublw	128
  9319  0189  1D03               	skipz
  9320  018A  298E               	goto	u478_25
  9321  018B  083F               	movf	_Strecke^(0+128),w
  9322  018C  0020               	movlb	0	; select bank0
  9323  018D  0256               	subwf	_Encoder,w
  9324  018E                     u478_25:	
  9325  018E  1803               	btfsc	3,0
  9326                           
  9327                           ;PGM_5.c: 1378: Flag_Strecke_erreicht = 1;
  9328  018F  14F0               	bsf	_Flag_Strecke_erreicht/(0+8),_Flag_Strecke_erreicht& (0+7)
  9329  0190                     i1l4564:	
  9330                           
  9331                           ;PGM_5.c: 1380: }
  9332                           ;PGM_5.c: 1381: }
  9333                           ;PGM_5.c: 1384: if ((A_D_Wert [0] > 110)&& (A_D_Wert [3] < wand)){
  9334  0190  306F               	movlw	111
  9335  0191  0021               	movlb	1	; select bank1
  9336  0192  0220               	subwf	_A_D_Wert^(0+128),w
  9337  0193  1C03               	skipc
  9338  0194  299A               	goto	i1l818
  9339  0195  0879               	movf	_wand,w
  9340  0196  0223               	subwf	(_A_D_Wert^(0+128)+3),w
  9341  0197  1803               	skipnc
  9342  0198  299A               	goto	i1l818
  9343                           
  9344                           ;PGM_5.c: 1385: Flag_Hindernis=1;
  9345  0199  16F0               	bsf	_Flag_Hindernis/(0+8),_Flag_Hindernis& (0+7)
  9346  019A                     i1l818:	
  9347  019A  0876               	movf	??_Interrupt+1,w
  9348  019B  0020               	movlb	0	; select bank0
  9349  019C  00FF               	movwf	127
  9350  019D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9351  019E  0009               	retfie
  9352  019F                     __end_of_Interrupt:	
  9353                           
  9354                           	psect	text29
  9355  151D                     __ptext29:	
  9356 ;; *************** function _MLX_read *****************
  9357 ;; Defined at:
  9358 ;;		line 29 in file "MLX_read.h"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;		None
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;		None
  9363 ;; Return value:  Size  Location     Type
  9364 ;;                  1    wreg      void 
  9365 ;; Registers used:
  9366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;Total ram usage:        2 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    1
  9379 ;; This function calls:
  9380 ;;		_warten_auf_SSP_flag
  9381 ;; This function is called by:
  9382 ;;		_Interrupt
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           
  9387                           ;psect for function _MLX_read
  9388  151D                     _MLX_read:	
  9389                           
  9390                           ;MLX_read.h: 30: SSPADD = 49;
  9391                           
  9392                           ;incstack = 0
  9393                           ; Regs used in _MLX_read: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9394  151D  3031               	movlw	49
  9395  151E  0024               	movlb	4	; select bank4
  9396  151F  0092               	movwf	18	;volatile
  9397                           
  9398                           ;MLX_read.h: 31: MLX_Slave_toggel = !MLX_Slave_toggel;
  9399  1520  3001               	movlw	(0+1) shl (_MLX_Slave_toggel& (0+7))
  9400  1521  06F2               	xorwf	_MLX_Slave_toggel/(0+8),f
  9401                           
  9402                           ;MLX_read.h: 32: I2C_Add = MLX_Slave + MLX_Slave_toggel;
  9403  1522  3002               	movlw	low (_MLX_Slave| (0+32768))
  9404  1523  0084               	movwf	4
  9405  1524  3098               	movlw	high (_MLX_Slave| (0+32768))
  9406  1525  0085               	movwf	5
  9407  1526  0800               	movf	0,w	;code access
  9408  1527  00F3               	movwf	??_MLX_read
  9409  1528  3000               	movlw	0
  9410  1529  1872               	btfsc	_MLX_Slave_toggel/(0+8),_MLX_Slave_toggel& (0+7)
  9411  152A  3001               	movlw	1
  9412  152B  0773               	addwf	??_MLX_read,w
  9413  152C  00F4               	movwf	??_MLX_read+1
  9414  152D  0874               	movf	??_MLX_read+1,w
  9415  152E  0020               	movlb	0	; select bank0
  9416  152F  00E1               	movwf	_I2C_Add
  9417                           
  9418                           ;MLX_read.h: 33: SSPIF = 0;
  9419  1530  1191               	bcf	17,3	;volatile
  9420                           
  9421                           ;MLX_read.h: 34: SEN = 1;
  9422  1531  0024               	movlb	4	; select bank4
  9423  1532  1416               	bsf	22,0	;volatile
  9424                           
  9425                           ;MLX_read.h: 35: warten_auf_SSP_flag ();
  9426  1533  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9427                           
  9428                           ;MLX_read.h: 36: SSPBUF = (I2C_Add<<1) & 0b11111110;
  9429  1536  0020               	movlb	0	; select bank0
  9430  1537  3561               	lslf	_I2C_Add,w
  9431  1538  39FE               	andlw	254
  9432  1539  0024               	movlb	4	; select bank4
  9433  153A  0091               	movwf	17	;volatile
  9434                           
  9435                           ;MLX_read.h: 38: warten_auf_SSP_flag ();
  9436  153B  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9437                           
  9438                           ;MLX_read.h: 39: SSPBUF = Register_R_MLX;
  9439  153E  0020               	movlb	0	; select bank0
  9440  153F  086F               	movf	_Register_R_MLX,w
  9441  1540  0024               	movlb	4	; select bank4
  9442  1541  0091               	movwf	17	;volatile
  9443                           
  9444                           ;MLX_read.h: 40: warten_auf_SSP_flag ();
  9445  1542  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9446                           
  9447                           ;MLX_read.h: 41: RSEN =1;
  9448  1545  0024               	movlb	4	; select bank4
  9449  1546  1496               	bsf	22,1	;volatile
  9450                           
  9451                           ;MLX_read.h: 42: warten_auf_SSP_flag ();
  9452  1547  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9453                           
  9454                           ;MLX_read.h: 43: SSPBUF = (I2C_Add << 1) | 0b00000001;
  9455  154A  1403               	setc
  9456  154B  0020               	movlb	0	; select bank0
  9457  154C  0D61               	rlf	_I2C_Add,w
  9458  154D  0024               	movlb	4	; select bank4
  9459  154E  0091               	movwf	17	;volatile
  9460                           
  9461                           ;MLX_read.h: 44: warten_auf_SSP_flag ();
  9462  154F  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9463                           
  9464                           ;MLX_read.h: 45: RCEN = 1;
  9465  1552  0024               	movlb	4	; select bank4
  9466  1553  1596               	bsf	22,3	;volatile
  9467                           
  9468                           ;MLX_read.h: 46: warten_auf_SSP_flag ();
  9469  1554  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9470                           
  9471                           ;MLX_read.h: 47: if (!MLX_Slave_toggel) {
  9472  1557  1872               	btfsc	_MLX_Slave_toggel/(0+8),_MLX_Slave_toggel& (0+7)
  9473  1558  2D60               	goto	i1l3910
  9474                           
  9475                           ;MLX_read.h: 48: Temperatur_LO_rechts = SSPBUF;
  9476  1559  0024               	movlb	4	; select bank4
  9477  155A  0811               	movf	17,w	;volatile
  9478  155B  00F3               	movwf	??_MLX_read
  9479  155C  0873               	movf	??_MLX_read,w
  9480  155D  0020               	movlb	0	; select bank0
  9481  155E  00E0               	movwf	_Temperatur_LO_rechts
  9482                           
  9483                           ;MLX_read.h: 49: } else {
  9484  155F  2D66               	goto	i1l3912
  9485  1560                     i1l3910:	
  9486                           
  9487                           ;MLX_read.h: 50: Temperatur_LO_links = SSPBUF;
  9488  1560  0024               	movlb	4	; select bank4
  9489  1561  0811               	movf	17,w	;volatile
  9490  1562  00F3               	movwf	??_MLX_read
  9491  1563  0873               	movf	??_MLX_read,w
  9492  1564  0020               	movlb	0	; select bank0
  9493  1565  00DF               	movwf	_Temperatur_LO_links
  9494  1566                     i1l3912:	
  9495                           
  9496                           ;MLX_read.h: 51: }
  9497                           ;MLX_read.h: 52: ACKEN = 1;
  9498  1566  0024               	movlb	4	; select bank4
  9499  1567  1616               	bsf	22,4	;volatile
  9500                           
  9501                           ;MLX_read.h: 53: warten_auf_SSP_flag ();
  9502  1568  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9503                           
  9504                           ;MLX_read.h: 54: RCEN = 1;
  9505  156B  0024               	movlb	4	; select bank4
  9506  156C  1596               	bsf	22,3	;volatile
  9507                           
  9508                           ;MLX_read.h: 55: warten_auf_SSP_flag ();
  9509  156D  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9510                           
  9511                           ;MLX_read.h: 56: if (!MLX_Slave_toggel) {
  9512  1570  1872               	btfsc	_MLX_Slave_toggel/(0+8),_MLX_Slave_toggel& (0+7)
  9513  1571  2D79               	goto	i1l3924
  9514                           
  9515                           ;MLX_read.h: 57: Temperatur_HI_rechts = SSPBUF;
  9516  1572  0024               	movlb	4	; select bank4
  9517  1573  0811               	movf	17,w	;volatile
  9518  1574  00F3               	movwf	??_MLX_read
  9519  1575  0873               	movf	??_MLX_read,w
  9520  1576  0020               	movlb	0	; select bank0
  9521  1577  00DE               	movwf	_Temperatur_HI_rechts
  9522                           
  9523                           ;MLX_read.h: 58: } else {
  9524  1578  2D7F               	goto	i1l3926
  9525  1579                     i1l3924:	
  9526                           
  9527                           ;MLX_read.h: 59: Temperatur_HI_links = SSPBUF;
  9528  1579  0024               	movlb	4	; select bank4
  9529  157A  0811               	movf	17,w	;volatile
  9530  157B  00F3               	movwf	??_MLX_read
  9531  157C  0873               	movf	??_MLX_read,w
  9532  157D  0020               	movlb	0	; select bank0
  9533  157E  00DD               	movwf	_Temperatur_HI_links
  9534  157F                     i1l3926:	
  9535                           
  9536                           ;MLX_read.h: 61: }
  9537                           ;MLX_read.h: 62: ACKEN = 1;
  9538  157F  0024               	movlb	4	; select bank4
  9539  1580  1616               	bsf	22,4	;volatile
  9540                           
  9541                           ;MLX_read.h: 63: warten_auf_SSP_flag ();
  9542  1581  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9543                           
  9544                           ;MLX_read.h: 64: RCEN = 1;
  9545  1584  0024               	movlb	4	; select bank4
  9546  1585  1596               	bsf	22,3	;volatile
  9547                           
  9548                           ;MLX_read.h: 65: warten_auf_SSP_flag ();
  9549  1586  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9550                           
  9551                           ;MLX_read.h: 66: junk = SSPBUF;
  9552  1589  0024               	movlb	4	; select bank4
  9553  158A  0811               	movf	17,w	;volatile
  9554  158B  00F3               	movwf	??_MLX_read
  9555  158C  0873               	movf	??_MLX_read,w
  9556  158D  0021               	movlb	1	; select bank1
  9557  158E  00E0               	movwf	_junk^(0+128)
  9558                           
  9559                           ;MLX_read.h: 69: ACKEN = 1;
  9560  158F  0024               	movlb	4	; select bank4
  9561  1590  1616               	bsf	22,4	;volatile
  9562                           
  9563                           ;MLX_read.h: 70: warten_auf_SSP_flag ();
  9564  1591  3191  2158  3195   	fcall	_warten_auf_SSP_flag
  9565                           
  9566                           ;MLX_read.h: 72: PEN = 1;
  9567  1594  0024               	movlb	4	; select bank4
  9568  1595  1516               	bsf	22,2	;volatile
  9569                           
  9570                           ;MLX_read.h: 73: warten_auf_SSP_flag ();
  9571  1596  3191  2158         	fcall	_warten_auf_SSP_flag
  9572  1598  0008               	return
  9573  1599                     __end_of_MLX_read:	
  9574                           
  9575                           	psect	text30
  9576  1158                     __ptext30:	
  9577 ;; *************** function _warten_auf_SSP_flag *****************
  9578 ;; Defined at:
  9579 ;;		line 21 in file "MLX_read.h"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;		None
  9582 ;; Auto vars:     Size  Location     Type
  9583 ;;		None
  9584 ;; Return value:  Size  Location     Type
  9585 ;;                  1    wreg      void 
  9586 ;; Registers used:
  9587 ;;		None
  9588 ;; Tracked objects:
  9589 ;;		On entry : 0/0
  9590 ;;		On exit  : 0/0
  9591 ;;		Unchanged: 0/0
  9592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;Total ram usage:        0 bytes
  9598 ;; Hardware stack levels used:    1
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_MLX_read
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           
  9607                           ;psect for function _warten_auf_SSP_flag
  9608  1158                     _warten_auf_SSP_flag:	
  9609  1158                     i1l202:	
  9610                           ;MLX_read.h: 22: while(!SSPIF);
  9611                           
  9612                           ;incstack = 0
  9613                           ; Regs used in _warten_auf_SSP_flag: []
  9614                           
  9615  1158  0020               	movlb	0	; select bank0
  9616  1159  1D91               	btfss	17,3	;volatile
  9617  115A  2958               	goto	i1l202
  9618                           
  9619                           ;MLX_read.h: 23: SSPIF = 0;
  9620  115B  1191               	bcf	17,3	;volatile
  9621  115C  0008               	return
  9622  115D                     __end_of_warten_auf_SSP_flag:	
  9623  007E                     btemp	set	126	;btemp
  9624  007E                     int$flags	set	126
  9625  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    3
    Data        31
    BSS         99
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     52      80
    BANK1            80      6      76
    BANK2            80      0      31
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Strecke_fahren
    _main->_Werte_auf_LCD_anzeigen
    _main->_hindernis
    _main->_kit_abwerfen
    _von_sensor_VR_bis_mitte->_Strecke_fahren
    _von_sensor_VR_bis_mitte->_hindernis
    _von_mitte_bis_wieder_wand->_hindernis
    _schwarzeplatte->_Strecke_fahren
    _von_mitte_bis_wieder_wand_in_schwarzeplatte->_Strecke_fahren
    _von_mitte_bis_wieder_wand_in_schwarzeplatte->_hindernis
    _omnifakerechts->___awdiv
    _omnifakelinks->___awdiv
    ___fttol->___lbtoft
    ___ftmul->___lbtoft
    _opfer->_Strecke_fahren
    _opfer->_kit_abwerfen
    _rechts90grad->_Strecke_fahren
    _links90grad->_Strecke_fahren

Critical Paths under _Interrupt in COMMON

    _Interrupt->_MLX_read

Critical Paths under _main in BANK0

    _main->_von_sensor_VR_bis_mitte
    _schwarzeplatte->_ausrichten
    _von_mitte_bis_wieder_wand_in_schwarzeplatte->_opfer
    _ausrichten->_hinten_ausrichten
    _ausrichten->_links_ausrichten
    _ausrichten->_rechts_ausrichten
    _ausrichten->_vorne_ausrichten
    _vorne_ausrichten->___fttol
    _rechts_ausrichten->___fttol
    _omnifakerechts->___awdiv
    _omnifakelinks->___awdiv
    _links_ausrichten->___fttol
    _hinten_ausrichten->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    _im_Kreis_faren->_links90grad
    _anderwandlang->_opfer
    _opfer->_kit_abwerfen
    _opfer->_links90grad
    _opfer->_rechts90grad
    _rechts90grad->_Strecke_fahren
    _links90grad->_Strecke_fahren

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_von_mitte_bis_wieder_wand
    _von_sensor_VR_bis_mitte->_schwarzeplatte
    _von_mitte_bis_wieder_wand->_schwarzeplatte

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Interrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Interrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Interrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Interrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Interrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Interrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Interrupt in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  279722
                                              4 BANK1      2     2      0
                     _Strecke_fahren
             _Werte_auf_LCD_anzeigen
                      _anderwandlang
                         _ausrichten
                          _hindernis
                     _im_Kreis_faren
                               _init
                       _kit_abwerfen
                        _links90grad
                              _opfer
                       _rechts90grad
                     _schwarzeplatte
          _von_mitte_bis_wieder_wand
            _von_sensor_VR_bis_mitte
 ---------------------------------------------------------------------------------
 (1) _von_sensor_VR_bis_mitte                              1     1      0   71581
                                             51 BANK0      1     1      0
                     _Strecke_fahren
                          _hindernis
                              _opfer
                     _schwarzeplatte
 ---------------------------------------------------------------------------------
 (1) _von_mitte_bis_wieder_wand                            2     2      0   70770
                                              2 BANK1      2     2      0
                          _hindernis
                              _opfer
                     _schwarzeplatte
 ---------------------------------------------------------------------------------
 (2) _schwarzeplatte                                       2     2      0   68133
                                              0 BANK1      2     2      0
                     _Strecke_fahren
                         _ausrichten
                        _links90grad
                              _opfer
_von_mitte_bis_wieder_wand_in_schwar
 ---------------------------------------------------------------------------------
 (3) _von_mitte_bis_wieder_wand_in_schwarzeplatte          2     2      0    3448
                                              5 BANK0      2     2      0
                     _Strecke_fahren
                          _hindernis
                              _opfer
 ---------------------------------------------------------------------------------
 (4) _hindernis                                            2     2      0       0
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _ausrichten                                           2     2      0   60426
                                             49 BANK0      2     2      0
                  _hinten_ausrichten
                   _links_ausrichten
                      _omnifakelinks
                     _omnifakerechts
                  _rechts_ausrichten
                   _vorne_ausrichten
 ---------------------------------------------------------------------------------
 (4) _vorne_ausrichten                                     4     4      0   14624
                                             45 BANK0      4     4      0
                   _Power_Ausrichten
                            ___ftmul
                            ___fttol
                           ___lbtoft
                              _opfer
 ---------------------------------------------------------------------------------
 (4) _rechts_ausrichten                                    4     4      0   14624
                                             45 BANK0      4     4      0
                   _Power_Ausrichten
                            ___ftmul
                            ___fttol
                           ___lbtoft
                              _opfer
 ---------------------------------------------------------------------------------
 (4) _omnifakerechts                                       2     2      0     965
                                              8 BANK0      2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _omnifakelinks                                        2     2      0     965
                                              8 BANK0      2     2      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4     965
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _links_ausrichten                                     4     4      0   14624
                                             45 BANK0      4     4      0
                   _Power_Ausrichten
                            ___ftmul
                            ___fttol
                           ___lbtoft
                              _opfer
 ---------------------------------------------------------------------------------
 (4) _hinten_ausrichten                                    4     4      0   14624
                                             45 BANK0      4     4      0
                   _Power_Ausrichten
                            ___ftmul
                            ___fttol
                           ___lbtoft
                              _opfer
 ---------------------------------------------------------------------------------
 (5) ___lbtoft                                             8     5      3    1979
                                              4 COMMON     1     1      0
                                              8 BANK0      7     4      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             14    10      4    2372
                                             31 BANK0     14    10      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             16    10      6    7636
                                             15 BANK0     16    10      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    1948
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _Power_Ausrichten                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _im_Kreis_faren                                       2     2      0     811
                                              3 BANK0      2     2      0
                        _links90grad
 ---------------------------------------------------------------------------------
 (1) _anderwandlang                                        3     3      0    2637
                                              5 BANK0      3     3      0
                              _opfer
 ---------------------------------------------------------------------------------
 (4) _opfer                                                2     2      0    2637
                                              3 BANK0      2     2      0
                     _Strecke_fahren
                       _kit_abwerfen
                        _links90grad
                       _rechts90grad
 ---------------------------------------------------------------------------------
 (5) _rechts90grad                                         1     1      0     811
                                              2 BANK0      1     1      0
                     _Strecke_fahren
 ---------------------------------------------------------------------------------
 (5) _links90grad                                          1     1      0     811
                                              2 BANK0      1     1      0
                     _Strecke_fahren
 ---------------------------------------------------------------------------------
 (6) _Strecke_fahren                                       4     3      1     811
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _kit_abwerfen                                         5     5      0     204
                                              4 COMMON     2     2      0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Werte_auf_LCD_anzeigen                               2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Interrupt                                            2     2      0       0
                                              2 COMMON     2     2      0
                           _MLX_read
 ---------------------------------------------------------------------------------
 (9) _MLX_read                                             2     2      0       0
                                              0 COMMON     2     2      0
                _warten_auf_SSP_flag
 ---------------------------------------------------------------------------------
 (10) _warten_auf_SSP_flag                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Strecke_fahren
   _Werte_auf_LCD_anzeigen
   _anderwandlang
     _opfer
       _Strecke_fahren
       _kit_abwerfen
       _links90grad
         _Strecke_fahren
       _rechts90grad
         _Strecke_fahren
   _ausrichten
     _hinten_ausrichten
       _Power_Ausrichten
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       _opfer
         _Strecke_fahren
         _kit_abwerfen
         _links90grad
           _Strecke_fahren
         _rechts90grad
           _Strecke_fahren
     _links_ausrichten
       _Power_Ausrichten
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       _opfer
         _Strecke_fahren
         _kit_abwerfen
         _links90grad
           _Strecke_fahren
         _rechts90grad
           _Strecke_fahren
     _omnifakelinks
       ___awdiv
     _omnifakerechts
       ___awdiv
     _rechts_ausrichten
       _Power_Ausrichten
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       _opfer
         _Strecke_fahren
         _kit_abwerfen
         _links90grad
           _Strecke_fahren
         _rechts90grad
           _Strecke_fahren
     _vorne_ausrichten
       _Power_Ausrichten
       ___ftmul
         ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft (ARG)
           ___ftpack
       ___lbtoft
         ___ftpack
       _opfer
         _Strecke_fahren
         _kit_abwerfen
         _links90grad
           _Strecke_fahren
         _rechts90grad
           _Strecke_fahren
   _hindernis
   _im_Kreis_faren
     _links90grad
       _Strecke_fahren
   _init
   _kit_abwerfen
   _links90grad
     _Strecke_fahren
   _opfer
     _Strecke_fahren
     _kit_abwerfen
     _links90grad
       _Strecke_fahren
     _rechts90grad
       _Strecke_fahren
   _rechts90grad
     _Strecke_fahren
   _schwarzeplatte
     _Strecke_fahren
     _ausrichten
       _hinten_ausrichten
         _Power_Ausrichten
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         _opfer
           _Strecke_fahren
           _kit_abwerfen
           _links90grad
             _Strecke_fahren
           _rechts90grad
             _Strecke_fahren
       _links_ausrichten
         _Power_Ausrichten
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         _opfer
           _Strecke_fahren
           _kit_abwerfen
           _links90grad
             _Strecke_fahren
           _rechts90grad
             _Strecke_fahren
       _omnifakelinks
         ___awdiv
       _omnifakerechts
         ___awdiv
       _rechts_ausrichten
         _Power_Ausrichten
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         _opfer
           _Strecke_fahren
           _kit_abwerfen
           _links90grad
             _Strecke_fahren
           _rechts90grad
             _Strecke_fahren
       _vorne_ausrichten
         _Power_Ausrichten
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         _opfer
           _Strecke_fahren
           _kit_abwerfen
           _links90grad
             _Strecke_fahren
           _rechts90grad
             _Strecke_fahren
     _links90grad
       _Strecke_fahren
     _opfer
       _Strecke_fahren
       _kit_abwerfen
       _links90grad
         _Strecke_fahren
       _rechts90grad
         _Strecke_fahren
     _von_mitte_bis_wieder_wand_in_schwarzeplatte
       _Strecke_fahren
       _hindernis
       _opfer
         _Strecke_fahren
         _kit_abwerfen
         _links90grad
           _Strecke_fahren
         _rechts90grad
           _Strecke_fahren
   _von_mitte_bis_wieder_wand
     _hindernis
     _opfer
       _Strecke_fahren
       _kit_abwerfen
       _links90grad
         _Strecke_fahren
       _rechts90grad
         _Strecke_fahren
     _schwarzeplatte
       _Strecke_fahren
       _ausrichten
         _hinten_ausrichten
           _Power_Ausrichten
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _opfer
             _Strecke_fahren
             _kit_abwerfen
             _links90grad
               _Strecke_fahren
             _rechts90grad
               _Strecke_fahren
         _links_ausrichten
           _Power_Ausrichten
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _opfer
             _Strecke_fahren
             _kit_abwerfen
             _links90grad
               _Strecke_fahren
             _rechts90grad
               _Strecke_fahren
         _omnifakelinks
           ___awdiv
         _omnifakerechts
           ___awdiv
         _rechts_ausrichten
           _Power_Ausrichten
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _opfer
             _Strecke_fahren
             _kit_abwerfen
             _links90grad
               _Strecke_fahren
             _rechts90grad
               _Strecke_fahren
         _vorne_ausrichten
           _Power_Ausrichten
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _opfer
             _Strecke_fahren
             _kit_abwerfen
             _links90grad
               _Strecke_fahren
             _rechts90grad
               _Strecke_fahren
       _links90grad
         _Strecke_fahren
       _opfer
         _Strecke_fahren
         _kit_abwerfen
         _links90grad
           _Strecke_fahren
         _rechts90grad
           _Strecke_fahren
       _von_mitte_bis_wieder_wand_in_schwarzeplatte
         _Strecke_fahren
         _hindernis
         _opfer
           _Strecke_fahren
           _kit_abwerfen
           _links90grad
             _Strecke_fahren
           _rechts90grad
             _Strecke_fahren
   _von_sensor_VR_bis_mitte
     _Strecke_fahren
     _hindernis
     _opfer
       _Strecke_fahren
       _kit_abwerfen
       _links90grad
         _Strecke_fahren
       _rechts90grad
         _Strecke_fahren
     _schwarzeplatte
       _Strecke_fahren
       _ausrichten
         _hinten_ausrichten
           _Power_Ausrichten
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _opfer
             _Strecke_fahren
             _kit_abwerfen
             _links90grad
               _Strecke_fahren
             _rechts90grad
               _Strecke_fahren
         _links_ausrichten
           _Power_Ausrichten
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _opfer
             _Strecke_fahren
             _kit_abwerfen
             _links90grad
               _Strecke_fahren
             _rechts90grad
               _Strecke_fahren
         _omnifakelinks
           ___awdiv
         _omnifakerechts
           ___awdiv
         _rechts_ausrichten
           _Power_Ausrichten
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _opfer
             _Strecke_fahren
             _kit_abwerfen
             _links90grad
               _Strecke_fahren
             _rechts90grad
               _Strecke_fahren
         _vorne_ausrichten
           _Power_Ausrichten
           ___ftmul
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft
             ___ftpack
           _opfer
             _Strecke_fahren
             _kit_abwerfen
             _links90grad
               _Strecke_fahren
             _rechts90grad
               _Strecke_fahren
       _links90grad
         _Strecke_fahren
       _opfer
         _Strecke_fahren
         _kit_abwerfen
         _links90grad
           _Strecke_fahren
         _rechts90grad
           _Strecke_fahren
       _von_mitte_bis_wieder_wand_in_schwarzeplatte
         _Strecke_fahren
         _hindernis
         _opfer
           _Strecke_fahren
           _kit_abwerfen
           _links90grad
             _Strecke_fahren
           _rechts90grad
             _Strecke_fahren

 _Interrupt (ROOT)
   _MLX_read
     _warten_auf_SSP_flag

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       3       1       21.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     34      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      6      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1F       9       38.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C5      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C5      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 17 13:13:00 2018

                          ?_von_mitte_bis_wieder_wand 0073                                         _VAR_opfer_aus 0386  
                                                   _H 00E9                                                     _m 0058  
                                                   _n 0057                                                     _z 00CF  
                                         __CFG_CP$OFF 0000                                          ___awdiv@sign 0025  
                                                 l400 07B4                                                   l404 07C6  
                                                 l510 15AA                                                   l520 161C  
                                                 l432 145D                                                   l521 15F4  
                                                 l513 15CE                                                   l443 11F0  
                                                 l507 159A                                                   l452 11B3  
                                                 l524 1604                                                   l612 12D0  
                                                 l533 14B6                                                   l381 0765  
                                                 l535 14E1                                                   l519 161E  
                                                 l623 1314                                                   l615 12D9  
                                                 l383 071A                                                   l704 0F8A  
                                                 l537 1501                                                   l713 0B5E  
                                                 l538 151B                                                   l642 021C  
                                                 l562 05A7                                                   l643 023C  
                                                 l732 0C7E                                                   l652 034D  
                                                 l580 0634                                                   l556 0571  
                                                 l388 0745                                                   l397 07AB  
                                                 l718 0B72                                                   l662 044D  
                                                 l727 0C59                                                   l647 02D4  
                                                 l672 04EB                                                   l592 06A2  
                                                 l657 03C6                                                   l667 04D7  
                                                 l684 0DEC                                                   l694 0EEF  
                                                 l598 1742                                                   l679 0D73  
                                                 l689 0E65                                                   l699 0F76  
                                                 l990 13C2                                                   l991 13CA  
                                                 l983 13AF                                                   _GIE 005F  
                                                 _RB1 0069                                                   _RD4 007C  
                                                 _PR2 001B                                                   _PEN 10B2  
                                                 _SEN 10B0                                          __CFG_BORV$LO 0000  
                                                 wreg 0009                                          __CFG_FOSC$HS 0000  
                                    ??_im_Kreis_faren 0023                               _von_sensor_VR_bis_mitte 07D0  
                                        __CFG_LVP$OFF 0000                            __size_of_hinten_ausrichten 02FE  
                                                l1074 168D                                                  l3212 16F8  
                                                l3152 1639                                                  l3208 16EF  
                                                l3170 1669                                                  l3180 1690  
                                                l3172 1677                                                  l5100 03E5  
                                                l3228 16F9                                                  l5102 03E9  
                                                l3184 169E                                                  l5200 0E8B  
                                                l3178 1684                                                  l5042 01F9  
                                                l5132 04E8                                                  l5116 046F  
                                                l5044 0259                                                  l3196 16B0  
                                                l5300 149E                                                  l5230 0F87  
                                                l5214 0F0E                                                  l5118 0473  
                                                l5070 02E9                                                  l5054 0270  
                                                l5216 0F12                                                  l5152 0D0F  
                                                l5400 066F                                                  l5306 1449  
                                                l5330 058D                                                  l5410 0695  
                                                l5314 0561                                                  l5500 12F9  
                                                l5084 035E                                                  l5068 02E5  
                                                l5308 14AA                                                  l4614 14FC  
                                                l5502 1304                                                  l5182 0DFD  
                                                l5166 0D84                                                  l5086 0362  
                                                l5350 05DF                                                  l4640 1202  
                                                l5424 086C                                                  l5512 131A  
                                                l5184 0E01                                                  l5168 0D88  
                                                l5434 088F                                                  l4810 17B4  
                                                l5258 1252                                                  l5338 05B4  
                                                l5346 05D3                                                  l5362 060A  
                                                l5530 13FE                                                  l4660 1385  
                                                l5292 1492                                                  l5284 147A  
                                                l5612 06F6                                                  l4654 11C5  
                                                l4822 17D0                                                  l4814 17BC  
                                                l5198 0E87                                                  l4750 1277  
                                                l5382 064D                                                  l5366 0616  
                                                l5358 05FF                                                  l5470 07E0  
                                                l5448 08CD                                                  l4664 138C  
                                                l4912 091C                                                  l5384 0653  
                                                l5560 1441                                                  l5552 1437  
                                                l5544 142B                                                  l5472 07EC  
                                                l5624 070D                                                  l3954 081E  
                                                l5458 08FD                                                  l4674 13B4  
                                                l4666 1396                                                  l4826 17D8  
                                                l4914 0980                                                  l5394 0662  
                                                l3948 0809                                                  l5492 12E2  
                                                l4676 13BC                                                  l4668 139B  
                                                l4756 1282                                                  l4932 0986  
                                                l5396 0668                                                  l5652 075E  
                                                l4598 14D0                                                  l4782 12B9  
                                                l4774 12A8                                                  l4766 128A  
                                                l4934 09EF                                                  l5558 13E4  
                                                l5654 0764                                                  _ADIE 048E  
                                                l4792 1763                                                  l4944 0AFA  
                                                l4768 1296                                                  l5498 12FE  
                                                l4778 12B1                                                  l4866 0A04  
                                                l4868 0A7A                                                  l4980 0BF5  
                                                l5684 07BE                                                  l4798 1779  
                                                l4958 0B6F                                                  l4886 0A80  
                                                l4888 0AE4                                                  l4994 0C7B  
                                          _Abstand_US 00D9                                                  _LATA 010C  
                                                _LATB 010D                                                  u3015 1685  
                                                _LATC 010E                                                  _LATD 010F  
                                                _LATE 0110                                                  u5015 13D1  
                                                _PIE1 0091                                                  _PIE2 0092  
                                                u5115 15E6                                                  u5205 12A1  
                                                u5215 12A9                                                  u5305 17C3  
                                                _INTE 005C                                                  u5335 17D9  
                                                u5175 128D                                                  u7007 0217  
                                                u5345 17DF                                                  u5265 1785  
                                                u5425 0935                                                  u7017 022A  
                                                u6235 08AE                                                  u5275 1795  
                                                u2955 1640                                                  u5195 1297  
                                                u5435 099F                                                  u7107 09CF  
                                                u7027 0237                                                  _RCEN 10B3  
                                                u6245 08DE                                                  u7117 09E1  
                                                u5525 0C6D                                                  u7037 0251  
                                                u7207 12F0                                                  u5295 17BD  
                                                u7127 0A2A                                                  u7047 0942  
                                                u5535 0C79                                                  u7217 0858  
                                                u2985 166A                                                  u5385 0A1D  
                                                u7137 0A3F                                                  u7057 0952  
                                                u5545 0C8F                                                  u5705 035C  
                                                _PIR1 0011                                                  _PIR2 0012  
                                                u7307 15B6                                                  u7227 0865  
                                                u5475 0B6D                                                  u5395 0A99  
                                                u7147 0A53                                                  u7067 0962  
                                                u5555 0C9B                                                  u5715 03D7  
                                                u7317 1610                                                  u7237 087B  
                                                u7157 0A68                                                  u7077 0973  
                                                u5725 03E3                                                  u7407 14EF  
                                                u7327 120C                                                  u7247 0888  
                                                u4935 1391                                                  u5815 0D82  
                                                u5495 0B81                                                  u7167 0AA6  
                                                u7087 09AC                                                  u5735 0461  
                                                u7417 1505                                                  u7337 121A  
                                                u7257 08B9                                                  u7177 0AB6  
                                                u7097 09BE                                                  u5745 046D  
                                                u7427 150E                                                  u7347 11CF  
                                                u7267 08C6                                                  u4955 13AA  
                                                u5915 0F99                                                  u5835 0DFB  
                                                u7187 0AC6                                                  u6707 06DD  
                                                u7357 11DD                                                  u7277 08E9  
                                                u5845 0E79                                                  u7197 0AD7  
                                                u5765 04E6                                                  u5685 02E3  
                                                u6717 06EF                                                  u7367 14BA  
                                                u7287 08F6                                                  u4975 13B7  
                                                u5855 0E85                                                  u6807 05CB  
                                                u6727 0705                                                  u7377 14C3  
                                                u7297 0906                                                  u5865 0F00  
                                                u6817 05E8                                                  u6737 0726  
                                                u7387 14D5                                                  u5875 0F0C  
                                                u6907 16C9                                                  u6827 05F6  
                                                u6747 078D                                                  u7397 14E5  
                                                u6917 16D7                                                  u6837 0620  
                                                u6757 140D                                                  u5895 0F85  
                                                u6927 16E8                                                  u6847 0640  
                                                u6767 1424                                                  u6937 1707  
                                                u6857 0679                                                  u6777 0596  
                                                u6697 06CF                                                  u6947 1716  
                                                u6867 068D                                                  u6787 05A3  
                                                u6957 1724                                                  u6877 1469  
                                                u6797 05BD                                                  u6967 1735  
                                                u6887 1483                                                  u6977 123C  
                                                u6897 16BA                                                  u6987 1262  
                                                u6997 020A                                                  _TMR0 0015  
                                                _TMR1 0016                                                  _RSEN 10B1  
                                                _WPUB 020D                                          __CFG_WRT$OFF 0000  
                                                _Tick 00CD                                                  _n_US 00DB  
                      __end_of_Werte_auf_LCD_anzeigen 0849                                                  _main 06A9  
                                        ___ftpack@arg 0020                                                  _init 131D  
                                        ___ftpack@exp 0023                                                  _junk 00E0  
                                                _wand 0079                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                                                  _zeit 00C3  
                                                btemp 007E                             __size_of_Power_Ausrichten 0001  
                                                start 019F                                         __CFG_IESO$OFF 0000  
                                       __CFG_MCLRE$ON 0000                                          ___ftmul@cntr 003D  
                                        ___ftmul@sign 003E                                        _VAR_zeit_opfer 00C9  
                                        ___fttol@exp1 004C                                          ___fttol@lval 0048  
                                        ?_links90grad 0073                                                 ?_main 0073  
                                               _ACKEN 10B4                                                 _ACKDT 10B5  
                                               ?_init 0073                                                 _BCLIF 0093  
                                     __end_of___awdiv 12BE                                         __CFG_WDTE$OFF 0000  
                                     __end_of___ftmul 1800                                       ___awdiv@divisor 0020  
                                               _T1CON 0018                                       __end_of___fttol 16A7  
                                               _T2CON 001C                                                 _LATA4 0864  
                                               _LATD5 087D                                                 _IOCBF 0396  
                                               _IOCBN 0395                                                 _IOCBP 0394  
                                               _IOCIE 005B                                                 _IOCIF 0058  
                                               i1l202 1158                                                 i1l811 015B  
                                               i1l803 0126                                                 i1l809 0145  
                                               i1l818 019A                                                 i1l777 0045  
                                               i1l796 0172                                                 i1l797 013D  
                                     ___awdiv@counter 0024                                                 _PORTA 000C  
                                               _PORTB 000D                                                 _PORTC 000E  
                                               _PORTD 000F                                                 _PORTE 0010  
                           __size_of_links_ausrichten 00FD                                                 _TRISA 008C  
                                               _TRISB 008D                                                 _TRISC 008E  
                                               _TRISD 008F                                                 _SSPIE 048B  
                                               _TRISE 0090                                                 _SSPIF 008B  
                                   _rechts_ausrichten 0BE8                                         __CFG_PWRTE$ON 0000  
                                               _Count 0059                                  Strecke_fahren@Length 0078  
                                      __CFG_FCMEN$OFF 0000                                                 _cm_30 00EB  
                                  ?_rechts_ausrichten 0073                                      __end_of_MLX_read 1599  
                                      _Flag_Hindernis 0385                                        _Strecke_fahren 1179  
                                               _opfer 1599                                         ___ftpack@sign 0024  
                                   ?_vorne_ausrichten 0073                                                 _zunah 0065  
                                      __pbitbssCOMMON 0380                                        __CFG_BOREN$OFF 0000  
                                  ??_vorne_ausrichten 004D                                                 status 0003  
                                 ??_rechts_ausrichten 004D                                                 wtemp0 007E  
                                 _warten_auf_SSP_flag 1158                         _VAR_von_mitte_bis_wieder_wand 038A  
                             __size_of_schwarzeplatte 0154                                       __initialization 01A1  
                                        __end_of_main 07D0                                          __end_of_init 137C  
                                    _Ausrichten_Stopp 0069                                        __CFG_LPBOR$OFF 0000  
                                              ??_main 00E5                                         ___fttol@sign1 0047  
                                              ??_init 0077                                  ?_warten_auf_SSP_flag 0073  
                           __end_of_rechts_ausrichten 0D02                             ??_von_sensor_VR_bis_mitte 0053  
                              __end_of_Strecke_fahren 118B                                     _VAR_bis_wand_zeit 00D6  
                             __size_of_omnifakerechts 00E8                                                _ADCON0 009D  
                                              _ADCON1 009E                                    _VAR_schwarz_rechts 0387  
                                              _ADRESH 009C                                                _CCPR1L 0291  
                                              _CCPR2L 0298                                                ?_opfer 0073  
                                       ?_kit_abwerfen 0073                                      ___awdiv@dividend 0022  
                                              _ANSELA 018C                                                _ANSELB 018D  
                                              _ANSELC 018E                                                _ANSELD 018F  
                                              _ANSELE 0190                                      __end_of___ftpack 13E1  
                                    __end_of___lbtoft 11A6                                            _Register_R 00C1  
                                          _Register_S 00DC                                                _T1GCON 0019  
                                              _IOCBF0 1CB0                                                i1l4500 0108  
                                              i1l4510 0112                                                i1l4512 0115  
                                              i1l4504 010B                                                i1l4530 0140  
                                              i1l4418 0084                                                i1l4540 0155  
                                              i1l4516 0118                                                i1l4444 00AE  
                                              i1l3910 1560                                                i1l4534 0148  
                                              i1l4526 012F                                                i1l4462 00C9  
                                              i1l4374 0047                                                i1l3912 1566  
                                              i1l4482 00EC                                                i1l4394 0067  
                                              i1l3924 1579                                                i1l4564 0190  
                                              i1l4548 0164                                                i1l3926 157F  
                                              i1l4558 0183                                                _INTCON 000B  
                                              u453_25 0025                                                u455_25 003C  
                               __end_of_anderwandlang 090E                                                u478_25 018E  
                                              u743_27 005E                                                _TMR0IE 005D  
                                              _TMR0IF 005A                                                _TMR1IE 0488  
                                              _TMR1IF 0088                                                _SSPADD 0212  
                                              _SSPBUF 0211                                     __end_of_PIC_Slave 1802  
 __end_of_von_mitte_bis_wieder_wand_in_schwarzeplatte 14AF  __size_of_von_mitte_bis_wieder_wand_in_schwarzeplatte 0069  
       ??_von_mitte_bis_wieder_wand_in_schwarzeplatte 0025          ?_von_mitte_bis_wieder_wand_in_schwarzeplatte 0073  
         _von_mitte_bis_wieder_wand_in_schwarzeplatte 1446                                    __size_of_Interrupt 019B  
                                   __end_of_MLX_Slave 1803                                             ??___awdiv 0077  
                                           ??___ftmul 0035                                             ??___fttol 0043  
                               __end_of_omnifakelinks 0AEB                                      ___awdiv@quotient 0026  
                               ??_warten_auf_SSP_flag 0073                                 ___ftmul@f3_as_product 003A  
                                              _zuweit 0066                                          __pdataCOMMON 0079  
                                     ?_Strecke_fahren 0077                                        ??_kit_abwerfen 0077  
                                       ?_rechts90grad 0073                               __end_of__initialization 01E3  
                                    _Power_Ausrichten 0003                       __end_of_von_sensor_VR_bis_mitte 07F1  
                                          ___lbtoft@c 0077                                            ___ftmul@f1 002F  
                                          ___ftmul@f2 0032                                            ___fttol@f1 003F  
                                      __pcstackCOMMON 0073                                          __pidataBANK0 07F1  
                                        __pidataBANK1 115D                                          __pidataBANK2 116E  
                         ??_von_mitte_bis_wieder_wand 00E3                                     _Ausrichten_Fahren 006A  
                                       __end_of_opfer 1620                                             ?_MLX_read 0073  
                       _VAR_schwarz_ausrichten_merken 00D2                                          _Flag_T_links 0384  
                          __size_of_rechts_ausrichten 011A                                      _links_ausrichten 0AEB  
                                __size_of_links90grad 003D                                       _Flag_Zeit1000ms 038B  
                                   __end_of_Interrupt 019F                                               ??_opfer 0023  
                                  _VAR_bis_mitte_zeit 00CB                                    __size_of_hindernis 00A5  
                                      ??_rechts90grad 0022                                            __pbssBANK0 0054  
                                          __pbssBANK1 00A0                                            __pbssBANK2 0120  
                                     __CFG_VCAPEN$OFF 0000                                        _schwarzeplatte 0555  
                         _VAR_von_sensor_VR_bis_mitte 0389                                            __pmaintext 06A9  
                                          __pintentry 0004                                            ??_MLX_read 0073  
                                             _CCP1CON 0293                                               _CCP2CON 029A  
                                             _I2C_Add 0061                                             ?___ftpack 0020  
                                           ?___lbtoft 0028                                        _omnifakerechts 090E  
                           _von_mitte_bis_wieder_wand 13E1                                               _SSPCON1 0215  
                                             _SSPSTAT 0214                                               _Channel 0134  
                                             _Datum_R 00BC                                               _Datum_S 0120  
                              __end_of_schwarzeplatte 06A9                                _VAR_Schwarz_ausrichten 00D7  
                                             _Encoder 0056                                         _Channel_Index 005C  
                                           _I2C_Count 005A                                             _I2C_Write 038F  
                              _Schwellwert_Ausrichten 0068                                            _ausrichten 1220  
                                             _Zeit_US 00DA                             __size_of_vorne_ausrichten 036E  
                                             ___awdiv 126C                                               _Strecke 00BF  
                                __end_of_kit_abwerfen 151D                                               ___ftmul 174C  
                                             ___fttol 1620                                     __end_of_hindernis 174C  
                                     __CFG_STVREN$OFF 0000                                            ??___ftpack 0025  
                                          ??___lbtoft 002B                                               __ptext1 07D0  
                                             __ptext2 13E1                                               __ptext3 0555  
                                             __ptext4 1446                                               __ptext5 16A7  
                                             __ptext6 1220                                               __ptext7 01E7  
                                             __ptext8 0BE8                                               __ptext9 090E  
                              __end_of_omnifakerechts 09F6                                               _schwarz 0062  
                                             clrloop0 1163                                  end_of_initialization 01E3  
                                             init_ram 1168                                       ?_schwarzeplatte 0073  
                                             initloop 1169                               __size_of_im_Kreis_faren 005F  
                                           _PIC_Slave 1801                                     kit_abwerfen@i_278 0021  
                                   kit_abwerfen@i_279 0022                                  __end_of_rechts90grad 1220  
                                           _MLX_Slave 1802                                      ??_Strecke_fahren 0020  
                                     ?_omnifakerechts 0073                              __end_of_Power_Ausrichten 0004  
                                __end_of_PIC_Letter_1 1801                              ??_Werte_auf_LCD_anzeigen 0077  
                                  _VAR_im_Kreis_faren 00D4                               Werte_auf_LCD_anzeigen@i 0078  
                            __end_of_links_ausrichten 0BE8                                           ?_ausrichten 0073  
                                         ___ftmul@exp 0039                           __end_of_warten_auf_SSP_flag 115D  
                                       __pidataCOMMON 07FF                                           _I2C_Index_R 00DF  
                                         _I2C_Index_w 005B                              ?_von_sensor_VR_bis_mitte 0073  
                                   __size_of_MLX_read 007C                                __size_of_anderwandlang 00C5  
                                 start_initialization 01A1                                         _Flag_T_rechts 0383  
                                           _Interrupt 0004                                __size_of_omnifakelinks 00F5  
                  __size_of_von_mitte_bis_wieder_wand 0065                                 __size_of_kit_abwerfen 006E  
                                       _Waerme_rechts 0063                                      _vorne_ausrichten 01E7  
                                         __pdataBANK0 0062                                           __pdataBANK1 00E7  
                                         __pdataBANK2 0134                                         ??_links90grad 0022  
                                 _Var_lang_Ausrichten 00D5                                     __size_of___ftpack 0065  
                                   __size_of___lbtoft 001B                                             ___latbits 0003  
                                       __pcstackBANK0 0020                                         __pcstackBANK1 00E1  
                                 __size_of_ausrichten 004C                       __size_of_Werte_auf_LCD_anzeigen 0045  
                                        _kit_abwerfen 14AF                                            ?_Interrupt 0073  
                                       _anderwandlang 0849                                        _im_Kreis_faren 12BE  
                   __end_of_von_mitte_bis_wieder_wand 1446                                 __size_of_rechts90grad 003D  
                                        _nicht_rechts 0382                                              ?___awdiv 0020  
                                            ?___ftmul 002F                                              ?___fttol 003F  
                                           _grad_90_1 006E                                             _grad_90_2 006D  
                                       _omnifakelinks 09F6                            _VAR_ausrichten_durchgaenge 00D8  
                                           _hindernis 16A7                                              _I2C_Read 038E  
                                 _Flag_Strecke_messen 0380                                   __end_of_links90grad 11E3  
                                    ??_schwarzeplatte 00E1                                        __size_of_opfer 0087  
                              __end_of_im_Kreis_faren 131D                                        ?_anderwandlang 0073  
                                        _rechts90grad 11E3                                             clear_ram0 1162  
                                            _A_D_Wert 00A0                                           _encodersave 00D0  
                                        _PIC_Letter_1 1800                                              _GO_nDONE 04E9  
                              _Werte_auf_LCD_anzeigen 0804                                      ??_omnifakerechts 0028  
                                      ?_omnifakelinks 0073                                              _MLX_read 151D  
                                      _grad_90links_1 006C                                        _grad_90links_2 006B  
                                            _VAR_cm_f 00D1                                              _VAR_omni 00EA  
                                _VAR_links_ist_nichts 00D3                                            ?_hindernis 0073  
                             Strecke_fahren@Direction 0077                                     ?_Power_Ausrichten 0073  
                                            _Flag_LED 038C                                    ??_Power_Ausrichten 0077  
                               _Zeit_power_Ausrichten 00E7                                           ??_Interrupt 0075  
                                     ?_im_Kreis_faren 0073                                 _Flag_Strecke_erreicht 0381  
                                   ?_links_ausrichten 0073                                          ??_ausrichten 0051  
                                        _Waerme_links 0064                                    ??_links_ausrichten 004D  
                                    __size_of___awdiv 0052                                      __size_of___ftmul 00B4  
                                    __size_of___fttol 0087                                              ___ftpack 137C  
                                            ___lbtoft 118B                                           _links90grad 11A6  
                                    _Datum1_an_Letter 00DE                                        _Register_R_MLX 006F  
                                            __ptext10 09F6                                              __ptext11 126C  
                                            __ptext20 12BE                                              __ptext12 0AEB  
                                            __ptext21 0849                                              __ptext13 0D02  
                                            __ptext30 1158                                              __ptext22 1599  
                                            __ptext14 118B                                              __ptext23 11E3  
                                            __ptext15 1620                                              __ptext24 11A6  
                                            __ptext16 174C                                              __ptext25 1179  
                                            __ptext17 137C                                              __ptext26 14AF  
                                            __ptext18 0003                                              __ptext27 0804  
                                            __ptext19 131D                                              __ptext29 151D  
                                    _Datum2_an_Letter 00DD                                    __end_of_ausrichten 126C  
                            __end_of_vorne_ausrichten 0555                                         kit_abwerfen@i 0020  
                                     ??_anderwandlang 0025                      __size_of_von_sensor_VR_bis_mitte 0021  
                                   _hinten_ausrichten 0D02                                         __size_of_main 0127  
                                       __size_of_init 005F                                    ?_hinten_ausrichten 0073  
                                _Temperatur_HI_rechts 005E                                       ??_omnifakelinks 0028  
                                 ??_hinten_ausrichten 004D                                              int$flags 007E  
                        __size_of_warten_auf_SSP_flag 0005                                           ??_hindernis 0077  
                                _Temperatur_LO_rechts 0060                             __end_of_hinten_ausrichten 1000  
                             __size_of_Strecke_fahren 0012                                              intlevel1 0000  
                                   __CFG_CLKOUTEN$OFF 0000                                   _Temperatur_HI_links 005D  
                                    _Schwellwert_Omni 0067                                      _Flag_kalibrieren 038D  
                                 _Temperatur_LO_links 005F                                         __pstringtext1 1800  
                                       __pstringtext2 1801                                         __pstringtext3 1802  
                                    _MLX_Slave_toggel 0390                                            _OPTION_REG 0095  
                                      _VAR_links_zeit 00C5                                       _VAR_rechts_zeit 00C7  
                                        _VAR_aus_zeit 0054                               ?_Werte_auf_LCD_anzeigen 0073  
                                         _VAR_schwarz 0388  
